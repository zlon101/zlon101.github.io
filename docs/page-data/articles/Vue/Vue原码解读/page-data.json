{"componentChunkName":"component---src-templates-post-js","path":"/articles/Vue/Vue原码解读/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/Vue/Vue原码解读/"},"html":"<h1>数据驱动 &#x26; 响应式原理</h1>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;div&gt;\n    &lt;p id=&quot;name&quot;&gt;&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n\tvar obj = { };\n\t\n\tObject.defineProperty(obj, &#39;name&#39;, {\n\t\tget(){\n\t\t\treturn document.querySelector(&#39;#name&#39;).innerHTML;\n\t\t}，\n\t\tset(val){\n\t\t\tdocument.querySelector(&#39;#name&#39;).innerHTML = val;\n\t\t}\n\t});\n\t\n\tobj.name = &#39;czl&#39;;\t// 执行set函数\n&lt;/script&gt;\n</code>\n        </deckgo-highlight-code>\n<ul>\n<li>通过Object.defineProperty和getter &#x26; setter实现数据响应。对Vue中data对象的每个属性都定义了set和get，监听这些属性的变化，当这些属性变化时，通知那些与之相关的数据更新。</li>\n</ul>\n<h1>依赖收集与数据跟踪</h1>\n<p>当数据变化时，找到界面中需要更新的地方。</p>\n<ul>\n<li>\n<p>vue在实例化的时候, 会对data对象中的每一个属性, 去做数据跟踪, 但是在写业务逻辑时, 会有很多的属性其实在视图层根本用不到, 但是这个属性在下面的methods的方法中会用到, 比如下面的代码:</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">export default {\n  data () {\n    return {\n      title: &#39;xxx&#39;, \t\t// 这个属性需要在视图层用到, 需要加上数据跟踪\n      loginStatus: false, \t// 这个属性在视图层用不到, 但是在methods的方法中要用来改变和作为判断条件, 根本不需要加入数据跟踪\n    }\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>但是改写成这样以后, 不需要跟踪的就不会跟踪了, 但是这样会有什么问题吗? 目前不知道如何去验证</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">export default {\n  data () {\n    this.loginStatus = false // 这样这个属性就不会加上数据跟踪, 但是下面的方法还可以 this.loginStatus 的去使用\n    return {\n      title: &#39;xxx&#39; \t\t\t// 这个属性需要在视图层用到, 需要加上数据跟踪\n    }\n  }\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h1>Vue的编译过程</h1>\n<ul>\n<li>3WEH\n<ul>\n<li>什么是编译：Vue编写的模板HTML无法识别，通过编译进行依赖收集，将data中的数据与视图进行绑定，实现依赖关联。当模型发生变化时，更新视图，即<strong>模型驱动视图</strong>。</li>\n<li>为什么是编译，</li>\n<li>双向绑定：事件监听(input)，当事件发生时，修改模型(data对象)，又因为模型设置的set函数，进而更新视图。</li>\n</ul>\n</li>\n</ul>\n<h1>数组的push如何响应？</h1>","id":"9c030825-e145-5af6-b420-211d7d20177f","parent":{"name":"Vue原码解读","base":"Vue原码解读.md","mtime":"2022-09-07T04:15:03.297Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/Vue/Vue原码解读/"}},"staticQueryHashes":["3957182205"]}