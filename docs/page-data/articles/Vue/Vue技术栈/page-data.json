{"componentChunkName":"component---src-templates-post-js","path":"/articles/Vue/Vue技术栈/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/Vue/Vue技术栈/"},"html":"<h1>Vue全家桶</h1>\n<ul>\n<li>vuex：状态管理</li>\n<li>vue-router：路由</li>\n<li>vue-resource &#x26; axios(通用)：http请求</li>\n<li>vuelidate：表单验证</li>\n</ul>\n<h1>Vuex</h1>\n<h2>1. 基本使用</h2>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import Vuex from &#39;vuex&#39;;\nimport Vue from &#39;vue&#39;;\n\nVue.use(Vuex);\n\nconst store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    // 读取状态, 插值表达式{{ $store.getters.doubleCount }}\n    getters: {\n        // 类似计算属性computed, 起到缓存的作用\n        doubleCount(state){\n            return state.count * 2;\n        }\n    }\n    \n    /*\n\tmutations:\n    \t由组件触发:\n    \t&lt;button @click=&quot;$store.commit(&#39;increment&#39;, 2)&quot;&gt;触发commit&lt;/button&gt;\n    */\n    mutations: {\n        increment(state, newV){\n            state.count = state.count + newV;\n        }\n    },\n    \n    /*\n    触发方式\n    \t&lt;button @click=&quot;$store.dispatch(&#39;incrementAction&#39;, 2)&quot;&gt;触发dispatch&lt;/button&gt;\n    \t\n    \tactions 应该避免直接操作 state，state 的更改应该由 mutations 完成, 否则vue-devtools插件无法记录state的变更。\n    \tactions 可以根据当前 state 进一步处理数据, 计算或请求后端接口, 然后通过commit的方式提交给mutations去处理。\n\n    */\n    actions: {\n        incrementAction(ctx, newV){\n            let commit = ctx.commit;\n            setTimeout( () =&gt; commit(&#39;increment&#39;), 3000);\n        }\n    }\n});\n\nnew Vue({\n    store: store,\t\t// 在组件实例中通过this.$store访问该store\n    render: h =&gt; h(App)\n}).$mount(&#39;#app&#39;);\n\n// 在组件实例中读取store\ncomputed: {\n\tcount(){\n        return this.$store.state.count;\n    }\n}\n\n// 修改store\n</code>\n        </deckgo-highlight-code>\n<h2>2. 核心概念和原理</h2>\n<p><img src=\"assets/Vue%E6%8A%80%E6%9C%AF%E6%A0%88/1561195170226.png\" alt=\"1561195170226\" style=\"zoom: 67%;\" />   <img src=\"assets/Vue%E6%8A%80%E6%9C%AF%E6%A0%88/1561203551146.png\" alt=\"1561203551146\" style=\"zoom:67%;\" /></p>\n<ul>\n<li>\n<p><strong>vuex底层实现</strong></p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 简化版Vuex vue-min.js\nimport Vue from &#39;vue&#39;\nconst Store = function Store (options = {}) {\n  const {state = {}, mutations={}} = options;\n  this._vm = new Vue({\n    data: {\n      $$state: state\n    },\n  })\n  this._mutations = mutations\n}\n\nStore.prototype.commit = function(type, payload){\n  if(this._mutations[type]) {\n    // this.state访问的是原型上面的state 数据项\n    this._mutations[type](this.state, payload)\n  }\n}\n\nObject.defineProperties(Store.prototype, { \n  state: { \n    get: function(){\n      // this._vm._data 而不是 _vm.data,  \n      return this._vm._data.$$state\n    } \n  }\n});\nexport default {Store}\n\n// 使用简化版Vuex\nimpore vuexMin from &#39;vue-min.js&#39;;\n\nconst store = new vuexMin.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        increment(state, newV){\n            state.count = state.count + newV;\n        }\n    }\n})\n\nVue.prototype.$store = store;\nnew Vue({\n    el: &#39;xx&#39;,\n    rendre: ...\n});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h2>1. Vuex结构</h2>\n<table style='width:50px'>\n<tr>\n\t<th colspan=\"2\">this.$store</th>\n</tr>\n<tr>\n\t<td rowspan=\"2\" style='vertical-align:center'>getter</td>\n\t<td>action</td>\n</tr>\n<tr>\n\t<td>mution</td>\n</tr>\n<tr>\n\t<td colspan=\"2\">this.$store.state</td>\n</tr>\n</table>","id":"fada9550-f547-516a-bb90-aa1afcfe78bf","parent":{"name":"Vue技术栈","base":"Vue技术栈.md","mtime":"2022-09-07T04:15:03.303Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/Vue/Vue技术栈/"}},"staticQueryHashes":["3957182205"]}