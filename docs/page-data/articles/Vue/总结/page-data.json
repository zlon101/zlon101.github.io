{"componentChunkName":"component---src-templates-post-js","path":"/articles/Vue/总结/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/Vue/总结/"},"html":"<h1>Vue编写风格</h1>\n<ul>\n<li>HTML元素的属性值始终带引号<code>&#x3C;input type='text'></code>;\r\n<code>&#x3C;AppSidebar :style={width:sidebarWidth+'px'}></code>也是可以的(HTML中没有空格的属性值可以不用引号包裹)</li>\n</ul>\n<h1>Vue概念解释</h1>\n<p>单文件组件中 <code>&#x3C;style></code> 是可选的，<code>&#x3C;script></code> 和 <code>&#x3C;template></code> 至少要有一个。</p>\n<p>一个理想的 Vue 应用是 prop 向下传递，事件向上传递的</p>\n<p>html 使用双引号，js 使用单引号\r\nDOM 模板使用短横线，其他的()使用大驼峰</p>\n<ul>\n<li>\n<p><a href=\"https://cloud.tencent.com/developer/article/1448243\">vscode + vue</a></p>\n</li>\n<li>\n<p>sourcemap</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844903905684357127\">https://juejin.cn/post/6844903905684357127</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\">sourcemap 详解</a></li>\n</ul>\n</li>\n<li>\n<p>webpack\\vue-cli  打包构建的资源到哪里去了  在浏览器dev-tools 中的 source 中查看</p>\n</li>\n<li>\n<p>this.$nextTick   一旦你使用了 <code>keep-alive</code>，那么你就可以访问另外两个生命周期钩子：<code>activated</code> 和 <code>deactivated</code></p>\n</li>\n<li>\n<p>单文件组件</p>\n</li>\n<li>\n<p>DOM模板\r\n能被 html 识别的，以 html 形式编写?</p>\n</li>\n<li>\n<p>字符串模板\r\n以字符串的形式写在选项对象的 template 属性上(全局注册和局部注册组件时)</p>\n</li>\n<li>\n<p>JSX</p>\n<deckgo-highlight-code language=\"html\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;\r\n&lt;MyComponent/&gt;\r\n\r\n&lt;!-- 在 DOM 模板中, 没有自闭合, 不是匈牙利命名 --&gt;\r\n&lt;my-component&gt;&lt;/my-component&gt;</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h1>响应式原理</h1>\n<p>Vue2的响应式是通过 Object.defineProperty 拦截数据，将数据（准确的说是对象属性）转换为 getter/setter 的形式，在访问属性时调用 getter函数，在修改属性时调用setter函数。然后利用发布-订阅（观察者模式）模式在数据变化时通知Watcher更新。</p>\n<h1>以下数据更新时 vue 不能监测到</h1>\n<blockquote>\n<p>视图不会更新</p>\n</blockquote>\n<ul>\n<li>\n<p>通过索引修改数组的值</p>\n<ul>\n<li><code>this.idArr[0] = {}</code> 和  <code>this.idMap.list[0] = xxx</code>  idMap 是一个对象。</li>\n<li>使用 <code>arr.splice</code> 设置或 <code>this.$set()</code></li>\n</ul>\n</li>\n<li>\n<p>修改数组的 <code>length</code> 属性</p>\n<ul>\n<li>使用 <code>arr.splice</code> 设置或 <code>this.$set()</code></li>\n</ul>\n</li>\n</ul>\n<p>父组件通过 <code>props</code> 传递一个引用类型的值(<code>propsObj</code>)给子组件，子组件将 <code>propsObj</code> 赋值给自身 <code>data</code> 属性。当子组件修改 <code>initVal</code> 时，父组件中的值也会被修改，因为父组件和子组件引用的用一个对象值。</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">props: [&#39;propsObj&#39;],\r\n  data() {\r\n  return {\r\n    initVal: this.propsObj\r\n  };\r\n},</code>\n        </deckgo-highlight-code>\n<h1>Vue 生命周期 watch 执行顺序 | 指令生命周期</h1>\n<blockquote>\n<p>初始渲染</p>\n</blockquote>\n<ul>\n<li>beforeCreate</li>\n<li>created</li>\n<li>beforeMount</li>\n<li>mounted</li>\n</ul>\n<blockquote>\n<p>props 或 data 更新</p>\n</blockquote>\n<ul>\n<li>watch</li>\n<li>beforUpdate</li>\n<li>updated</li>\n</ul>\n<blockquote>\n<p>watch immediate 情况下初始渲染</p>\n</blockquote>\n<ul>\n<li>beforeCreate</li>\n</ul>\n<p>this 不是 undefined，不能访问当前实例上的属性，可以访问 <code>Vue.prototype</code> 上的属性</p>\n<ul>\n<li><strong>data 函数</strong></li>\n</ul>\n<p>可以访问 this 及 props 上的属性，props 属性值是父组件执行 beforeMount 钩子时传入子组件的值</p>\n<ul>\n<li><strong>watch 监听器</strong></li>\n</ul>\n<p>可以访问 <code>this</code></p>\n<ul>\n<li>created</li>\n<li>beforeMount</li>\n<li>mounted</li>\n</ul>\n<blockquote>\n<p>父组件和子组件的生命周期执行顺序</p>\n</blockquote>\n<ul>\n<li>\n<p>父组件的<code>beforeCreate</code></p>\n</li>\n<li>\n<p>父组件的<code>created</code></p>\n</li>\n<li>\n<p>父组件的<code>beforeMount</code></p>\n<ul>\n<li>子组件的<code>beforeCreate</code></li>\n<li>子组件的<code>created</code></li>\n<li>子组件的<code>beforeMount</code></li>\n<li>子组件的<code>mounted</code></li>\n</ul>\n</li>\n<li>\n<p>父组件的<code>mounted</code></p>\n</li>\n</ul>\n<h2>指令生命周期</h2>\n<p>bind\r\ninserted\r\nupdate\r\ncomponentUpdated\r\nunbind</p>\n<h1>input 验证</h1>\n<p>Q: 非数据驱动，给 input 传入固定的值，input 框依然可以输入。</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">  &lt;input :value=&quot;text&quot;/&gt;</code>\n        </deckgo-highlight-code>\n<p>A: 使用 <code>element.setAttirbute</code> 不能设置 input 元素的值。使用 input.value = 'xx' 可以实现验证和长度限制。</p>\n<h1>异步更新DOM</h1>\n<p>vue观察到数据变化时并不是立即更新DOM，而是开启一个事件队列，缓冲在同一个事件循环中发生的所有数据改变，在缓冲时会去除重复数据。然后在下一个事件循环 tick 中刷新新队列并执行更新。</p>\n<p>vue会根据当前浏览器环境优先使用原生 Promise 和 MutatinObserver。</p>\n<h1>动态创建组件</h1>\n<p>动态创建组件有两种方式 1): <code>new Vue</code>; 2): <code>new Vue.extend(cmp)</code></p>\n<p>单文件组件 <code>export</code> 就是组件选项对象</p>\n<deckgo-highlight-code language=\"vue\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import Vue from &#39;vue&#39;;\r\nimport router from &#39;@/router&#39;;\r\nimport CusDialog from &#39;./userDialog.vue&#39;;\r\n\r\nexport default function createDialog(title, fields) {\r\n  const instance = new Vue({\r\n    ...CusDialog,\r\n    router,\r\n    propsData: {\r\n      visible: true,\r\n      title,\r\n      fieldOpts: fields,\r\n    },\r\n  }).$mount();\r\n  document.body.appendChild(instance.$el);\r\n  return instance;\r\n}\r\n// 用Vue.extend 继承 router、store 等，不用再次传递router\r\nconst extendCmp = Vue.extend(Cmp);\r\nconst renderCmp = (propsData) =&gt; {\r\n  const instance = new extendCmp({ propsData }).$mount();\r\n  document.body.appendChild(instance.$el);\r\n  return instance;\r\n}\r\n\r\n// 销毁\r\ninstance.$destroy();\r\ninstance.$el.remove();</code>\n        </deckgo-highlight-code>\n<p><code>$mount('#app')</code> 组件会替换 <code>#app</code>  元素本身（<code>outerHtml</code>）</p>\n<blockquote>\n<p>获取插槽实例</p>\n</blockquote>\n<p><code>this.$slots.default[0].componentInstance</code></p>\n<h1>内容分发</h1>\n<blockquote>\n<p>作用域插槽在需要同时封装逻辑、组合视图界面时很有用</p>\n</blockquote>\n<blockquote>\n<p>动态组件 <code>&#x3C;component></code> + <code>&#x3C;slot></code> 内容分发</p>\n</blockquote>\n<p>表单组件包含了很多字段（input、radio、checkbox）等，在不同场景下使用表单组件，表单的逻辑是一致的，字段绑定、校验、提交，但是UI 布局会不同。</p>\n<ul>\n<li>cus-form.vue</li>\n</ul>\n<deckgo-highlight-code language=\"vue\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;component :is=&quot;$slot.default&quot;&gt;\r\n  &lt;input v-modal=&quot;name&quot; slot=&quot;name&quot;&gt;\r\n  &lt;checkbox v-modal=&quot;age&quot;  slot=&quot;age&quot; /&gt;\r\n&lt;/component&gt;</code>\n        </deckgo-highlight-code>\n<ul>\n<li>使用</li>\n</ul>\n<deckgo-highlight-code language=\"vue\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;cus-form&gt;\r\n  &lt;div&gt;\r\n    &lt;h1&gt;年龄&lt;/h1&gt;\r\n    &lt;slot name=&quot;age&quot;&gt;&lt;/slot&gt;\r\n  &lt;/div&gt;\r\n&lt;/cus-form&gt;</code>\n        </deckgo-highlight-code>\n<h2>插槽透窗</h2>\n<deckgo-highlight-code language=\"vue\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;template v-for=&quot;item in slots&quot; #[item]=&quot;props&quot;&gt;\r\n  &lt;slot :name=&quot;item&quot; v-bind=&quot;props&quot;&gt;&lt;/slot&gt;\r\n&lt;/template&gt;\r\n&lt;script&gt;\r\nconst slots = Object.keys({\r\n  ...this.$slots,\r\n  ...this.$scopedSlots\r\n});\r\n&lt;/script&gt;</code>\n        </deckgo-highlight-code>\n<h1>程序化事件监听器</h1>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">this.$on(&#39;event-name&#39;, handler);\r\nthis.$once(&#39;eventName&#39;, handler);\r\n// 监听生命周期\r\nthis.$on(&#39;hook:beforeDestroy&#39;, handler);</code>\n        </deckgo-highlight-code>\n<h1>问答</h1>\n<h2>this.$emit的返回值是什么？</h2>\n<p>this.$emit的返回值就是this，如果需要在子组件中向父组件返回其他值，可以通过回调参数实现，即在子组件中this.$emit的实参中传递一个函数。</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// 子组件内部\r\nmethods: {\r\n    handleChange(e) {\r\n    \tlet callfn = val =&gt; {\r\n    \t\tconsole.log(val);\r\n    \t}\r\n    \tconst res = this.$emit(&quot;change&quot;, e.target.value, callfn);\r\n    \tconsole.log(res, res === this);\r\n    }\r\n}\r\n\r\n// 父组件\r\nconst res = this.$emit(&quot;change&quot;, e.target.value, callfn);触发change事件，父组件中调用handleEventChange事件处理函数\r\n&lt;Event :name=&quot;name&quot; @change=&quot;handleEventChange&quot; /&gt;\r\n\r\nhandleEventChange(val, callback) {\r\n// 形参val和callback分别由this.$emit()第二和第三个参数传递\r\n\tthis.name = val;\r\n\tcallback(&quot;hello&quot;);\r\n\treturn &quot;hello&quot;;\r\n}\r\n</code>\n        </deckgo-highlight-code>\n<h2>相同名称的插槽(具名插槽)是合并还是替换？</h2>\n<ul>\n<li>Vue2.5版本：普通插槽合并、作用域插槽替换。</li>\n<li>Vue2.6版本：都是替换。</li>\n</ul>\n<h2>数组有哪些方法支持响应式更新，如果不支持怎么办，底层原理如何实现？</h2>\n<ul>\n<li>支持：push、pop、shift、unshift、splice、sort、reverse，这些方法会改变原数组。</li>\n<li>不支持：fiter、concat、slice，这些方法不会改变原数组；可以修改整个数组实现响应式更新(将新的数组赋值给原来的数组)。</li>\n<li>原理同样是使用Object.defineProperty对数组方法进行改写</li>\n</ul>\n<h2>ajax请求</h2>\n<ul>\n<li>ajax请求可以放在created和mounted生命周期中，但如果是做同构应用mounted不会在服务端调用，而created是会在服务端调用。</li>\n</ul>\n<h1>Vue-router</h1>\n<p><code>push</code> 和 <code>replace</code> 的 onComplete 和 onAbort 回调参数，这些回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用。在 3.1.0+，可以省略第二个和第三个参数，此时如果支持 Promise，router.push 或 router.replace 将返回一个 Promise。</p>\n<ul>\n<li>\n<p>组件跳转到其他组件，触发 onComplete 回调</p>\n</li>\n<li>\n<p>组件跳到自己，不带参数</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">this.$router.push({ name: &#39;number&#39;}, () =&gt; {\r\n  console.log(&#39;组件2：onComplete回调&#39;);\r\n}, () =&gt; {\r\n  console.log(&#39;组件2,自我跳转：onAbort回调&#39;); // 会执行\r\n});</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>组件跳转到自己，带参数</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">this.$router.push({ name: &#39;number&#39;, params: { foo: this.number}}, () =&gt; {\r\n    console.log(&#39;组件2：onComplete回调&#39;);  // 不会执行\r\n}, () =&gt; {\r\n    console.log(&#39;组件2,自我跳转：onAbort回调&#39;); // 不会执行\r\n});</code>\n        </deckgo-highlight-code>\n<p>onComplete 和 onAbort 都不会执行，但是 beforeRouteUpdate 会执行。</p>\n</li>\n</ul>\n<hr>\n<h1>Vue组件库</h1>\n<ul>\n<li><a href=\"https://primefaces.org/primevue/dialog\">PrimeBUE</a></li>\n<li><a href=\"https://element-plus.gitee.io/zh-CN/component/dialog.html\">Element-plus</a></li>\n<li><a href=\"https://2x.antdv.com/components/modal-cn\">adt-design-vue</a></li>\n</ul>\n<h1>Vue.use的作用</h1>\n<p>Vue.use(mintui)做的就是注册所有的全局组件(webpack require.context)，并在Vue.prototype添加一些属性，这样在组件内就可以使用this.xx</p>\n<ul>\n<li>\n<p>自定义插件，使用Vue.use()安装，如安装axios</p>\n<p>// installer.js</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">function Installer(){}\r\n// 必须要有一个install属性\r\nInstaller.install = function(Vue){\r\n    // 1. 注册全局组件\r\n    Vue.component(&#39;xx&#39;,{\r\n        ...\r\n    });\r\n    // 2. 添加属性\r\n    // Vue.protype.$log = function() {\r\n    //     console.log(&#39;hahaahhahaah&#39;)\r\n    // }\r\n    // this.$log = &#39;abxadksadas&#39; 子类对象可以修改父类的属性\r\n\r\n    let log = function () {\r\n        console.log(&#39;我们自己插件的log函数&#39;)\r\n    }\r\n\r\n    // 给原型定义属性的获取和设置，设置:见鬼去吧，获取就给你\r\n    Object.defineProperty(Vue.prototype,&#39;$log&#39;,{\r\n        // 设置 $log属性时的行为 || 不给，不能设置\r\n        set:function (newV) {\r\n            console.log(&#39;你做梦&#39;);\r\n            // log = newV;\r\n\r\n        },     \r\n        get:function () {\r\n            // 获取方式\r\n            return log;\r\n        }\r\n    })\r\n}\r\n</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h1>Vue单页面SEO优化</h1>\n<ul>\n<li>服务端渲染 SSR ：Nuxt.js</li>\n<li>页面预渲染\n<ul>\n<li>在页面中先预渲染部分静态内容，不用JS注入</li>\n<li>使用插件：vue-cli-plugin-prerender-spa 或 prerender-spa-plugin</li>\n</ul>\n</li>\n</ul>\n<h1>预渲染</h1>\n<p>单页面(SPA) 应用的 SEO 优化有服务端渲染(SSR) &#x26; 页面预渲染两种方法。</p>\n<ul>\n<li>预渲染的使用场景更多是简单的<strong>静态页面</strong>，加快页面的<strong>加载速度</strong>，并且侵入性更小，在已上线的项目稍加改动也可以轻松引入预渲染机制。</li>\n<li>服务端渲染适用于复杂、较大型、与服务端交互频繁的功能型网站，比如电商网站。SSR方案则需要将整个项目结构推翻。</li>\n<li>两则的区别在于渲染的时机不同：<code>prerender-spa-plugin</code>是在打包过程中渲染，注定了其只能渲染静态路由，而<code>prerender</code> 是在请求时渲染，所以可以渲染动态的路由。</li>\n</ul>\n<h2>vue 预渲染实现</h2>\n<blockquote>\n<p>插件配置</p>\n</blockquote>\n<p>prerender-spa-plugin &#x26; vue-meta-info</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// vue.config.js\r\n// 这三项一定要有，因为下面configureWebpack中用到了\r\nconst PrerenderSPAPlugin = require(&#39;prerender-spa-plugin&#39;);\r\nconst Renderer = PrerenderSPAPlugin.PuppeteerRenderer;\r\nconst path = require(&#39;path&#39;);\r\n\r\nmodule.exports = {\r\n  // 预渲染关键配置\r\n  configureWebpack: () =&gt; {\r\n    if (process.env.NODE_ENV !== &#39;production&#39;) return;\r\n    return {\r\n      plugins: [\r\n        new PrerenderSPAPlugin({\r\n          // 生成文件的路径，也可以与webpakc打包的一致。\r\n          // 下面这句话非常重要！！！\r\n          // 这个目录只能有一级，如果目录层次大于一级，在生成的时候不会有任何错误提示，在预渲染的时候只会卡着不动。\r\n          staticDir: path.join(__dirname, &#39;dist&#39;),\r\n  \r\n          // 对应自己的路由文件，如果有参数需要写具体参数，比如/a/:id需要写/a/123456\r\n          routes: [&#39;/&#39;, &#39;/about&#39;],\r\n  \r\n          // 这个很重要，如果没有配置这段，也不会进行预编译\r\n          renderer: new Renderer({\r\n            inject: {\r\n              foo: &#39;bar&#39;\r\n            },\r\n            headless: false,\r\n            // 在 main.js 中 document.dispatchEvent(new Event(&#39;render-event&#39;))，两者的事件名称要对应上。\r\n            renderAfterDocumentEvent: &#39;render-event&#39;\r\n          })\r\n        })\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// main.js\r\n  new Vue({\r\n    router,\r\n    store,\r\n    render: (h) =&gt; h(App),\r\n    // 添加mounted，不然不会执行预编译\r\n    mounted() {\r\n      document.dispatchEvent(new Event(&#39;render-event&#39;));\r\n    }\r\n  }).$mount(&#39;#app&#39;);\r\n</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>服务端配置</p>\n</blockquote>\n<p>History 模式需要后台配置支持，最简单的是通过 nginx 配置 try_files 指令。</p>\n<blockquote>\n<p>vue-meta-info</p>\n</blockquote>\n<p>组件内使用</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;script&gt;\r\n  export default {\r\n    metaInfo: {\r\n      title: &#39;My Example App&#39;, // set a title\r\n      meta: [{                 // set meta\r\n        name: &#39;keyWords&#39;,\r\n        content: &#39;My Example App&#39;\r\n      }]\r\n      link: [{                 // set link\r\n        rel: &#39;asstes&#39;,\r\n        href: &#39;https://assets-cdn.github.com/&#39;\r\n      }]\r\n    }\r\n  }\r\n&lt;/script&gt;</code>\n        </deckgo-highlight-code>\n<h1>用作鉴权的函数式组件</h1>\n<p>Authorized.vue 鉴权组件</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;script&gt;\r\nimport { check } from &quot;../utils/auth&quot;;\r\nexport default {\r\n  functional: true,\r\n  props: {\r\n    authority: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  render(h, context) {\r\n    const { props, scopedSlots } = context;\r\n    // check 用来判断是否授权\r\n    return check(props.authority) ? scopedSlots.default() : null;\r\n  }\r\n};\r\n&lt;/script&gt;</code>\n        </deckgo-highlight-code>\n<ul>\n<li>main.js 注册</li>\n</ul>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import Authorized from &quot;Authorized.vue&quot;;\r\nVue.component(&quot;Authorized&quot;, Authorized);</code>\n        </deckgo-highlight-code>\n<ul>\n<li>使用</li>\n</ul>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;Authorized :authority=&quot;[&#39;admin&#39;]&quot;&gt;\r\n  &lt;SettingDrawer /&gt;\r\n&lt;/Authorized&gt;\r\n// 如果传递的 authority 通过 check, 则 &lt;SettingDdrawer&gt; 组件会显示, 否则不会显示;</code>\n        </deckgo-highlight-code>\n<h2>权限指令</h2>\n<p>指令 direction.js</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import { check } from &quot;../utils/auth&quot;;\r\nfunction install(Vue, options = {}) {\r\n  Vue.directive(options.name || &quot;auth&quot;, {\r\n    inserted(el, binding) {\r\n      if (!check(binding.value)) {\r\n        el.parentNode &amp;&amp; el.parentNode.removeChild(el);\r\n      }\r\n    }\r\n  });\r\n}\r\nexport default { install };</code>\n        </deckgo-highlight-code>\n<ul>\n<li>注册指令</li>\n</ul>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import Auth from &quot;direction.js&quot;;\r\nVue.use(Auth);</code>\n        </deckgo-highlight-code>\n<ul>\n<li>使用指令</li>\n</ul>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&lt;comp v-auth=&quot;[&#39;admin&#39;]&quot; /&gt;</code>\n        </deckgo-highlight-code>\n<h2>JSX  使用</h2>\n<blockquote>\n<p>@vue/cli-plugin-babel/preset</p>\n</blockquote>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">module.exports = {\r\n  presets: [&#39;@vue/cli-plugin-babel/preset&#39;],\r\n};</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p><a href=\"https://github.com/vuejs/jsx\">Babel Preset JSX</a></p>\n</blockquote>\n<h1>Vue源码</h1>\n<ul>\n<li>阅读源码哈<a href=\"https://github.com/vueComponent/ant-design-vue\">https://github.com/vueComponent/ant-design-vue</a>\r\nvue源码可以推荐两个：\r\n<a href=\"https://ustbhuangyi.github.io/vue-analysis/\">https://ustbhuangyi.github.io/vue-analysis/</a>\r\n<a href=\"https://github.com/answershuto/learnVue\">https://github.com/answershuto/learnVue</a></li>\n</ul>\n<h1>其他</h1>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904191677186061\">vue 函数式组件</a></p>\n</blockquote>\n<blockquote>\n<p><code>$nextTick</code> 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 <code>$nextTick</code>，则可以在回调中获取更新后的 DOM；</p>\n</blockquote>","id":"75e87ec8-107f-5fdc-804f-cd1e3aa227d6","parent":{"name":"总结","base":"总结.md","mtime":"2023-07-24T09:09:17.901Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/Vue/总结/"}},"staticQueryHashes":["3957182205"]}