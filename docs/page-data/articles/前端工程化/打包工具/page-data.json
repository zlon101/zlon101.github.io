{"componentChunkName":"component---src-templates-post-js","path":"/articles/前端工程化/打包工具/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/前端工程化/打包工具/"},"html":"<blockquote>\n<p>目标</p>\n</blockquote>\n<ul>\n<li>入口</li>\n<li>输出</li>\n<li>输出格式：cmd、umd、es module</li>\n<li>图像资源</li>\n<li>全局样式</li>\n<li>svg生成iconfont字体图标\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000017480480\">webpack自动用svg生成iconfont字体图标，支持热重载</a></li>\n</ul>\n</li>\n<li>svg生成vue 组件</li>\n<li>webpack rollup <a href=\"https://webpack.docschina.org/guides/tree-shaking/\">Tree Shaking</a> sideEffects 打包库 esbuild</li>\n<li>rollup esbuild webpack pnpm</li>\n</ul>\n<h1>不同工具的区别</h1>\n<ul>\n<li>webpack 适合用于打包 app，rollup 适合用于打包库</li>\n</ul>\n<blockquote>\n<p>webpack 使用场景</p>\n</blockquote>\n<ul>\n<li>打包 app</li>\n<li>代码分隔、静态资源处理、CommonJS 依赖处理</li>\n</ul>\n<blockquote>\n<p>rollup</p>\n</blockquote>\n<ul>\n<li>ES2015 modules 代码</li>\n</ul>\n<h1>rollup</h1>\n<p>rollup 可以打包输出 es module、commonjs 等不同模块格式的文件。</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npx rollup -c config.js -i src/components/button/index.js -f es --name &quot;myBundle&quot; -o bundle.js</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>配置文件</p>\n<p><a href=\"https://bytenote.net/article/97582337432223745\">配置</a></p>\n</blockquote>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">import json from &#39;@rollup/plugin-json&#39;;\r\nimport resolve from &#39;@rollup/plugin-node-resolve&#39;;\r\n\r\nexport default {\r\n  input: &#39;src/main.js&#39;,\r\n  output: {\r\n    file: &#39;bundle.js&#39;,\r\n    format: &#39;es&#39;, // amd, cjs, es, iife, umd, system\r\n  },\r\n  output: [\r\n    {\r\n      file: &#39;bundle.js&#39;,\r\n      format: &#39;cjs&#39;,\r\n    },\r\n    {\r\n      file: &#39;bundle.min.js&#39;,\r\n      format: &#39;iife&#39;,\r\n      name: &#39;version&#39;,\r\n      plugins: [terser()], // 压缩\r\n    },\r\n  ],\r\n  plugins: [\r\n    // 解析三方npm包\r\n    resolve({\r\n      // pass custom options to the resolve plugin\r\n      moduleDirectories: [&#39;node_modules&#39;],\r\n    }),\r\n    // 解析json文件\r\n    json(),\r\n  ],\r\n  // indicate which modules should be treated as external\r\n  external: [&#39;lodash&#39;, &#39;vue&#39;],\r\n};</code>\n        </deckgo-highlight-code>\n<p>Rollup will only resolve relative module IDs by default.\r\nrollup 默认不解析引用的外部三方库，如：<code>import moment from 'moment';</code></p>\n<blockquote>\n<p>插件</p>\n</blockquote>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">@rollup/plugin-json\r\nrollup-plugin-postcss \r\n@rollup/plugin-node-resolve\r\n\r\npostcss\r\npostcss-url\r\n@rollup/plugin-url </code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://vitejs.dev/\">Vite</a></h1>\n<h2>概念</h2>\n<p>Vite 的目标仅为现代浏览器</p>\n<p>Vite 的工作是尽可能快地将源模块转化为可以在浏览器中运行的形式</p>\n<p>Vite 通过在一开始将应用中的模块区分为【依赖】和【源码】两类。</p>\n<p>npm  依赖解析。</p>\n<p>依赖强缓存【403】</p>\n<p>【按需编译】</p>\n<p>需要浏览器支持 ES Module ，最低支持 ES6(es2015)</p>\n<h2>功能</h2>\n<p>使用 Rollup 打包源码</p>\n<ol>\n<li>\n<p>Vite 能够处理依赖关系，解析处于根目录外的文件位置，这使得它即使在基于 monorepo 的方案中也十分有用。</p>\n</li>\n<li>\n<p>支持多个 .html 作入口点的 多页面应用模式</p>\n</li>\n<li>\n<p>内置对 TypeScript 的支持，Vite 使用 esbuild 将 TypeScript 转译到 JavaScript</p>\n</li>\n<li>\n<p>.jsx 和 .tsx 文件开箱即用，JSX 的转译同样是通过 esbuild。</p>\n</li>\n<li>\n<p>Glob 实现批量导入模块</p>\n</li>\n<li>\n<p>支持 SSR（实验性）</p>\n</li>\n<li>\n<p>组件按需加载</p>\n</li>\n</ol>\n<p>unplugin-vue-components 和 unplugin-auto-import 这两款 <code>vite</code> 插件来开启按需加载及自动导入，插件会自动解析模板中的使用到的组件，并导入组件和对应的样式文件。</p>\n<p>这两个插件一个是自动帮我们引入一些组件和指令（只做 <code>HTML</code> 中使用的常规组件例如各种  <code>.vue</code> 组件的引入以及指令的自动引入），另一个是自动帮我们做一些 <code>API</code> 组件的自动引入（像直接在 <code>script</code> 中引入的必须用 <code>API</code> 调用的 <code>Message</code> 组件以及后面我们还会用它做 <code>Vue</code> 的一些 <code>API</code> 自动引入等等）</p>\n<h2>预构建依赖</h2>\n<p>依赖预构建仅会在开发模式下应用，并会使用 esbuild 将依赖转为 ESM 模块。在生产构建中则会使用 @rollup/plugin-commonjs。</p>\n<blockquote>\n<p>作用</p>\n</blockquote>\n<ol>\n<li>兼容 UMD 和 CommonJS，开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。</li>\n<li>合并体积小的模块，减少网络请求</li>\n</ol>\n<h2><a href=\"https://mp.weixin.qq.com/s/M5YXW5SJeSCeEePjeuP_qw\">vue3 + vite配置</a></h2>\n<p>创建项目\r\n创建一个 Vue3+Vite 项目\r\n2022年了，搞清楚 ESLint 和 Prettier 吧\r\n把项目跑起来\r\n跑一下项目\r\nnvm管理&#x26;切换Node版本\r\nnrm管理&#x26;切换镜像源\r\n让项目更健壮\r\n了解项目中每一个文件的作用\r\n安装组件库\r\n配置项目内组件 &#x26; API 的自动引入\r\n安装 VueUse\r\n配置 ESLint 和 Prettier\r\n配置 SVGIcon\r\nStyles 公共样式管理、初始化样式\r\n配置 UnoCSS\r\nUtils、Hooks、API 管理\r\n其他 Vite 配置\r\n添加 Config 配置\r\n配置 VSCode 推荐扩展插件</p>\n<ul>\n<li>组件、API 自动导入：</li>\n<li>SVGIcon：unplugin-icons</li>\n</ul>\n<h1><a href=\"https://esbuild.github.io/\">esbuild</a></h1>\n<p>esbuild 只能将代码转成 es6</p>\n<h1>杂项</h1>\n<ul>\n<li>\n<p>.eslintignore</p>\n<ul>\n<li>**/cafe-directive</li>\n</ul>\n</li>\n<li>\n<p>package.json 配置 directories file unpkg</p>\n</li>\n<li>\n<p>npm pack</p>\n</li>\n</ul>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&quot;files&quot;: [\r\n    &quot;package.json&quot;,\r\n    &quot;es&quot;,\r\n    &quot;lib&quot;,\r\n    &quot;dist&quot;,\r\n    &quot;LICENSE&quot;,\r\n    &quot;README.md&quot;\r\n  ],</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>插件</p>\n</blockquote>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm github-markdown-css \r\nvue add style-resources-loader</code>\n        </deckgo-highlight-code>","id":"602081c6-2bf0-535a-8b4e-f1d6742d63b0","parent":{"name":"打包工具","base":"打包工具.md","mtime":"2023-07-23T08:19:43.202Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/前端工程化/打包工具/"}},"staticQueryHashes":["3957182205"]}