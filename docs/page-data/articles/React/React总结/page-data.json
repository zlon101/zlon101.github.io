{"componentChunkName":"component---src-templates-post-js","path":"/articles/React/React总结/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/React/React总结/"},"html":"<h1>待解决</h1>\n<ul>\n<li><code>const ProfilePage = React.lazy(() => import('./ProfilePage')); // 懒加载</code></li>\n</ul>\n<h1><a href=\"https://zh-hans.reactjs.org/docs/thinking-in-react.html\">React哲学</a></h1>\n<blockquote>\n<p>将渲染UI和添加交互分开编写，视图和逻辑功能分开。</p>\n<p>先写静态UI，UI完成后再添加逻辑。编写静态UI时，不要使用state，state代表随时间变化的数据，此时可以使用props。</p>\n</blockquote>\n<ol>\n<li>扩展开发，修改关闭，当需要添加新的功能时，使用HOC高阶组件对基础组件进行封装；</li>\n<li>单一功能</li>\n</ol>\n<h1><a href=\"https://zh-hans.reactjs.org/docs/faq-state.html#what-is-the-difference-between-state-and-props\">组件状态-state &#x26; props</a></h1>\n<h1>setState到底是异步还是同步?</h1>\n<p>先给出答案: 有时表现出异步,有时表现出同步</p>\n<ol>\n<li><code>setState</code> 只在<strong>合成事件</strong>和<strong>钩子函数</strong>中是“异步”的，在原生事件和 <code>setTimeout</code> 中都是同步的。</li>\n<li><code>setState</code>的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 <code>setState(partialState, callback)</code> 中的callback拿到更新后的结果。</li>\n<li><code>setState</code> 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和 setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 <code>setState</code> ， <code>setState</code> 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 <code>setState</code> 多个不同的值，在更新时会对其进行合并批量更新。</li>\n</ol>\n<h1><a href=\"https://segmentfault.com/a/1190000012458996\">受控 | 非受控</a></h1>\n<h2><a href=\"https://overreacted.io/zh-hans/writing-resilient-components/\">弹性组件设计原则</a></h2>\n<ul>\n<li>\n<p>不要阻断数据流\r\n不要将props传递的数据转交给state，避免复制props到state</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">class x extends React.Component {\r\n  constructor(props){\r\n    this.state = {\r\n      y: props.y\r\n    }\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p>派生状态会导致代码冗余，并使组件难以维护。 <a href=\"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\">确保你已熟悉这些简单的替代方案：</a></p>\n<ul>\n<li>\n<p>如果你需要<strong>执行副作用</strong>（例如，数据提取或动画）以响应 props 中的更改，请改用 <a href=\"https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate\"><code>componentDidUpdate</code></a>。</p>\n</li>\n<li>\n<p>如果只想在 <strong>prop 更改时重新计算某些数据</strong>，<a href=\"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\">请使用 memoization helper 代替</a>。</p>\n</li>\n<li>\n<p>如果你想<strong>在 prop 更改时“重置”某些 state</strong>，请考虑使组件<a href=\"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component\">完全受控</a>或<a href=\"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key\">使用 <code>key</code> 使组件完全不受控</a> 代替。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>不要在Side Effects中阻断数据流</p>\n</li>\n</ul>\n<h1>性能优化</h1>\n<h2>纯函数组件</h2>\n<p>继承 React.PureComponent( <code>class Cmp extends React.PureComponent</code> )或在 <code>shouldComponentUpdate</code> 中比较current props 和 next props。</p>\n<p>只有在props更新时才渲染组件而不是每次父组件渲染时。</p>\n<p><code>React.PureComponent</code> 对 props 和 state 作了浅层比较，因为作深层比较反而会减低性能。</p>\n<h1>模态对话框</h1>\n<p><a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\">模态对话框</a></p>\n<h1><a href=\"https://zh-hans.reactjs.org/docs/concurrent-mode-suspense.html\">在 React 组件中获取数据的标准方法</a></h1>\n<blockquote>\n<p>该方法处于试验阶段</p>\n</blockquote>\n<p>suspense API 将使异步数据获取对于客户端和服务器渲染都是完全有可能的。</p>\n<p>让 Suspense 成为组件读取异步数据的主要方式——无论数据来自何方。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.robinwieruch.de/react-hooks-fetch-data\">使用Hook请求数据</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\">异步渲染更新</a>\r\n在类组件的各种生命周期中执行数据请求、setState</li>\n</ul>\n<h2>类组件</h2>\n<h2>函数式组件</h2>\n<h1>函数式组件 vs 类组件</h1>\n<p>参考：<a href=\"https://juejin.im/post/6844904049146331150\">https://juejin.im/post/6844904049146331150</a></p>\n<ul>\n<li>useRef 获取最新的状态</li>\n</ul>\n<h1>组件的默认属性及类型约束</h1>\n<p><strong>1) 类组件</strong></p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const defaultProps = {\r\n  name: &quot;stranger&quot;,\r\n};\r\ntype Props = {\r\n\tage: number;\r\n} &amp; Partial&lt;typeof defaultProps&gt;;\r\n\r\n\r\nclass Greeting extends React.Component&lt;Props, {}&gt; {\r\n\tstatic defaultProps = defaultProps;\r\n\t//  ...\r\n}</code>\n        </deckgo-highlight-code>\n<h1>TS + React</h1>\n<p>1). 为什么使用函数表达式而不是函数声明定义函数式组件？</p>\n<ul>\n<li>因为使用函数表达式可以指定 <code>React.FC</code> 类型，<code>React.FC</code>  定义了 <code>children</code> 和函数返回类型。</li>\n</ul>\n<p>3).  <code>ReactNode</code> 、 <code>ReactElement</code> 和 <code>JSX.Element</code> 的区别？</p>\n<ul>\n<li>\n<p><code>document.getElementById('root') as HTMLElement</code></p>\n</li>\n<li>\n<p><code>children?: React.ReactNode </code></p>\n</li>\n<li>\n<p><code>React.ReactNode</code> 包含了 <code>React.ReactElement</code>，<code>React.ReactElement</code> 是泛型</p>\n</li>\n<li>\n<p>组件类型用 <code>React.ComponentType</code> 声明</p>\n</li>\n<li>\n<p>JSX 使用 <code>JSX.Element</code> 声明</p>\n<deckgo-highlight-code language=\"tsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const Cmp : ComponentType&lt;IProps&gt;;\r\n&lt;Cmp/&gt;\r\n\r\n\r\n// \r\ndeclare global {\r\n  namespace JSX {\r\n    // tslint:disable-next-line:no-empty-interface\r\n    interface Element extends React.ReactElement&lt;any, any&gt; { }\r\n  }\r\n}\r\n// render 返回的是 JSX.Element 类型？\r\ntype RenderCallback = (args) =&gt; JSX.Element;</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<p><strong>4).</strong> 定义函数类型：</p>\n<p>​    由于JavaScript具有动态和灵活的性质，有时可能会遇到一个对象，该对象可以作为上述某些类型的组合使用，就是一个既具有函数特性又具有对象特性的类型，它具有一些属性。</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">type Foo = (a: string) =&gt; string\r\ninterface Counter {\r\n    (start: number): string;\r\n    interval: number;\r\n    reset(): void;\r\n}\r\n\r\nfunction getCounter(): Counter {\r\n    let counter = (function (start: number) { }) as Counter;\r\n    counter.interval = 123;\r\n    counter.reset = function () { };\r\n    return counter;\r\n}\r\n\r\nlet c = getCounter();\r\nc(10);\r\nc.reset();\r\nc.interval = 5.0</code>\n        </deckgo-highlight-code>\n<p><strong>5).</strong> TypeScript还有一种感叹号（<code>!</code>）结尾的语法，它会从前面的表达式里移除<code>null</code>和<code>undefined</code>。</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">export const withDefaultProps = &lt;P extends object, DP extends Partial&lt;P&gt; = Partial&lt;P&gt;&gt;\r\n(defaultProps: DP, Cmp: ComponentType&lt;P&gt;) =&gt; {\r\n  // 提取出必须的属性\r\n  type RequiredProps = Omit&lt;P, keyof DP&gt;;\r\n  // 重新创建我们的属性定义，通过一个相交类型，将所有的原始属性标记成可选的，必选的属性标记成可选的\r\n  type Props = Partial&lt;DP&gt; &amp; Required&lt;RequiredProps&gt;;\r\n\r\n  Cmp.defaultProps = defaultProps;\r\n\r\n  // 返回重新的定义的属性类型组件，通过将原始组件的类型检查关闭，然后再设置正确的属性类型\r\n  return (Cmp as ComponentType&lt;any&gt;) as ComponentType&lt;Props&gt;;\r\n};\r\n        \r\ntype State = Readonly&lt;typeof initialState&gt;;\r\n}\r\n\r\n// 定义类型/接口\r\ntype State = Readonly&lt;typeof initialState&gt; &amp; Partial&lt;typeof 可选字段集合&gt;;</code>\n        </deckgo-highlight-code>","id":"cdfc6ad9-2ded-5469-bf59-16909f80dc70","parent":{"name":"React总结","base":"React总结.md","mtime":"2023-07-24T08:48:47.851Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/React/React总结/"}},"staticQueryHashes":["3957182205"]}