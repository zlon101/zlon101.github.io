{"componentChunkName":"component---src-templates-post-js","path":"/articles/前端/前端工程化/Gulp/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/前端/前端工程化/Gulp/"},"html":"<h4>介绍</h4>\n<p><a href=\"https://octman.com/blog/2015-09-30-gulp-introduction/\">前端利器 Gulp 介绍</a></p>\n<p><a href=\"https://www.cnblogs.com/2050/p/4198792.html\">前端构建工具gulpjs的使用介绍及技巧</a></p>\n<p><a href=\"https://juejin.im/post/5bd04bdf6fb9a05d1c14d11a\">基于gulp的前端自动化方案</a></p>\n<ul>\n<li>\n<p>demo</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">&#39;use strict&#39;;\nlet gulp = require(&#39;gulp&#39;)\nlet util = require(&#39;util&#39;)\nlet plugins = require(&#39;gulp-load-plugins&#39;)()\nlet livereload = require(&#39;gulp-livereload&#39;)\n\nconst globs = {\nscript: &#39;app/script/app.es6&#39;,\nhtml: &#39;app/view/**/*.jade&#39;,\nless: &#39;app/less/*.less&#39;\n}\n\ngulp.task(&#39;less&#39;, function() {\nreturn gulp.src(globs.less)\n  .pipe(plugins.less())\n  .pipe(gulp.dest(&#39;dist&#39;))\n  .pipe(livereload());\n});\n\ngulp.task(&#39;script&#39;, function () {\nreturn gulp.src(globs.script)\n  .pipe(plugins.browserify({\n    debug: true,\n    transform: [&#39;babelify&#39;],\n    extensions: [&#39;.es6&#39;]\n  }))\n  .pipe(plugins.rename(&#39;bundle.js&#39;))\n  .pipe(gulp.dest(&#39;dist&#39;))\n  .pipe(livereload());\n});\n\ngulp.task(&#39;html&#39;, function () {\nreturn gulp.src(globs.html)\n  .pipe(plugins.jade({\n    pretty: true\n  }))\n  .pipe(gulp.dest(&#39;dist&#39;))\n  .pipe(livereload())\n})\n\ngulp.task(&#39;server&#39;, function () {\nvar exec = require(&#39;child_process&#39;).exec;\nexec(&#39;python -m SimpleHTTPServer 8080&#39;, function (error, stdout, stderr) {\n  if (error) {\n    console.log(&#39;stderr: &#39; + stdout);\n  }\n});\n})\n\ngulp.task(&#39;watch&#39;, [&#39;script&#39;, &#39;less&#39;, &#39;html&#39;], function() {\nlivereload.listen();\n[&#39;less&#39;, &#39;script&#39;, &#39;html&#39;].forEach(function (task) {\n  gulp.watch(globs[task], [task]);\n});\n});\ngulp.task(&#39;default&#39;, [&#39;server&#39;, &#39;watch&#39;]);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Gulp 是基于<strong>文件流</strong>的构建系统(与 Grunt 的不同之处)，Gulp 存在的意义是因为 Grunt 的不足之处：</p>\n<ol>\n<li>配置过于复杂；</li>\n<li>糟糕的流程控制导致的临时文件/目录；</li>\n</ol>\n<p>Gulp 配置简单，API 也很少，</p>\n</li>\n<li>在介绍这个API之前我们首先来说一下Grunt.js和Gulp.js工作方式的一个区别。Grunt主要是以文件为媒介来运行它的工作流的，比如在Grunt中执行完一项任务后，会把结果写入到一个临时文件中，然后可以在这个临时文件内容的基础上执行其它任务，执行完成后又把结果写入到临时文件中，然后又以这个为基础继续执行其它任务...就这样反复下去。而在Gulp中，使用的是Nodejs中的<a href=\"http://nodejs.org/api/stream.html\">stream</a>(流)，首先获取到需要的stream，然后可以通过stream的<code>pipe()</code>方法把流导入到你想要的地方，比如Gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以Gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是Gulp的速度比Grunt快的一个原因。再回到正题上来，<code>gulp.src()</code>方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流(<a href=\"https://github.com/wearefractal/vinyl-fs\">Vinyl files</a>)，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：</li>\n</ul>\n<h4>使用</h4>\n<p>Gulp 的使用关键在于 <code>gulpfile.js</code> 文件的配置。</p>","id":"207e7152-1080-52ff-8841-bf0ac1a1e1b1","parent":{"__typename":"File","name":"Gulp","base":"Gulp.md","mtime":"2022-03-30T03:05:54.627Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/前端/前端工程化/Gulp/"}},"staticQueryHashes":["3957182205"]}