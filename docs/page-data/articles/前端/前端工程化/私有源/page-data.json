{"componentChunkName":"component---src-templates-post-js","path":"/articles/前端/前端工程化/私有源/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/前端/前端工程化/私有源/"},"html":"<h1>组件打包</h1>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">entry: {\n    &quot;ml-button&quot;: path.resolve(__dirname, &quot;../src/components/button/index.js&quot;)\n  },\n  output: {\n    path: path.resolve(__dirname, &quot;../lib&quot;),\n    filename: &quot;[name]/index.js&quot;,\n    libraryTarget: &quot;umd&quot;\n  },</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>组件配置了browser，引用组件的项目打包时会使用browser配置的umd.js，会将没有用到得代码一起打包，\n只有让项目使用组件的index.js（es module）作为组件入口才不会将没有用到的代码打包，commonjs 也会打包没有使用的代码</p>\n</blockquote>\n<blockquote>\n<p>每个icon组件都要单独export，这样项目中没有用到的icon就不会被打包</p>\n</blockquote>\n<blockquote>\n<p>package.json type: module 没啥用</p>\n</blockquote>\n<blockquote>\n<p>如果组件内使用了style/var.less 中的变量，并且不用lib作为组件入口，需要在使用该组件的项目中配置style-resources-loader并引入 @pic/style/var.less</p>\n</blockquote>\n<blockquote>\n<p>npm pack命令进行本地模拟打包测试，在项目根目录下就会生成一个tgz的压缩包，这就是将要上传的文件内容。</p>\n</blockquote>\n<h2>其他</h2>\n<ul>\n<li>confont-plugin-webpack</li>\n</ul>\n<hr>\n<h1>索引</h1>\n<p>搭建 npm 私有源的方式有：</p>\n<ol>\n<li>verdaccion 搭建</li>\n<li>Git 仓库作为私有源</li>\n<li>cnpm 搭建</li>\n</ol>\n<h1><a href=\"https://verdaccio.org/zh-cn/\">verdaccion 搭建</a></h1>\n<blockquote>\n<p>本地私有 NPM 注册中心</p>\n</blockquote>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm set registry http://localhost:4873\nnpm install --registry http://localhost:4873\n// .npmrc\nregistry=http://localhost:4873</code>\n        </deckgo-highlight-code>\n<ul>\n<li>\n<p>添加用户/登录</p>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm adduser --registry  http://localhost:4873</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>发布包</p>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm publish --registry http://localhost:4873</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>安装包</p>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm install @xx/input</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h2>账号</h2>\n<p>账号注册、删除、登录</p>\n<p>通过 htpsaawd-for-sinopia 添加账号</p>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm install htpasswd-for-sinopia -g\nsinopia-adduser # 在 htpasswd 目录下执行</code>\n        </deckgo-highlight-code>\n<h2>Verdaccio 配置</h2>\n<p>配置文件 ~/.config/verdaccio/config.yaml</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">uplinks:\n  npmjs:\n    url: https://registry.npmjs.org/\n  xnpmjs:\n    url: http://registry.x.com \npackages:\n  &#39;@xscope/modulea&#39;:\n    access: $all\n    publish: $authenticated\n    unpublish: $authenticated\n    proxy: xnpmjs // proxy 代表如果在私有 npm 库找不到，则会代理到 npmjs</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>修改服务path</p>\n<p>verdaccio内部使用了express，服务启用在了uri根路径，这样比较浪费资源。增加配置:</p>\n<p><code>url_prefix: /npm/</code></p>\n</blockquote>\n<blockquote>\n<p>npm login</p>\n<p>只校验了 name password，没有校验email，每次login可以输入不同的email</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>私有源使用</p>\n</blockquote>\n<ul>\n<li>组件发布\\更新</li>\n</ul>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm publish --registry xxx</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>登录登出私有源</p>\n</blockquote>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm login --scope @mycorp --registry https://registry.mycorp.com\nnpm logout --scope=@mycorp</code>\n        </deckgo-highlight-code>\n<p>将 <code>@mycorp</code> 映射到指定 registry，之后执行 <code>npm install @mycorp/xx</code> 时从指定 registry 上安装</p>\n<p>初始化一个带 scope 的 package</p>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm init --scope=@mycorp --yes</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>常用命令</p>\n</blockquote>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm whoami\nnpm config ls\nnpm config set registry https://registry.npmjs.org/\nnpm config set @myco:registry http://reg.example.com\nnpm set registry https://registry.npm.taobao.org\n\nnpm owner // 管理npm包的所有者\nnpm profile set password --registry http://0.0.0.0:4873/\n\nnpmignore过滤文件了\n\nnpm publish\nnpm unpublish [&lt;package-spec&gt;]</code>\n        </deckgo-highlight-code>\n<h2>其他</h2>\n<ul>\n<li>docker 安装</li>\n</ul>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">docker pull verdaccio/verdaccio:nightly-master</code>\n        </deckgo-highlight-code>\n<ul>\n<li>docker 运行</li>\n</ul>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">docker run -it --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>使用npm link命令做本地代码调试，不需要频繁发布安装</p>\n</blockquote>\n<ul>\n<li>\n<p>npm link</p>\n<ul>\n<li>某个组件目录下执行 npm link</li>\n<li>需要引用该组件的项目根目录下执行 npm link 该组件名</li>\n</ul>\n</li>\n</ul>\n<h2>文档</h2>\n<p><a href=\"https://mp.weixin.qq.com/s/qgy82KMZKS_S5tfAFY4gNg\">verdaccio搭建npm私有源</a> ：nginx 代理配置\n<a href=\"https://zhaomenghuan.js.org/blog/npm-private-repository-verdaccio.html#%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86-%E7%A7%81%E6%9C%89%E5%8C%85%E7%AE%A1%E7%90%86\">npm 私有仓库工具 Verdaccio 搭建</a> : 博客</p>\n<h1>Git仓库作为私有源</h1>\n<blockquote>\n<p>Gitlab v13.7.x 自带私有仓库，只需要开启 Container Registry</p>\n</blockquote>\n<p>这个方法得益于，npm提供的的丰富安装方法。通过下面方法安装：</p>\n<deckgo-highlight-code language=\"sh\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm i -S git+ssh://git@git.showgold.cn:npm/hello.git\nnpm install -S git+https://isaacs@github.com/npm/npm.git\nnpm install -S git://github.com/npm/npm.git#v1.0.27</code>\n        </deckgo-highlight-code>\n<ul>\n<li>⚠️ 上面安装需要注意，你的工程一定是在某一个组下面建立，方便管理，在生成你的包的时候package.json中的name一定要带上范围</li>\n<li>⚠️ 带版本信息的，必须通过 git 打 tag</li>\n<li>\n<p>特点</p>\n<ul>\n<li>不用搭建服务</li>\n<li>使用 npm update 是无法更新私有模块，想更新只能重新安装一次</li>\n</ul>\n</li>\n</ul>","id":"0b17e7cf-f078-50b6-9525-8238b13bb977","parent":{"__typename":"File","name":"私有源","base":"私有源.md","mtime":"2022-09-03T14:08:55.928Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/前端/前端工程化/私有源/"}},"staticQueryHashes":["3957182205"]}