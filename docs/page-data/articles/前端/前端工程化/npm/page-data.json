{"componentChunkName":"component---src-templates-post-js","path":"/articles/前端/前端工程化/npm/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/前端/前端工程化/npm/"},"html":"<blockquote>\n<p><a href=\"https://docs.npmjs.com/\">npm文档</a></p>\n<p><a href=\"https://github.com/features/packages\">github package</a> <a href=\"https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages\">GitHub Packages</a></p>\n</blockquote>\n<blockquote>\n<p>npm symbolic link</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://docs.npmjs.com/about-private-packages\">private package</a></p>\n</blockquote>\n<blockquote>\n<p>package.json file 字段？</p>\n<p><a href=\"https://github.com/SunshowerC/blog/issues/8\">package.json中的main | module | browser</a></p>\n</blockquote>\n<h1><a href=\"https://docs.npmjs.com/cli/v8/using-npm/registry\">npm registry</a></h1>\n<blockquote>\n<p>scope</p>\n</blockquote>\n<p>将一个scope 与 npm registry 关联，一旦一个作用域与一个注册表相关联，任何带有该作用域的软件包的npm安装将从该注册表请求软件包。任何包含该范围的软件包名称的npm发布都会被发布到该注册表。<a href=\"https://docs.npmjs.com/cli/v8/using-npm/scope\">参考</a></p>\n<p>Each npm user/organization has their own scope, and only you can add packages in your scope.</p>\n<blockquote>\n<p>某个 scope 与 registry</p>\n</blockquote>\n<p>混合使用来自 npm registry 和私有 registry 的包</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm login --registry=http://reg.example.com --scope=@myco\r\n或者\r\nnpm config set @myco:registry http://reg.example.com</code>\n        </deckgo-highlight-code>\n<h2><a href=\"https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages\">发布包</a></h2>\n<p>npm 官网注册账号</p>\n<ol>\n<li>使用<code>npm login</code> 和 npm 账号在本地登录npm</li>\n<li>带 <code>scope</code> 的包名必须用 organization name 作前缀，每个npm用户/组织都有自己的范围，而且只有你能在你的范围内添加软件包。这意味着你不必担心有人抢先使用你的软件包名称。因此，这也是一个为组织发出官方软件包信号的好方法。</li>\n</ol>\n<h1>版本管理</h1>\n<ul>\n<li><code>^2.2.0</code>:  2.2.0 到 2.x.x  主版本号不变</li>\n<li><code>~2.2.0</code>:  2.2.0 到  2.2.x  次版本号不变</li>\n<li><code>>2.2.0</code>:  2.2.0 到  最新版本</li>\n</ul>\n<blockquote>\n<p>锁定node版本</p>\n</blockquote>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// package.json\r\n&quot;engines&quot;: {\r\n  &quot;node&quot;: &quot;16.13.2 || 16.16.0&quot;\r\n},\r\n\r\n// .npmrc\r\nengine-strict = true</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>锁定包管理器</p>\n</blockquote>\n<p>利用 only-allow 工具包、npm scripts 快速实现锁定</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">npm install -D only-allow\r\n// package.json\r\n&quot;scripts&quot;: {\r\n  &quot;preinstall&quot;: &quot;only-allow npm&quot;,\r\n}</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p><a href=\"https://semver.npmjs.com/\">包版本查询</a></p>\n</blockquote>\n<h1>npm 依赖</h1>\n<p>在安装一个 package，而此 package 要打包到生产环境 bundle 中时，你应该使用 <code>npm install --save</code>。如果你在安装一个用于开发环境的 package 时（例如，linter, 测试库等），你应该使用 <code>npm install --save-dev</code>。</p>\n<blockquote>\n<p>dependencies、devDependencies 和 peerDependencies 的区别</p>\n</blockquote>\n<p>当一个 package(pkg-xx) 提供给其他人使用时，这个 package 的 package.json 的 dependencies、devDependencies 和 peerDependencies 配置决定了 <code>npm i pkg-xx</code> 时哪些依赖包被安装</p>\n<ul>\n<li>dependencies: <code>npm i pkg-xx</code> 时会安装对应的依赖包</li>\n<li>devDependencies：不会安装</li>\n<li>peerDependencies：\n<ul>\n<li>npm v8.x.x 会自动安装 <code>peerDependencies</code> 依赖，之前版本的 npm 不会自动安装</li>\n<li><code>peerDependencies</code> 和 <code>devDependencies</code> 的区别：devDependencies 表示开发依赖，源码中应该要引用该依赖(<code>import</code> 或 <code>require</code>)，peerDependencies 源码中不用引用</li>\n</ul>\n</li>\n</ul>\n<h2>依赖冲突</h2>\n<p>项目 project 中依赖组件 B、C 两个组件，组件 B、C 的依赖项中都有组件 A</p>\n<ul>\n<li>\n<p>B 中对 A 的版本指定为 @latest，C 对 A 的版本指定为 <a href=\"mailto:C@1.0.0\">C@1.0.0</a>，在项目 project 中执行 npm install 时，安装的组件 C 的版本是 1.0.0</p>\n</li>\n<li>\n<p>B 中对 A 的版本指定为 @latest，C 对 A 的版本指定为 C>=1.0.0，在项目 project 中执行 npm install 时，安装的组件 C 的 latest 最新版本</p>\n</li>\n<li>\n<p>B 中对 A 的版本指定为 @latest，C 对 A 的版本指定为 <a href=\"mailto:C@1.0.0\">C@1.0.0</a>，在项目 project 的 package.json 中指定组件 C 的版本为以下情况时，执行 npm install 安装的组件 C 的版本分别对应：</p>\n<ul>\n<li>package.json 中指定为 @latest，安装后的版本为 latest</li>\n<li>package.json 中指定为 >=1.0.0，安装后版本为 latest</li>\n<li>package.json 中指定为 @2.2.0，安装后版本为 2.2.0</li>\n</ul>\n</li>\n</ul>\n<h1>常用命令</h1>\n<blockquote>\n<p>查看全局包: npm list -g --depth 0sdps\r\n安装全局包: npm i -g xx\r\n删除全局包: npm uninstall -g vue\r\n创建软链接: <a href=\"https://docs.npmjs.com/cli/v8/commands/npm-link\">npm link</a> <a href=\"https://juejin.cn/post/6844903960805900295\">解读</a> <a href=\"https://www.npmjs.com/package/link\">npx link</a></p>\n</blockquote>\n<h1>常用包</h1>\n<ul>\n<li>npm 源管理: nrm</li>\n<li>n nvm nvm-windows: <a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\">一台电脑上管理多个node版本</a></li>\n<li>运行 npm 包二进制: npx</li>\n</ul>\n<h1>npm script</h1>\n<p><a href=\"https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\">npm script 使用指南</a>\r\n<a href=\"https://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html\">Node.js 命令行程序开发教程</a></p>\n<blockquote>\n<p>npm package.json script</p>\n</blockquote>\n<ul>\n<li>\n<p>process.argv  &#x3C;==  <code>npm run xx -- -val=xx</code></p>\n</li>\n<li>\n<p>process.env.npm_config_xxx  &#x3C;==  <code>npm run xx -val=xx</code></p>\n</li>\n<li>\n<p>process.env.npm_package_config_xx &#x3C;=== package.json 中配置 <code>{ config: { xx: '12' } }</code></p>\n</li>\n<li>\n<p><code>-</code> 或 <code>--</code> 开头会作为参数传递给 npm ，通过 <code>process.env.npm_config_xx</code> 读取</p>\n<ul>\n<li>例如<code>npm run proxy --help</code>， <code>--help</code> 传递给 npm</li>\n</ul>\n</li>\n<li>\n<p><code>npm run script -- -name</code>:  中间的 <code>--</code> 会停止将之后的字符解析为参数，不在传递给 npm，通过 <code>process.argv</code> 读取</p>\n</li>\n</ul>\n<blockquote>\n<p>exampel</p>\n</blockquote>\n<ul>\n<li>bash版本</li>\n</ul>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">#!/bin/bash\r\nregistry=$(npm config get registry);\r\nif ! [[ $registry =~ &quot;http://registry.x.com&quot; ]]; then\r\n    npm config set @xscope:registry https://abc.com/npm/\r\nfi</code>\n        </deckgo-highlight-code>\n<ul>\n<li>node版本</li>\n</ul>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">#!/usr/bin/env node\r\nconst { exec } = require(&#39;child_process&#39;);\r\n\r\nexec(&#39;npm config get registry&#39;, function(error, stdout, stderr) {\r\n    if (!stdout.toString().match(/registry\\.x\\.com/)) {\r\n        exec(&#39;  npm config set @xscope:registry https://abc.com/npm/&#39;);\r\n    }\r\n});</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>三方库</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/google/zx\">google/zx</a> : 用 JS 编写 Shell 脚本</li>\n<li>cross-env: 环境变量</li>\n</ul>\n<hr>\n<blockquote>\n<p><code>\"src/**/*\"</code>：<code>**</code> 表示任意一层子目录，<code>*</code> 表示任意文件名</p>\n</blockquote>","id":"8f850520-0d3e-530c-b7d5-c29b7e3e6bc1","parent":{"name":"npm","base":"npm.md","mtime":"2023-03-09T08:10:00.391Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/前端/前端工程化/npm/"}},"staticQueryHashes":["3957182205"]}