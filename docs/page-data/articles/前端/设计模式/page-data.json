{"componentChunkName":"component---src-templates-post-js","path":"/articles/前端/设计模式/","result":{"data":{"markdownRemark":{"fields":{"articlePath":"/articles/前端/设计模式/"},"html":"<blockquote>\n<p>所有设计模式的实现都遵循一条原则：找出程序中变化的部分，并将变化封装起来。</p>\n<p>分辨模式的关键是目标(应用场景、解决什么问题)</p>\n</blockquote>\n<h1>原型模式</h1>\n<p>JS 中所有对象都是从另一个对象克隆得到的。所以 JS 中必须有一个根对象(<code>Object.prototype</code>)，从这个根对象开始克隆生成其他对象。</p>\n<p>拆分变化和不变的部分。复用不变的部分，可以是行为、结构</p>\n<h1>闭包和高阶函数</h1>\n<p>闭包的形成与<strong>变量的作用域</strong>和变量的<strong>生存周期</strong>密切相关。</p>\n<ul>\n<li>变量的作用域：变量的有效范围，分为全局作用域、函数作用域和块级作用域(仅<code>let</code>、<code>const</code>)</li>\n<li>生存周期：从创建到被回收</li>\n</ul>\n<h2>高阶函数</h2>\n<ul>\n<li>分时函数</li>\n<li>惰性加载函数</li>\n</ul>\n<h3>柯里化</h3>\n<p>作用：将一个函数拆分为多个函数，将多参形式转为单参形式，预先设置函数的参数；</p>\n<p>形式：函数的封装，一个函数返回另一个函数；</p>\n<ul>\n<li>判断数据类型</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">const checkType = type =&gt; {\r\n  return data =&gt; Object.prototype.toString.call(data) === `[object ${type}]`;\r\n}\r\nlet types = [&#39;Number&#39;, &#39;String&#39;, &#39;Boolean&#39;];\r\nlet utils = {};\r\ntypes.forEach( type =&gt; utils[`is${type}`]=checkType(type) );\r\n\r\n// 使用\r\nutils.isNumber(12);</code>\n        </deckgo-highlight-code>\n<h1>单例模式</h1>\n<p><u>定义</u>：一个类只有一个实例</p>\n<h1>策略模式</h1>\n<p><u>定义</u>：定义一系列算法，并把每个算法封装起来，使他们可以相互替换。</p>\n<p>策略模式可以消除分支较多的 <code>if</code> 语句。</p>\n<h1>代理模式</h1>\n<p>常见的代理模式有：</p>\n<ul>\n<li>缓存代理：缓存计算的结果，如果下次的输入相同直接返回缓存的结果，demo：</li>\n</ul>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">function generateProxy(fn){\r\n  let cache = {};\r\n  return (...args)=&gt;{\r\n    let k = args.join(&#39;,&#39;);\r\n    if( k in cache ){\r\n      return cache[k];\r\n    }\r\n    return cache[k] = fn(...args);\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>导出组件内部的数据(状态)，比如一个表单，在表单组件的外层获取到所有表单字段的值</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// use-form-context.tsx\r\nexport default function useFormContext(config = {}) {\r\n  const [formContext, setFormContext] = useState(Object.assign({}, initState, config));\r\n  // 增删改查\r\n  const operate = {\r\n    setValue: (key, value) =&gt; {\r\n      let newState = {\r\n        ...formContext,\r\n        [key]: value,\r\n      };\r\n      setFormContext(newState);\r\n    },\r\n    getValue: (key) =&gt; {\r\n      return formContext[key];\r\n    },\r\n    addState: (key, value = &#39;&#39;) =&gt; {\r\n      let newState;\r\n      if (Array.isArray(key)) {\r\n        let obj = {};\r\n        key.forEach((k, idx) =&gt; (obj[k] = value[idx]));\r\n        newState = { ...formContext, ...obj };\r\n      } else {\r\n        newState = { ...formContext, [key]: value[idx] };\r\n      }\r\n      setFormContext(newState);\r\n    },\r\n  };\r\n  // 导出所有的值\r\n  _setAllValues(formContext);\r\n  return [formContext, operate, validateRule];\r\n}\r\n\r\nconst _setAllValues = (function () {\r\n  let data = {};\r\n  return (value = null) =&gt; {\r\n    value !== null &amp;&amp; (data = value);\r\n    return () =&gt; data;\r\n  };\r\n})();\r\n\r\nexport const getAllValues = () =&gt; {\r\n  return _setAllValues()();\r\n};\r\n\r\n// index.tsx\r\nimport {getAllValues} from &#39;use-form-context&#39;;\r\nconsole.log( getAllValues() );</code>\n        </deckgo-highlight-code>\n<ul>\n<li>写时复制代理\r\n<strong>Vue3.0 中通过代理实现数据绑定</strong></li>\n</ul>\n<h1>发布订阅模式 | 观察者</h1>\n<p>作用：解耦，避免使用硬编码。</p>\n<p>JavaScript 中使用事件模型代替传统的发布订阅模式。</p>\n<p>利用消息队列实现组件通信：改变数据的组件发送一个消息，使用数据的组件监听这个消息并在响应函数中触发<code>setState</code>来改变组件状态。本质上这是<strong>观察者模式的实现</strong>。</p>\n<blockquote>\n<p>名词解释</p>\n</blockquote>\n<p>主题对象、目标对象、发布者：发送消息的一方\r\n订阅者、观察者：接收消息的一方</p>\n<blockquote>\n<p>发布订阅和观察者模式的区别</p>\n</blockquote>\n<p>发布订阅模式和观察者模式都是用于处理对象间的通信，但有一些区别：</p>\n<ul>\n<li>\n<p>发布订阅模式中有三种角色：发布者、订阅者、调度中心，观察者模式中只有两种角色：目标对象、观察者。</p>\n</li>\n<li>\n<p>在观察者模式中，观察者对象直接订阅主题对象，主题对象维护一个观察者列表，并在状态发生改变时通知所有观察者。而在发布订阅模式中，发布者和订阅者之间通过一个中介者（消息队列或者事件总线）进行通信，发布者不直接通知订阅者。</p>\n</li>\n<li>\n<p>观察者模式是同步的，当主题对象状态改变时，会立即通知所有观察者。而在发布订阅模式中，发布者发布事件后不关心订阅者是否接收到，订阅者也不需要立即处理事件。</p>\n</li>\n<li>\n<p>观察者模式中，观察者与主题对象之间通常是一对多的关系，一个主题对象可以有多个观察者。而在发布订阅模式中，发布者和订阅者之间通常是多对多的关系，一个发布者可以有多个订阅者，一个订阅者也可以订阅多个发布者。</p>\n</li>\n</ul>\n<p>综上所述，发布订阅模式更加灵活，但需要引入中介者，而观察者模式更加简单，但适用场景有限。</p>\n<p><a href=\"https://juejin.cn/post/6844904018964119566\">发布订阅和观察者模式</a></p>\n<h1>中介者模式</h1>\n<blockquote>\n<p>使对象和对象之间解耦，用中介者和多个对象的一对多关系取代了对象和对象之间的多对多关系。</p>\n</blockquote>\n<h1>装饰者模式</h1>\n<blockquote>\n<p>装饰者模式可以动态给某个对象添加功能(职责)。装饰者也称为包装器。</p>\n<p>高阶组件是一种特殊的函数，该函数接收一个组件作为参数并且返回一个新的组件。高阶组件的实现本质上是<strong>装饰者设计模式</strong>。</p>\n</blockquote>\n<ul>\n<li>demo\r\n使用高阶函数传递 context 给组件，避免层层传递 props，部分代码如下，完整代码请查看 <a href=\"https://codesandbox.io/s/react-test-project-mm27e?file=/src/App.tsx\">https://codesandbox.io/s/react-test-project-mm27e?file=/src/App.tsx</a></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\" terminal=\"carbon\" theme=\"blackboard\"  >\n          <code slot=\"code\">// context.tsx\r\nexport const FormContext = React.createContext({});\r\nexport const HOCWithFormContext = (Component: any) =&gt; {\r\n  return (\r\n    &lt;FormContext.Consumer&gt;\r\n      {(context) =&gt; &lt;Component {...context}&gt;&lt;/Component&gt;}\r\n    &lt;/FormContext.Consumer&gt;\r\n  );\r\n};\r\n\r\n// App.tsx\r\nconst selectorWithContext = HOCWithFormContext(SelectorWrap);\r\nfunction ParentWrap(props: IParentWrap) {\r\n  return (\r\n    &lt;div className=&quot;flex-left&quot;&gt;\r\n      {selectorWithContext}\r\n    &lt;/div&gt;\r\n  );\r\n}</code>\n        </deckgo-highlight-code>","id":"bf8aeb53-e50a-5989-9b95-a1d20f64d45c","parent":{"name":"设计模式","base":"设计模式.md","mtime":"2023-03-21T12:41:34.000Z","sourceInstanceName":"markdown"}}},"pageContext":{"articlePath":"/articles/前端/设计模式/"}},"staticQueryHashes":["3957182205"]}