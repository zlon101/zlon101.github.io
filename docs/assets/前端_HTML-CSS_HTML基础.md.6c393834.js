import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.cbe154cb.js";const d=JSON.parse('{"title":"基础","description":"","frontmatter":{},"headers":[],"relativePath":"前端/HTML-CSS/HTML基础.md","filePath":"前端/HTML-CSS/HTML基础.md"}'),o={name:"前端/HTML-CSS/HTML基础.md"},t=n(`<h1 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h1><h2 id="url" tabindex="-1">URL <a class="header-anchor" href="#url" aria-label="Permalink to &quot;URL&quot;">​</a></h2><ul><li>URL由协议、域名、端口、路径、参数、锚点(片段标识符)组成浏览器中的地址就是URL，利用URL，浏览器可以从Web获取页面或其他资源；URL中的协议(Http)部分告诉浏览器使用什么方法获取资源，网址(域名和路径)告诉浏览器资源的位置(哪个计算机-IP，哪个目录文件)。</li></ul><h2 id="浏览器应对不支持的标签" tabindex="-1">浏览器应对不支持的标签 <a class="header-anchor" href="#浏览器应对不支持的标签" aria-label="Permalink to &quot;浏览器应对不支持的标签&quot;">​</a></h2><ul><li>当浏览器遇到一个不认识的(不支持的)HTML元素时，默认行为是显示元素的内容(开始和结束标记之间的内容)。例如<code>&lt;canvas&gt;该浏览器不支持canvas元素&lt;/canvas&gt;</code>；当浏览器支持canvas元素时不会显示文本内容，当不支持时显示文本内容。</li></ul><h2 id="空白处理" tabindex="-1">空白处理 <a class="header-anchor" href="#空白处理" aria-label="Permalink to &quot;空白处理&quot;">​</a></h2><ul><li><p>HTML中的多个<strong>空白字符</strong>(空格、Table、换行)会用一个空格替换。对于 HTML，无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。 当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。 需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p></li><li><p>demo</p></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">li {</span></span>
<span class="line"><span style="color:#A6ACCD;">  display: inline-block;</span></span>
<span class="line"><span style="color:#A6ACCD;">  list-style-type: none;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 多个行内元素，换行被替换为空格，导致页面显示时图像水平之间有空格 --&gt;</span></span></code></pre></div><h2 id="href与src的区别-可替换元素" tabindex="-1">href与src的区别 &amp; 可替换元素 <a class="header-anchor" href="#href与src的区别-可替换元素" aria-label="Permalink to &quot;href与src的区别 &amp; 可替换元素&quot;">​</a></h2><ul><li>demo</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://***/style.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://**/jquery-1.9.1.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/**.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li><p>href引用外部资源，建立该标签与资源之间的关系(rel)；</p></li><li><p>src <strong>替换</strong>该标签。href 引用 css 文件，HTML 的解析和渲染不会停止，不同于在 <code>&lt;style&gt;</code> 中的内联样式表；用@import导入的外部样式表在页面加载完成后再加载，可能导致页面重新渲染而闪烁，因此不建议使用。src将资源嵌入到当前标签所在位置，如 <code>&lt;script src=**&gt;</code> ，类似于在该标签位置编写js，页面会停止 HTML 解析直到浏览器拿到并执行该JS文件。src用外部资源填充、替换当前元素；</p></li><li><p><strong>可替换元素</strong>是一种外部对象，它们外观的渲染不受 CSS 的控制，即可替换元素的内容不受当前文档样式的影响。CSS 可以控制它们的位置或定位；典型的可替换元素：iframe、video、embed、**img，**CSS的content属性用于在元素的::before::after伪元素中插入内容，插入的内容也是匿名的可替换元素。</p></li></ul><h2 id="加载图像" tabindex="-1">加载图像 <a class="header-anchor" href="#加载图像" aria-label="Permalink to &quot;加载图像&quot;">​</a></h2><ul><li>浏览器载入网页index.html，网页中含图像，HTML页面是纯文本的，图像不是HTML文件的一部分，<code>&lt;img&gt;</code> 只是指向图像浏览器会同时请求多个图像。浏览器在下载了HTML文件并开始显示页面后才下载图像。</li><li>浏览器从服务器获取文件index.html；当前窗口为空，尚未获取任何内容。</li><li>浏览器读取index,.html文件，显示html，发现其中有图像需要显示。</li><li>当前窗口显示html，尚未显示图像。浏览器向服务器请求图像文件；</li><li>获取图像后显示该图像，转向下一个媒体文件使用width和heigth实现缩放图像时，浏览器在缩放前仍然要获取整个大的图像，所以最好是修改图像的分辨率，并将width和height设置和图像实际宽高一致。</li></ul><h1 id="前端面试之htm5新特性" tabindex="-1"><a href="https://segmentfault.com/a/1190000010081812" target="_blank" rel="noreferrer">前端面试之htm5新特性</a> <a class="header-anchor" href="#前端面试之htm5新特性" aria-label="Permalink to &quot;[前端面试之htm5新特性](https://segmentfault.com/a/1190000010081812)&quot;">​</a></h1><ul><li>header、导航栏 nav、main、section、aside、画布canvas、footer、video、audio</li><li>首先 html5 为了更好的实践 web 语义化，增加了header，footer，nav,aside,section 等语义化标签，在表单方面，为了增强表单，为 input 增加了color，emial,data ,range等类型，在存储方面，提供了sessionStorage，localStorage,和离线存储，通过这些存储方式方便数据在客户端的存储和获取，在多媒体方面规定了音频和视频元素 audio 和 vedio，另外还有地理定位，canvas画布，拖放，多线程编程的 web worker 和 websocket 协议。</li></ul><h1 id="html标签区别" tabindex="-1">html标签区别 <a class="header-anchor" href="#html标签区别" aria-label="Permalink to &quot;html标签区别&quot;">​</a></h1><h2 id="strong-和-b-的区别" tabindex="-1">strong 和 b 的区别 <a class="header-anchor" href="#strong-和-b-的区别" aria-label="Permalink to &quot;strong 和 b 的区别&quot;">​</a></h2><ul><li>相同: 页面渲染结果一致</li><li><code>&lt;b&gt;</code> 是样式加粗，<code>&lt;strong&gt;</code> 是逻辑加粗，带有强调的含义，</li><li>使用屏幕阅读器时 <code>&lt;b&gt;</code> 不会重读，<code>&lt;strong&gt;</code> 会重读，并且 <code>&lt;strong&gt;</code> 有利于SEO优化(更容易被搜索到)</li></ul>`,19),e=[t];function p(r,c,i,D,F,y){return a(),l("div",null,e)}const u=s(o,[["render",p]]);export{d as __pageData,u as default};
