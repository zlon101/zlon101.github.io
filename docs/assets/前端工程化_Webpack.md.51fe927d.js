import{_ as a,o as e,c as s,V as l}from"./chunks/framework.35aa2305.js";const o="/assets/image-20230322182600790.2fae2fd5.png",n="/assets/webpack结构.f7c50368.jpeg",b=JSON.parse('{"title":"目的","description":"","frontmatter":{},"headers":[],"relativePath":"前端工程化/Webpack.md","filePath":"前端工程化/Webpack.md","lastUpdated":1691037194000}'),p={name:"前端工程化/Webpack.md"},r=l('<p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noreferrer">webpack文档</a></p><p><a href="https://createapp.dev/" target="_blank" rel="noreferrer">createapp</a>：在线自定义 webpack 配置</p><p><a href="https://webpack.js.org/guides/development/#choosing-a-development-tool" target="_blank" rel="noreferrer">代码更新时自动编译</a></p><ol><li>webpack&#39;s <a href="https://webpack.js.org/configuration/watch/#watch" target="_blank" rel="noreferrer">Watch Mode</a></li><li><a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noreferrer">webpack-dev-server</a> ：热加载，其他方式都没有</li><li><a href="https://github.com/webpack/webpack-dev-middleware" target="_blank" rel="noreferrer">webpack-dev-middleware</a></li></ol><blockquote><p><a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noreferrer">代码拆分</a></p></blockquote><ul><li>SplitChunksPlugin：提取公共依赖</li><li><a href="https://webpack.js.org/plugins/mini-css-extract-plugin" target="_blank" rel="noreferrer"><code>mini-css-extract-plugin</code></a>: Useful for splitting CSS out from the main application.</li></ul><h1 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to &quot;目的&quot;">​</a></h1><ul><li>命名chunk: <code>output.chunkFilename: &#39;[name].[hash:8].js&#39;</code></li><li>webpack 提高编译速度: <code>rulesp[0].include = [paht.resolve(__dirname, &#39;src&#39;)]</code></li><li>性能优化: <code>cfg.optimization.splitChunks.chunks = &quot;all&quot;</code></li></ul><blockquote><p>前端项目配置</p></blockquote><ul><li>开发环境/生产环境</li><li>环境变量</li><li>mock</li><li>webpack-dev-server</li><li>开发环境公共样式分离为单独的css文件</li><li>生产环境需要压缩 HTML/CSS/JS 代码</li><li>生产环境需要压缩图片</li><li>开发环境需要生成 sourcemap 文件</li><li>开发环境需要打印 debug 信息</li><li>开发环境需要 live reload 或者 hot reload 的功能</li></ul><h1 id="输出格式" tabindex="-1">输出格式 <a class="header-anchor" href="#输出格式" aria-label="Permalink to &quot;输出格式&quot;">​</a></h1><p>相关配置项</p><ol><li>mode</li><li>target</li><li>output.chunkFormat</li></ol><h1 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h1><p><img src="'+o+'" alt="image-20230322182600790"></p><ul><li>module：源码、静态资源、less、ts、js 等</li><li><a href="https://webpack.js.org/concepts/under-the-hood/#chunks" target="_blank" rel="noreferrer">chunk</a>：多模块合成，如 entry import() splitChunk modules are combined into chunks. Chunks combine into chunk groups and form a graph (ChunkGraph) interconnected through modules. When you describe an entry point - under the hood, you create a chunk group with one chunk. modules 组合成 chunks，chunks 组合成 chunks group 并且形成由 module 连接成的 ChunkGraph</li><li>bundle：最终输出的文件</li></ul><p>webpack 的应用场景主要是 SPA (单页面富应用)，而 SPA 的核心是前端路由，那怎么算是SPA？在前后端分离的基础上加一层前端路由。通俗的讲，路由就是网址。专业的讲就是：每次GET、POST在服务器端有一个专门的正则配置列表，然后匹配到具体的路径后，分发到不同的Controller，进行各种操作，最后将HTML或数据返回给前端，这就完成了一次IO。</p><ul><li><p>目前多数网站都是后端路由，也就是多页面，页面可以在服务端渲染好直接返回给浏览器，不用等待加载JS和CSS文件就能显示网页。缺点在于模本由后端维护或改写，前端开发需要安装整套的后端服务，必要时还需运用PHP、JAVA这类的非前端语言来改写HTML结构，所以HTML和数据、逻辑混为一谈。</p></li><li><p>然后就有了前后端分离的开发模式，后端只提供API返回数据，前端通过Ajax获取数据后，再用一定的方式渲染页面，这样后端专注于数据，前端专注于交互和可视化。缺点在于首屏渲染需要时间加载JS和CSS文件，这种开发模式被多数公司认同，也出现了很多前端技术栈，比如JQuary+artTemplate+Seajs(requirejs)+gulp 为主的开发模式可谓是万金油。</p></li><li><p>在Node出现后，这种现象得到了改善，即所谓的大前端，得益于Node和JavaScript的语言特性，HTML模本可以完全由前端控制，同步或异步渲染完全由前端自由决定，并由前端维护模板。</p></li><li><p>webpack 是用来处理模块间的依赖关系，并对他们进行打包。</p></li><li><p>webpack 基于node，在node环境下运行，可以使用ES6的模块加载方法;</p></li><li><p>npm 命令根据 package.json 配置文件执行，在该文件中设置webpack使用的命令及哪个配置文件；</p></li><li><p><code>entry</code> 可以有多个，但<code>output</code> 只能有一个</p></li></ul><h2 id="webpack结构" tabindex="-1">webpack结构 <a class="header-anchor" href="#webpack结构" aria-label="Permalink to &quot;webpack结构&quot;">​</a></h2><img src="'+n+`" alt="webpack结构" style="zoom:55%;"><h2 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程&quot;">​</a></h2><p>从启动webpack构建到输出结果经历了一系列过程，它们是：</p><ol><li>解析webpack配置参数，合并从shell传入和<code>webpack.config.js</code>文件里配置的参数，生产最后的配置结果。</li><li>注册所有配置的插件，好让插件监听 webpack 构建生命周期的事件节点，以做出对应的反应。</li><li>从配置的 <code>entry</code> 入口文件开始解析文件构建 AST 语法树，找出每个文件所依赖的文件，递归下去。</li><li>在解析文件递归的过程中根据文件类型和 loader 配置找出合适的 loader 用来对文件进行转换。</li><li>递归完后得到每个文件的最终结果，根据 <code>entry</code> 配置生成代码块 <code>chunk</code>。</li><li>输出所有 <code>chunk</code> 到文件系统。</li><li>需要注意的是，在构建生命周期中有一系列插件在合适的时机做了合适的事情，比如 <code>UglifyJsPlugin</code> 会在 loader 转换递归完后对结果再使用 <code>UglifyJs</code> 压缩覆盖之前的结果。</li></ol><h1 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h1><p>loader 处理项目中各种类型的依赖文件，webpack 默认可以处理 JS、JSON 文件。</p><ul><li>webpack 只能理解 <strong>JS</strong> 和 <strong>JSON</strong> 文件，其他类型的文件需要用 loader 处理并被 loader 转换为有效的模块，然后添加到依赖图中。</li><li>loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS 文件！</li><li>webpack 的其中一个强大的特性就是能通过 <code>import</code> 导入任何类型的模块（例如 <code>.css</code> 文件），</li><li>所有的 loader 按照<strong>前置 -&gt; 行内 -&gt; 普通 -&gt; 后置</strong>的顺序执行</li><li><code>webpack.config.js</code> 中配置多个 loader 时按从后往前（从右往左）的顺序执行。</li></ul><h2 id="常用loader" tabindex="-1">常用loader <a class="header-anchor" href="#常用loader" aria-label="Permalink to &quot;常用loader&quot;">​</a></h2><ul><li>css文件处理：style-loader css-loader</li><li>字体和静态图像: file-loader</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> /\\.(png|svg|jpg|gif)$/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">		&#39;file-loader&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span></code></pre></div><ul><li>压缩图像: <a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noreferrer">image-webpack-loader</a>、<a href="https://webpack.docschina.org/loaders/url-loader" target="_blank" rel="noreferrer">url-loader</a>（图像转为base64）</li></ul><h2 id="自定义loader" tabindex="-1">自定义loader <a class="header-anchor" href="#自定义loader" aria-label="Permalink to &quot;自定义loader&quot;">​</a></h2><p><a href="https://webpack.js.org/contribute/writing-a-loader/" target="_blank" rel="noreferrer">编写loader</a></p><h2 id="loader-和-plugin的区别" tabindex="-1">loader 和 plugin的区别 <a class="header-anchor" href="#loader-和-plugin的区别" aria-label="Permalink to &quot;loader 和 plugin的区别&quot;">​</a></h2><ul><li>webpakc中每个文件都视为一个模块，webpack 核心只能处理JS文件(模块)，所以需要loader对非JS文件进行转换，loader不影响构建流程；</li><li>对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程。【导出为函数的模块，对匹配的文件进行转换；】</li><li>plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后。webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务，包括：打包优化，资源管理，注入环境变量。【带有apply方法的对象，apply方法被webpack的编译器调用；扩展webpack的功能，在构建过程中注入钩子函数实现；】</li><li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308" target="_blank" rel="noreferrer">webpack 中 loader 和 plugin 的区别是什么</a></li></ul><h1 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h1><blockquote><p>常用插件</p></blockquote><ul><li>生成html文件: html-webpack-plugin</li><li>压缩js代码: uglifyjs-webpack-plugin</li><li>定义环境变量: DefinePlugin，内置插件<code>webpack.DefinePlugin</code></li><li>分离单独的css文件: extract-text-webpack-plugin</li><li>分离单独的css文件: <a href="https://webpack.docschina.org/plugins/mini-css-extract-plugin/#minimizing-for-production" target="_blank" rel="noreferrer">MiniCssExtractPlugin</a> 插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载</li></ul><h2 id="自定义插件" tabindex="-1">自定义插件 <a class="header-anchor" href="#自定义插件" aria-label="Permalink to &quot;自定义插件&quot;">​</a></h2><p>webpack 插件是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在 整个 编译生命周期都可以访问 compiler 对象。</p><blockquote><p>如何自定义webpack插件</p></blockquote><ul><li>JavaScript 命名函数</li><li>在插件函数prototype 上定义一个apply 方法</li><li>定义一个绑定到webpack 自身的hook</li><li>处理webpack内部特定数据</li><li>功能完成后调用webpack 提供的回调</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ConsoleLogOnBuildWebpackPlugin.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pluginName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ConsoleLogOnBuildWebpackPlugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ConsoleLogOnBuildWebpackPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pluginName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compilation</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack 构建正在启动！</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ConsoleLogOnBuildWebpackPlugin</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><a href="https://www.webpackjs.com/contribute/writing-a-plugin/" target="_blank" rel="noreferrer">https://www.webpackjs.com/contribute/writing-a-plugin/</a></p><h1 id="code-splitting" tabindex="-1"><a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noreferrer">code splitting</a> <a class="header-anchor" href="#code-splitting" aria-label="Permalink to &quot;[code splitting](https://webpack.js.org/guides/code-splitting/)&quot;">​</a></h1><h1 id="bundle-analysis" tabindex="-1"><a href="https://webpack.js.org/guides/code-splitting/#bundle-analysis" target="_blank" rel="noreferrer">Bundle Analysis</a> <a class="header-anchor" href="#bundle-analysis" aria-label="Permalink to &quot;[Bundle Analysis](https://webpack.js.org/guides/code-splitting/#bundle-analysis)&quot;">​</a></h1><h1 id="webpack配置" tabindex="-1">webpack配置 <a class="header-anchor" href="#webpack配置" aria-label="Permalink to &quot;webpack配置&quot;">​</a></h1><blockquote><p><a href="https://createapp.dev/webpack/vue--babel--typescript" target="_blank" rel="noreferrer">自定义配置UI</a></p></blockquote><h1 id="依赖管理" tabindex="-1">依赖管理 <a class="header-anchor" href="#依赖管理" aria-label="Permalink to &quot;依赖管理&quot;">​</a></h1><blockquote><p><a href="https://webpack.js.org/guides/dependency-management/" target="_blank" rel="noreferrer">https://webpack.js.org/guides/dependency-management/</a></p></blockquote><blockquote><p>动态导入 require.context</p></blockquote><p><a href="https://v4.webpack.js.org/guides/dependency-management/#requirecontext" target="_blank" rel="noreferrer">require.context</a><a href="https://v4.webpack.js.org/api/module-methods/#dynamic-expressions-in-import" target="_blank" rel="noreferrer">动态导入</a></p><p><code>require(&#39;./template/&#39; + name + &#39;.ejs&#39;);</code><code>require.context(&#39;./test&#39;, false, /\\.test\\.js$/);</code></p><p>使用 <code>import(somepath)</code> 动态导入资源时，资源路径不能完全是一个变量，必须以字符串开头。</p><p>如果路径指向父级目录，要避免出现循环引用</p><h2 id="自动加载组件-路由" tabindex="-1">自动加载组件|路由 <a class="header-anchor" href="#自动加载组件-路由" aria-label="Permalink to &quot;自动加载组件|路由&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> requireComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">Base</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">A-Z</span><span style="color:#89DDFF;">]/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">requireComponent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fileName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cfg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requireComponent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fileName</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">cfg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cfg</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">componentName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fileName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">\\w</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">componentName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cfg</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h1 id="svg处理" tabindex="-1">svg处理 <a class="header-anchor" href="#svg处理" aria-label="Permalink to &quot;svg处理&quot;">​</a></h1><ol><li>读取 svg 文件</li><li>压缩svg svgo-loader</li><li>生成组件</li></ol><h1 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h1><ul><li>代码分离，路由懒加载，如果资源（组件）文件不在 <code>src</code> 目录下，使用动态 <code>import</code> 不会打包为多个 chunk</li><li><code>entry.page</code></li><li>contenthash: 根据资源内容创建出唯一 hash，但是资源没有变化，每次build时hash还是会变化。因为webpack 在入口 chunk 中，包含了某些 boilerplate(引导模板)，特别是 runtime 和 manifest。（译注：boilerplate 指 webpack 运行时的引导代码）。</li><li>我们将 <code>lodash</code> 安装为 <code>devDependencies</code> 而不是 <code>dependencies</code>，因为我们不需要将其打包到我们的库中，否则我们的库体积很容易变大。</li><li>现在，如果执行 <code>webpack</code>，你会发现创建了一个体积相当大的文件。如果你查看这个文件，会看到 lodash 也被打包到代码中。在这种场景中，我们更倾向于把 <code>lodash</code> 当作 <code>peerDependency</code>。也就是说，consumer(使用者) 应该已经安装过 <code>lodash</code> 。因此，你就可以放弃控制此外部 library ，而是将控制权让给使用 library 的 consumer</li><li><a href="https://webpack.docschina.org/guides/author-libraries/" target="_blank" rel="noreferrer">创建library</a></li></ul><h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><p><a href="https://www.kancloud.cn/sllyli/webpack/1242347" target="_blank" rel="noreferrer">webpack定制前端开发环境</a><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTEwMTAwNg==&amp;mid=2650306445&amp;idx=1&amp;sn=4ec67967ba6352fb168b4cf68af1930d&amp;chksm=bef177ac8986feba165cd9bc818747832c52bba9100f634f61cc7911027acef2ba18adce5ba2&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">webpack 概念-解释</a></p>`,62),t=[r];function c(i,d,y,h,u,D){return e(),s("div",null,t)}const k=a(p,[["render",c]]);export{b as __pageData,k as default};
