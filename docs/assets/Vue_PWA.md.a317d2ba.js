import{_ as s,o as a,c as l,V as o}from"./chunks/framework.33d73f2c.js";const n="/assets/sw-lifecycle.6a282c9d.png",e="/assets/1530352193027.aa28e681.png",h=JSON.parse('{"title":"PWA （渐进式/Web/application）","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/PWA.md","filePath":"Vue/PWA.md","lastUpdated":1691037194000}'),p={name:"Vue/PWA.md"},t=o('<h1 id="pwa-渐进式-web-application" tabindex="-1">PWA （渐进式/Web/application） <a class="header-anchor" href="#pwa-渐进式-web-application" aria-label="Permalink to &quot;PWA （渐进式/Web/application）&quot;">​</a></h1><ul><li><p><strong>只能在http://localhost或者https下运行</strong></p></li><li><p>持续关注PWA，积极研究其中应用场景，谷歌公司将现有的技术，结合起来推广的一整套的方案</p></li></ul><ul><li><p>慢慢收服你（用户）</p></li><li><p>离线浏览web应用，生成桌面应用，顶部通知（页面都可以不存在），预缓存（在你页面没有启动以前，请求资源保存到浏览器）（真正访问的时候，非常快，请求本地），骨架屏，App shell(利用缓存机制保存css+html+js等等)， 分享</p></li><li><p>以上所有讲的东西，请大家把自己当产品经理来学习，以后再新技术上，chrome推出PWA但是一直没火起来。</p></li><li><p>手机端 chrome 55以上才支持这些所有</p><ul><li>IOS11 safari 支持</li></ul></li><li><p>英文查看支持率 caniuse网站 中文就是lavas官网可以看到</p></li></ul><h1 id="service-worker" tabindex="-1">service worker <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;service worker&quot;">​</a></h1><ul><li>本质就是浏览器开启的一个线程（类似webworker），该线程可以拦截请求，发请求（类似node服务器）</li></ul><h1 id="sw生命周期" tabindex="-1">SW生命周期 <a class="header-anchor" href="#sw生命周期" aria-label="Permalink to &quot;SW生命周期&quot;">​</a></h1><img src="'+n+`" alt="sw-lifecycle" style="zoom:50%;"><ul><li><strong>install</strong>：Service Worker 安装成功后被触发的事件，在事件处理函数中可以添加需要缓存的文件（预先缓存资源）</li><li><strong>activate</strong>：当 Service Worker 安装完成后并进入激活状态，会触发 activate 事件。通过监听 activate 事件你可以做一些预处理，如对旧版本的更新、对无用缓存的清理等。（检查更新资源）</li><li><strong>message</strong>：Service Worker 运行于独立 context 中，无法直接访问当前页面主线程的 DOM 等信息，但是通过 postMessage API，可以实现他们之间的消息传递，这样主线程就可以接受 Service Worker 的指令操作 DOM。（浏览器与serviceworker通信的事件）</li></ul><h1 id="数据存储" tabindex="-1">数据存储 <a class="header-anchor" href="#数据存储" aria-label="Permalink to &quot;数据存储&quot;">​</a></h1><ul><li><p>H5中的CacheAPI</p></li><li><p>使用CacheAPI获取指定缓存的内容</p><ul><li><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建响应对象 开始</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> debug </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">hello</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> blob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#A6ACCD;">([JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(debug</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">type </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">application/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> init </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">status</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">statusText</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SuperSmashingGreat!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myResponse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Response</span><span style="color:#A6ACCD;">(blob</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">init)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建响应对象 结束</span></span>
<span class="line"><span style="color:#A6ACCD;">caches</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">cachedRequests</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">cachedRequests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/def113</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">myResponse</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><h1 id="db比较" tabindex="-1">DB比较 <a class="header-anchor" href="#db比较" aria-label="Permalink to &quot;DB比较&quot;">​</a></h1></li></ul><p><img src="`+e+'" alt="1530352193027"></p><h1 id="缓存precaching" tabindex="-1">缓存precaching <a class="header-anchor" href="#缓存precaching" aria-label="Permalink to &quot;缓存precaching&quot;">​</a></h1><ul><li>workbox-sw 一个工具库 <ul><li>预缓存静态资源<code>workbox.precaching.precacheAndRoute([&#39;xxx&#39;])</code></li><li>动态缓存动态资源<code>workbox.routing.registerRoute(fn)</code></li><li>缓存算法策略<code>workbox.strategies</code><ul><li>缓存优先 <code>cacheFirst()</code></li><li>网络优先 <code>networkFirst()</code></li><li>仅缓存<code>networkOnly()</code></li><li>仅网络<code>networkOnly()</code></li><li>Stale While Revalidate(缓存优先并更新缓存) <code>staleWhileRevalidate()</code></li></ul></li></ul></li></ul><h1 id="更新问题" tabindex="-1">更新问题 <a class="header-anchor" href="#更新问题" aria-label="Permalink to &quot;更新问题&quot;">​</a></h1><ul><li><p>在service worker 中会缓存 service worker的具体行为</p></li><li><p>让register-worker 每次请求新的service worker 就可以更改 缓存内容与缓存策略</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">register</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">`${</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BASE_URL</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">service-work.js?</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{...}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h1 id="兴趣补充" tabindex="-1">兴趣补充 <a class="header-anchor" href="#兴趣补充" aria-label="Permalink to &quot;兴趣补充&quot;">​</a></h1><ul><li>顶部通知 notification对象</li><li>分享 navigator.share</li></ul>',18),r=[t];function c(i,D,y,F,A,C){return a(),l("div",null,r)}const u=s(p,[["render",c]]);export{h as __pageData,u as default};
