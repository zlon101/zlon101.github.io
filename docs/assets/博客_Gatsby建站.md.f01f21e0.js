import{_ as s,o as a,c as n,V as l}from"./chunks/framework.35aa2305.js";const o="/assets/1562139626154.22420744.png",d=JSON.parse('{"title":"参考","description":"","frontmatter":{},"headers":[],"relativePath":"博客/Gatsby建站.md","filePath":"博客/Gatsby建站.md","lastUpdated":1691037194000}'),e={name:"博客/Gatsby建站.md"},p=l('<blockquote><p>Gatsby是一个基于 React 架构的静态站点生成器，可以让你体验React的所有优点。Gatsby有一个预先配置好的Webpack，使用它入门React会省下很多麻烦，此外Gatsby会根据你的目录结构自动生成路由。所有的HTML都会在服务器端渲染，弥补了客户端渲染的不足。</p></blockquote><h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><ul><li><a href="https://www.gatsbyjs.cn/" target="_blank" rel="noreferrer">Gatsby中文文档</a></li><li><a href="https://blog.crimx.com/archives" target="_blank" rel="noreferrer">搭建 Gatsby-博客</a> <a href="https://github.com/crimx/blog-2019" target="_blank" rel="noreferrer">Gatsby博客源码</a></li><li><a href="https://www.gatsbyjs.org/starters/email2vimalraj/gatsby-starter-tech-blog/" target="_blank" rel="noreferrer">starter</a></li><li><a href="https://mp.weixin.qq.com/s/NavizDLQXav-N2cYda8Bhg" target="_blank" rel="noreferrer">使用 Gatsby.js 搭建静态博客黑暗模式</a></li><li><a href="https://www.gatsbyjs.com/blog/2017-07-19-creating-a-blog-with-gatsby/" target="_blank" rel="noreferrer">Creating a Blog with Gatsby</a></li></ul><h1 id="环境搭建" tabindex="-1">环境搭建 <a class="header-anchor" href="#环境搭建" aria-label="Permalink to &quot;环境搭建&quot;">​</a></h1><ul><li><p>install Node and npm</p></li><li><p>global install gatsby-cli: <code>npm install -g gatsby-cli</code></p></li><li><p>创建项目：<code>gatsby new &lt;dir&gt; [starter]</code></p></li><li><p>运行服务器：<code>gatsby develop</code></p></li><li><p>然后在pages目录下添加.md文件就能自动生成新博客文章了。 Gatsby 的核心自动把 <code>src/pages</code> 中的 React 组件转变为页面和 URL。比如：在 <code>src/pages/index.js</code> 和 <code>src/pages/about.js</code> 中的组件，会为网站的索引页（<code>/</code>）和 关于页（<code>/about</code>）自动创建基于文件名的页面。</p></li><li><p><strong>命令</strong></p></li><li><p>npm i -g gatsby-cli</p></li><li><p>gatsby new gatsby-blog <a href="https://github.com/gatsbyjs/gatsby-starter-blog" target="_blank" rel="noreferrer">https://github.com/gatsbyjs/gatsby-starter-blog</a> (这里使用了gatsby官方提供的一个blog模板)</p></li><li><p>最后进入 gatsby-blog 文件夹，运行 gatsby develop</p></li><li><p>构建：gatsby build；Gatsby将为您的站点执行优化的生产构建，生成<strong>静态HTML</strong>和每个路由的JavaScript代码包。</p></li></ul><p><strong>目录结构</strong></p><p><img src="'+o+`" alt="1562139626154"></p><h1 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h1><blockquote><p>Gatsby构建命令生成一个包含静态HTML和JavaScript文件的目录，您可以将其部署到静态站点托管服务中。</p></blockquote><ul><li>&quot;gh-pages -d build&quot;： Github 的 gh-pages 功能发布内容。</li><li>build 后push到username.github.io/repos的master分支;</li><li>绑定域名：在项目的根目录新建<code>static</code> 文件夹，然后添加<code>CNAME</code>文件，写上自己的域名。</li><li>域名解析：</li></ul><p><a href="https://www.gatsbyjs.com/docs/tutorial/part-one/#deploying-a-gatsby-site" target="_blank" rel="noreferrer">参考</a></p><h1 id="布局组件" tabindex="-1">布局组件 <a class="header-anchor" href="#布局组件" aria-label="Permalink to &quot;布局组件&quot;">​</a></h1><blockquote><p>布局包括：页眉、页脚、侧边栏、导航栏</p></blockquote><p><strong>利用两个插件实现 <code>.md</code> 到 <code>html</code> 的转换</strong></p><ul><li><code>yarn add gatsby-transformer-remark gatsby-source-filesystem</code></li><li><code>gatsby-source-filesystem</code> (Source plugins) 获取数据， <code>gatsby-transformer-remark</code> (<em>transformer</em> plugins) 对 markdown 文件解析后会生成 <code>MarkdownRemark</code></li><li><code>gatsby-transformer-remark</code> 解析 Markdown 并获取文件里面的数据</li></ul><p><strong>修改配置文件</strong></p><ul><li><p>gatsby-config.js</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">siteMetadata</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Gatsby Default Starter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gatsby-plugin-react-helmet</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 添加以下两个插件，一个用于读取md文件，一个用于转换其为html</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gatsby-transformer-remark</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gatsby-source-filesystem</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/src</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>frontmatter <code>/page</code>目录下.md文件中的‘---’ 隔开的部分(frontmatter: 网站的基本资料)会被 <code>gatsby-transformer-remark</code> 插件识别，并保存到 <code>frontmatter</code> 部分。可以通过 graphql 查询并用于页面渲染</p></li></ul><p><strong>模板</strong></p><ul><li>templates</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//templates 模板</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Helmet </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-helmet</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Template</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">markdownRemark</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">frontmatter</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>参数 <code>data</code> 是由 GraphQL 传递进来的数据，也就是 Markdown 文件里面的内容。这些数据存放在markdownRemark变量当中，我们把它提取并存入post变量中，接着就可以透过<code>post.frontmatter.title</code> 使用 <code>frontmatter</code> 中的 <code>title</code> 内容。</p><p><strong>生成网页</strong></p><ul><li><p><code>/src/pages/*.js</code> 目录下的组件会自动生成相应路径的页面，但如果是其它类型的文件就不会了。</p></li><li><p>我们用 GraphQL 取得所有的文章，用 foreach 针对每一篇文章使用 createPage 建立新页面，这里则需要用到 path 和 postTemplate</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">createPage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 页面对应的路由</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 模板组件</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 传递给模板组件的上下文 props.pageContext, 用户 graphql 的参数查询</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="数据查询-graphql" tabindex="-1">数据查询(GraphQL) <a class="header-anchor" href="#数据查询-graphql" aria-label="Permalink to &quot;数据查询(GraphQL)&quot;">​</a></h2><blockquote><p>Page queries live outside of the component definition — by convention at the end of a page component file — and are only available on page components.</p></blockquote><ul><li>page components: <code>src/pages/*.js</code> 目录下的组件</li><li>non-page components: 非 page components，如 Layout.js 不能使用 query 查询数据，改为 useStaticQuery</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">frontmatter {</span></span>
<span class="line"><span style="color:#A6ACCD;">	date(formatString: &quot;DD MMMM, YYYY&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">allFile {</span></span>
<span class="line"><span style="color:#A6ACCD;">	nodes {</span></span>
<span class="line"><span style="color:#A6ACCD;">		name</span></span>
<span class="line"><span style="color:#A6ACCD;">		relativePath</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">allMarkdownRemark {</span></span>
<span class="line"><span style="color:#A6ACCD;">	edges {</span></span>
<span class="line"><span style="color:#A6ACCD;">	  node {</span></span>
<span class="line"><span style="color:#A6ACCD;">			html</span></span>
<span class="line"><span style="color:#A6ACCD;">			id</span></span>
<span class="line"><span style="color:#A6ACCD;">			frontmatter {</span></span>
<span class="line"><span style="color:#A6ACCD;">		  	title</span></span>
<span class="line"><span style="color:#A6ACCD;">			}</span></span>
<span class="line"><span style="color:#A6ACCD;">			parent {</span></span>
<span class="line"><span style="color:#A6ACCD;">		  	... on File {</span></span>
<span class="line"><span style="color:#A6ACCD;">				name</span></span>
<span class="line"><span style="color:#A6ACCD;">				relativePath</span></span>
<span class="line"><span style="color:#A6ACCD;">		  }</span></span>
<span class="line"><span style="color:#A6ACCD;">		}</span></span>
<span class="line"><span style="color:#A6ACCD;">	  }</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h1 id="动态创建页面" tabindex="-1">动态创建页面 <a class="header-anchor" href="#动态创建页面" aria-label="Permalink to &quot;动态创建页面&quot;">​</a></h1><p>Gatsby 可以使用 GraphQL 查询数据并将查询结果映射为页面</p><blockquote><p>步骤：</p></blockquote><ol><li>查询数据</li><li>数据映射为页面</li></ol><p>当动态创建页面时，需要指定一个页面模板。</p><h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><ul><li><a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#onCreateNode" target="_blank" rel="noreferrer"><code>onCreateNode</code></a></li><li><a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#createPages" target="_blank" rel="noreferrer"><code>createPages</code></a></li></ul>`,35),t=[p];function r(c,i,y,D,F,C){return a(),n("div",null,t)}const g=s(e,[["render",r]]);export{d as __pageData,g as default};
