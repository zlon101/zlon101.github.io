import{_ as s,o as e,c as a,Q as o}from"./chunks/framework.cbe154cb.js";const l="/assets/image.8b89979b.png",n="/assets/vue3-组合式api.bd2a0581.png",t="/assets/2.4f714082.jpg",h=JSON.parse('{"title":"概览","description":"","frontmatter":{},"headers":[],"relativePath":"vue3.md","filePath":"vue3.md"}'),p={name:"vue3.md"},c=o('<h1 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h1><p><a href="https://github.com/vuejs/vue" target="_blank" rel="noreferrer">vue2 源码</a><a href="https://vuejs.org/guide/introduction.html" target="_blank" rel="noreferrer">vue3</a> <a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">源码</a><a href="https://mp.weixin.qq.com/s/Os-yxAcIrcC9rvfXyyvPHA" target="_blank" rel="noreferrer">Vue3 响应式是如何实现的</a></p><p><strong>核心概念</strong>：组件 | 组件通信 | 指令 | 插槽 | 生命周期 | 响应式状态 | API</p><p><img src="'+l+'" alt="image"></p><ul><li><p><code>$mount(&#39;#app&#39;)</code> 组件会替换 <code>#app</code> 元素本身（<code>outerHtml</code>）</p></li><li><p>一个指令的功能/作用是在其表达式的值变化时响应式地更新 DOM</p></li><li><p>使用了 <code>&lt;script setup&gt;</code> 的组件是默认私有的：一个父组件无法访问到一个使用了<code>&lt;script setup&gt;</code> 的子组件中的任何东西，除非子组件在其中通过 defineExpose 宏显式暴露</p></li><li><p>如果你是直接在 DOM 中书写模板 (例如原生 <code>&lt;template&gt;</code> 元素的内容)，模板的编译需要遵从浏览器中 HTML 的解析行为。在这种情况下，你应该需要使用 kebab-case 形式并显式地关闭这些组件的标签</p></li></ul><blockquote><p>顶级作用域</p></blockquote><h1 id="新特性" tabindex="-1">新特性 <a class="header-anchor" href="#新特性" aria-label="Permalink to &quot;新特性&quot;">​</a></h1><ul><li>template 支持多个根标签</li><li>组合式API、组合式函数</li><li>Teleport 内置组件</li><li>性能优化： <ul><li>模板编译新增静态标记、静态提升</li><li>diff算法新增【更新类型标记】</li><li>响应式原理：给响应式变量增加标记（旧依赖、新依赖）、只删除失效的依赖</li></ul></li></ul><blockquote><p>Vue3 性能提升体现在哪些方面</p></blockquote><ul><li>代码层面性能优化主要体现在全新响应式API，基于Proxy实现，初始化时间和内存占用均大幅改进；</li><li>编译层面做了更多编译优化处理，比如静态标记pachFlag（diff算法增加了一个静态标记，只对比有标记的dom元素）、事件增加缓存、静态提升（对不参与更新的元素，会做静态提升，只会被创建一次，之后会在每次渲染时候被不停的复用）等，可以有效跳过大量diff过程；</li></ul><p><a href="https://mp.weixin.qq.com/s/WKqVSuCsM5CvO0dAHWUYfA?poc_token=HOXIrGSjvnTk9zHUAGKjB9wdFox3MhJf2NGGBPSw" target="_blank" rel="noreferrer">Vue3 速度快的原因</a></p><ul><li>打包时更好的支持tree-shaking，因此整体体积更小，加载更快</li><li>ssr渲染以字符串方式渲染</li></ul><blockquote><p>Vue2 和 Vue3之间的一些区别</p></blockquote><ul><li><p>性能：Vue.js 3采用了新的响应式引擎，它比Vue.js 2更快。在Vue.js 3中，许多内部实现都被优化，包括虚拟DOM的生成和更新、组件实例化和更新等等。</p></li><li><p>Tree Shaking 支持：Vue.js 3 支持tree shaking，可以更容易地剔除没有使用的代码，使得打包后的代码更小更快。</p></li><li><p>Composition API: Vue.js 3 引入了Composition API，它是一种新的API风格，可以让开发者更灵活的组织和重用组件逻辑。它允许将逻辑按照功能而不是选项分离，并且让开发者可以更好地重用逻辑。</p></li><li><p>指令的钩子函数变化 created、beforeMount、mounted、beforeUpdate、updated、beforeUnmount、unmounted</p></li><li><p>Teleport 组件：Vue.js 3 引入了Teleport组件，它允许组件在DOM树中的不同位置进行渲染。这使得开发者可以更轻松地实现模态框等功能。</p></li><li><p>TypeScript支持：Vue.js 3 对TypeScript的支持更好。Vue.js 3中的TypeScript类型定义更加精确，使得开发者更容易使用TypeScript编写Vue.js应用。</p></li></ul><p>总的来说，Vue.js 3是一个更快、更灵活、更易于维护的框架，它为开发者带来了许多新的功能和改进。</p><h2 id="组件选项配置" tabindex="-1">组件选项配置 <a class="header-anchor" href="#组件选项配置" aria-label="Permalink to &quot;组件选项配置&quot;">​</a></h2><ul><li>emits：声明组件触发的事件，（可选）</li><li>expost</li><li><code>props</code> 和 事件名会自动格式转换，将驼峰转为短横线形式</li><li>双向绑定 <code>v-model</code> 的 props 由 <code>value</code> 改为 <code>modelValue</code></li><li>多根节点？</li><li>用响应式API替换事件总线</li></ul><h1 id="vue3-应用开发" tabindex="-1">Vue3 应用开发 <a class="header-anchor" href="#vue3-应用开发" aria-label="Permalink to &quot;Vue3 应用开发&quot;">​</a></h1><blockquote><p>应用开发步骤</p></blockquote><ol><li>调用 createApp 创建应用实例</li><li>设置应用级配置 <code>app.config.xxx</code></li><li>挂载根组件 <code>app.mount()</code>：mount() 方法应该始终在整个应用配置和资源注册完成后被调用</li></ol><h1 id="组合式-api" tabindex="-1">组合式 API <a class="header-anchor" href="#组合式-api" aria-label="Permalink to &quot;组合式 API&quot;">​</a></h1><p><img src="'+n+`" alt="vue3-组合式api"></p><p><code>&lt;script setup&gt;</code> 形式书写的组件模板被编译为了一个内联函数，和 <code>&lt;script setup&gt;</code> 中的代码位于同一作用域。不像选项式 API 需要依赖 this 上下文对象访问属性，被编译的模板可以直接访问 <code>&lt;script setup&gt;</code> 中定义的变量，无需一个代码实例从中代理。这对代码压缩更友好，因为本地变量的名字可以被压缩，但对象的属性名则不能。</p><ul><li><p>仅调用 <code>setup()</code> 或 <code>&lt;script setup&gt;</code> 的代码一次。这使得代码更符合日常 JavaScript 的直觉，不需要担心闭包变量的问题。组合式 API 也并不限制调用顺序，还可以有条件地进行调用。</p></li><li><p>Vue 的响应性系统运行时会自动收集计算属性和侦听器的依赖，因此无需手动声明依赖。</p></li><li><p>无需手动缓存回调函数来避免不必要的组件更新。Vue 细粒度的响应性系统能够确保在绝大部分情况下组件仅执行必要的更新。对 Vue 开发者来说几乎不怎么需要对子组件更新进行手动优化。</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">emits</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">inFocus</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">submit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// setup 函数中的this 为 undefined</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">submit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p><code>&lt;script setup&gt;</code> 作用</p></blockquote><ol><li>导入的组件可以直接使用，无需局部注册</li><li>以<code>v</code> 为前缀驼峰形式声明的指令可以直接使用，无需注册</li><li>声明的顶层变量可以在 template 中直接使用</li><li>可以使用编译宏命令：defineProps、defineEmits 等</li></ol><blockquote><p>同时使用选项式API 和 组合式API</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 使用普通的 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 来声明选项</span></span>
<span class="line"><span style="color:#A6ACCD;">export default </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  inheritAttrs: </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">// ...setup 部分逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><blockquote><p>全局属性</p></blockquote><img src="`+t+`" alt="2" style="zoom:67%;"><h2 id="编译器宏" tabindex="-1">编译器宏 <a class="header-anchor" href="#编译器宏" aria-label="Permalink to &quot;编译器宏&quot;">​</a></h2><p>在使用 <code>&lt;script setup&gt;</code> 的单文件中直接使用某个【宏】，无需导入。</p><ul><li>defineProps</li><li>defineEmits：组件触发的事件</li><li>defineExpose</li><li>defineOptions</li><li>withDefaults</li></ul><h2 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h2><p>插槽内容无法访问子组件的数据。Vue 模板中的表达式只能访问其【定义时所处的作用域】，这和 JavaScript 的【词法作用域】规则是一致的。换言之。父组件模板中的表达式只能访问父组件的作用域，子组件模板中的表达式只能访问子组件的作用域。</p><h2 id="代码复用" tabindex="-1">代码复用 <a class="header-anchor" href="#代码复用" aria-label="Permalink to &quot;代码复用&quot;">​</a></h2><p>代码复用方式有：</p><ul><li>组件：复用逻辑和UI</li><li>组合式函数：复用逻辑</li><li>自定义指令：处理DOM的逻辑</li></ul><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getCurrentInstance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getCurrentInstance</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(proxy) </span><span style="color:#676E95;font-style:italic;">// 和 this 的属性一样</span></span></code></pre></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><blockquote><p>缓存路由视图</p></blockquote><p>缓存 <code>router-view</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">router-view</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">v-slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">router-view</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li>缓存的组件如何更新数据？</li></ul><ol><li>路由导航守卫 beforeRouteEnter</li><li>组件生命周期 activated</li></ol><ul><li>如何清除缓存</li></ul><p>绑定 key 然后设置不同的属性值</p><h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h1><p>Vue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。</p><table><thead><tr><th><strong>Vue 2中的生命周期钩子</strong></th><th><strong>Vue 3选项式API的生命周期选项</strong></th><th><strong>Vue 3 组合API中生命周期钩子</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td><code>beforeCreate</code></td><td><code>setup()</code></td><td>创建前，此时<code>data</code>和 <code>methods</code>的数据都还没有初始化</td></tr><tr><td><code>created</code></td><td><code>created</code></td><td><code>setup()</code></td><td>创建后，<code>data</code>中有值，尚未挂载，可以进行一些<code>Ajax</code>请求</td></tr><tr><td><code>beforeMount</code></td><td><code>beforeMount</code></td><td><code>onBeforeMount</code></td><td>挂载前，会找到虚拟<code>DOM</code>，编译成<code>Render</code></td></tr><tr><td><code>mounted</code></td><td><code>mounted</code></td><td><code>onMounted</code></td><td>挂载后，<code>DOM</code>已创建，可用于获取访问数据和<code>DOM</code>元素</td></tr><tr><td><code>beforeUpdate</code></td><td><code>beforeUpdate</code></td><td><code>onBeforeUpdate</code></td><td>更新前，可用于获取更新前各种状态</td></tr><tr><td><code>updated</code></td><td><code>updated</code></td><td><code>onUpdated</code></td><td>更新后，所有状态已是最新</td></tr><tr><td><code>beforeDestroy</code></td><td><code>beforeUnmount</code></td><td><code>onBeforeUnmount</code></td><td>销毁前，可用于一些定时器或订阅的取消</td></tr><tr><td><code>destroyed</code></td><td><code>unmounted</code></td><td><code>onUnmounted</code></td><td>销毁后，可用于一些定时器或订阅的取消</td></tr><tr><td><code>activated</code></td><td><code>activated</code></td><td><code>onActivated</code></td><td><code>keep-alive</code>缓存的组件激活时</td></tr><tr><td><code>deactivated</code></td><td><code>deactivated</code></td><td><code>onDeactivated</code></td><td><code>keep-alive</code>缓存的组件停用时</td></tr><tr><td><code>errorCaptured</code></td><td><code>errorCaptured</code></td><td><code>onErrorCaptured</code></td><td>捕获一个来自子孙组件的错误时调用</td></tr><tr><td>—</td><td><code>renderTracked</code></td><td><code>onRenderTracked</code></td><td>调试钩子，响应式依赖被收集时调用</td></tr><tr><td>—</td><td><code>renderTriggered</code></td><td><code>onRenderTriggered</code></td><td>调试钩子，响应式依赖被触发时调用</td></tr><tr><td>—</td><td><code>serverPrefetch</code></td><td><code>onServerPrefetch</code></td><td>组件实例在服务器上被渲染前调用</td></tr></tbody></table><p><strong>「父子组件的生命周期」：</strong></p><ul><li><code>加载渲染阶段</code>：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</li><li><code>更新阶段</code>：父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</li><li><code>销毁阶段</code>：父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</li></ul><blockquote><p>监听子组件生命周期</p></blockquote><p>onVnodeBeforeMount onVnodeMounted onVnodeBeforeUpdate onVnodeUpdated onVnodeBeforeUnmount onVnodeUnmounted</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMyComponentMounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">divThatDisplaysCountWasUpdated</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">MyComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@vnodeMounted</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onMyComponentMounted</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@vnodeUpdated</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">divThatDisplaysCountWasUpdated</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ count }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h1 id="响应式" tabindex="-1">响应式 <a class="header-anchor" href="#响应式" aria-label="Permalink to &quot;响应式&quot;">​</a></h1><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p><strong>关键词</strong>：依赖收集、触发更新、当前正在执行的副作用对象（activeEffect）、响应式副作用</p><p>响应式副作用：能自动追踪依赖的副作用，比如渲染函数</p><blockquote><p>描述</p></blockquote><p>初始化Vue实例时会创建响应式变量，在执行render函数或其他副作用过程中，访问响应式变量时会进行依赖收集，将正在运行的副作用作为新的订阅者添加到一个集合（Set）中，该集合保存了所有追踪该变量的订阅者。</p><p>修改响应式变量时会触发更新，将这个变量的订阅者集合中的副作用全部执行一遍</p><blockquote><p>解释</p></blockquote><p>Vue3 基于 ES6 新增的Proxy对象实现数据代理并通过Reflect对源数据进行操作，解决了Vue2中无法追踪对象新增、删除属性的问题。另外，Proxy可以直接监听数组，无需像Vue2中那样重写数组方法进行拦截。</p><p>vue3采用【数据代理+数据劫持+发布订阅模式】的方法。在初始化vue实例时用Proxy对象来代理目标对象，对目标对象的所有属性的基本操作（get、set、del）进行拦截，并通过Reflect操作对象内部数据。</p><p>当Proxy对象属性或Proxy数组元素发生变化时，会触发Proxy属性的setter方法，然后通过Reflect操作目标对象属性，同时触发它Dep实例的notify方法进行依赖分发，通知所有依赖的Watcher实例执行内部回调函数。</p><p>最后会触发renderWatcher回调，会重新执行render函数，重新对比新旧虚拟DOM，重新渲染页面。</p><p>当读取Proxy对象属性时，会触发Proxy属性的getter方法，然后触发它Dep实例的depend方法进行依赖收集。</p><p>Proxy：拦截【对象】中任意属性的变化，包括：读写、新增、删除</p><p>Reflect：对源对象的属性进行操作</p><p>使用Proxy替换 Object.defineProperty 实现响应式的优劣：</p><ul><li>优点：直接劫持整个对象，不用递归对象、数组的属性；劫持数组；对象属性新增、删除等；</li><li>缺点：不兼容IE</li></ul><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><blockquote><p>reactive</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// \`setup\` 是一个专门用于组合式 API 的特殊钩子函数</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 暴露 state 到模板</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">state</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol><li><p>仅对对象类型有效（对象、数组和 <code>Map</code>、<code>Set</code> 这样的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects#%E4%BD%BF%E7%94%A8%E9%94%AE%E7%9A%84%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">集合类型</a>），而对 <code>string</code>、<code>number</code> 和 <code>boolean</code> 这样的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noreferrer">原始类型</a> 无效。</p></li><li><p>因为 Vue 的响应式系统是通过属性访问进行追踪的，因此我们必须始终保持对该响应式对象的相同引用。这意味着我们不可以随意地“替换”一个响应式对象，因为这将导致对初始引用的响应性连接丢失。</p></li></ol><blockquote><p>ref</p></blockquote><p>Vue 提供了一个 <a href="https://cn.vuejs.org/api/reactivity-core.html#ref" target="_blank" rel="noreferrer"><code>ref()</code></a> 方法来允许我们创建可以使用任何值类型的响应式 <strong>ref</strong>。</p><p><code>ref()</code> 将传入参数的值包装为一个带 <code>.value</code> 属性的 ref 对象。</p><blockquote><p>ref 和 reactive 区别</p></blockquote><p><strong>ref</strong></p><ol><li>通过实例化一个 <code>RefImpl</code> 对象，该对象定义了 <code>value</code>、<code>dep</code> 属性和 <code>get</code>、<code>set</code> 方法，分别进行依赖收集和触发更新。一般用来处理基本数据类型，也能处理复杂数据类型，只不过内部会自动将对象转换为reactive的代理对象。</li><li>在 <code>&lt;script&gt;</code> 中要加.value，在模版中不需要。</li></ol><p><strong>reactive</strong> 创建一个 Proxy 实例，通过Proxy对目标对象中的所有属性动态地进行【数据劫持】，并通过Reflect操作对象内部数据来实现响应式，只能处理引用类型数据，会实现递归深度响应式</p><blockquote><p>watch 和 watchEffect 的区别</p></blockquote><p>执行时机、监听数据源 1、watch是惰性执行，也就是只有监听的值发生变化的时候才会执行，但是watchEffect不同，每次代码加载watchEffect都会执行(忽略watch第三个参数的配置，如果修改配置项也可以实现立即执行) 2、watch 需要传递监听的对象，watchEffect不需要 3、watch 可以访问旧状态值和当前最新状态值，watchEffect 不行 4、watch只能监听响应式数据，ref定义的属性和reactive定义的对象，如果直接监听reactive定义对象中的属性是不允许的，除非使用函数转换一下 5、watchEffect如果监听reactive定义的对象是不起作用的，只能监听对象中的属性。</p><h2 id="响应式系统" tabindex="-1"><a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#how-reactivity-works-in-vue" target="_blank" rel="noreferrer">响应式系统</a> <a class="header-anchor" href="#响应式系统" aria-label="Permalink to &quot;[响应式系统](https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#how-reactivity-works-in-vue)&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">track</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">trigger</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">refObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">get</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">track</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">refObject</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">set</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newValue</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">trigger</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">refObject</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">refObject</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h1 id="pinia" tabindex="-1"><a href="https://pinia.vuejs.org/zh/introduction.html" target="_blank" rel="noreferrer">Pinia</a> <a class="header-anchor" href="#pinia" aria-label="Permalink to &quot;[Pinia](https://pinia.vuejs.org/zh/introduction.html)&quot;">​</a></h1><blockquote><p>特点 | 和 vuex 的区别</p></blockquote><ol><li>更简单的 API（合并 mutation 和 action），符合组合式 API 风格的 API</li><li>取消嵌套结构的模块</li><li>支持 TypeScript 类型推断</li><li>支持 SSR</li></ol><blockquote><p>概念</p></blockquote><p>store、state、getter、action</p><p><strong>action</strong> 可以是异步也可以是同步，返回一个 Promise 或不返回</p><blockquote><p>API</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useUsers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">users</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">state</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">userData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">actions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">registerUser</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">login</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">password</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">userData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">login</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">password</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ul><li>useUsers.$reset</li><li>useUsers.$patch</li><li>useUsers.$subscrib 监听 store 变化，与 watch 相比区别：执行 $patch 更新多个 state 时 subscrib 只会触发一次</li><li>someStore.$onAction：订阅action</li></ul><h1 id="其他-1" tabindex="-1">其他 <a class="header-anchor" href="#其他-1" aria-label="Permalink to &quot;其他&quot;">​</a></h1><h2 id="web-component" tabindex="-1"><a href="https://cn.vuejs.org/guide/extras/web-components.html" target="_blank" rel="noreferrer">web component</a> <a class="header-anchor" href="#web-component" aria-label="Permalink to &quot;[web component](https://cn.vuejs.org/guide/extras/web-components.html)&quot;">​</a></h2><p>你可以用 Vue 来构建标准的 Web Component，这些 Web Component 可以嵌入到任何 HTML 页面中，无论它们是如何被渲染的。这个方式让你能够在不需要顾虑最终使用场景的情况下使用 Vue：因为生成的 Web Component 可以嵌入到旧应用、静态 HTML，甚至用其他框架构建的应用中。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noreferrer">Web Components</a> 是一组 web 原生 API 的统称，允许开发者创建可复用的自定义元素 (custom elements)。</p><h2 id="各种vue版本" tabindex="-1"><a href="https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use" target="_blank" rel="noreferrer">各种vue版本</a> <a class="header-anchor" href="#各种vue版本" aria-label="Permalink to &quot;[各种vue版本](https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use)&quot;">​</a></h2><p>Which dist file to use</p><h2 id="jsx-tsx" tabindex="-1"><a href="https://mp.weixin.qq.com/s/5V7nm9diQHUVor31Jj0xwA" target="_blank" rel="noreferrer">jsx/tsx</a> <a class="header-anchor" href="#jsx-tsx" aria-label="Permalink to &quot;[jsx/tsx](https://mp.weixin.qq.com/s/5V7nm9diQHUVor31Jj0xwA)&quot;">​</a></h2><h2 id="图标" tabindex="-1">图标 <a class="header-anchor" href="#图标" aria-label="Permalink to &quot;图标&quot;">​</a></h2><p>图标可以使用 vite-svg-loader</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p>SPA 一般要求后端提供 API 数据接口，但你也可以将 Vue 和如 <a href="https://inertiajs.com/" target="_blank" rel="noreferrer">Inertia.js</a> 之类的解决方案搭配使用，在保留侧重服务端的开发模型的同时获得 SPA 的益处</p><h2 id="面试" tabindex="-1">面试 <a class="header-anchor" href="#面试" aria-label="Permalink to &quot;面试&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/0_A70Fw_TQUqpzjeIinn2g" target="_blank" rel="noreferrer">2023必知必问的Vue3面试题总结</a></p><p><a href="https://mp.weixin.qq.com/s/WKqVSuCsM5CvO0dAHWUYfA?poc_token=HOXIrGSjvnTk9zHUAGKjB9wdFox3MhJf2NGGBPSw" target="_blank" rel="noreferrer">2023 前端二面高频 vue 面试题集锦</a></p><h1 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h1><blockquote><p>目录结构</p></blockquote><p>代码仓库中有个 packages 目录，里面是 Vue 3 的主要功能的实现，包括</p><ul><li>reactivity 目录：数据响应式系统，这是一个单独的系统，可以与任何框架配合使用。</li><li>runtime-core 目录：与平台无关的运行时。其实现的功能有虚拟 DOM 渲染器、Vue 组件和 Vue 的各种API，我们可以利用这个 runtime 实现针对某个具体平台的高阶 runtime，比如自定义渲染器。</li><li>runtime-dom 目录: 针对浏览器的 runtime。其功能包括处理原生 DOM API、DOM 事件和 DOM 属性等。</li><li>runtime-test 目录: 一个专门为了测试而写的轻量级 runtime。由于这个 rumtime 「渲染」出的 DOM 树其实是一个 JS 对象，所以这个 runtime 可以用在所有 JS 环境里。你可以用它来测试渲染是否正确。它还可以用于序列化 DOM、触发 DOM 事件，以及记录某次更新中的 DOM 操作。</li><li>server-renderer 目录: 用于 SSR。尚未实现。</li><li>compiler-core 目录: 平台无关的编译器. 它既包含可扩展的基础功能，也包含所有平台无关的插件。</li><li>compiler-dom 目录: 针对浏览器而写的编译器。</li><li>shared 目录: 没有暴露任何 API，主要包含了一些平台无关的内部帮助方法。</li><li>vue 目录: 用于构建「完整构建」版本，引用了上面提到的 runtime 和 compiler。</li></ul><blockquote><p>核心</p></blockquote><ul><li><p>全局变量 【activeEffect】表示当前正在运行的副作用，只有 <code>ReactiveEffect.run()</code> 才会设置它的值</p><ul><li>ReactiveEffect 的实例只有三类：watch、computed、render</li></ul></li><li><p>将当前 effect 添加到依赖中，只有 <code>trackEffects(dep)</code> &lt;== trackRefValue &lt;== RefImpl.get、ComputedRefImpl.get</p></li><li><p>trackEffects &lt;== track &lt;==</p></li></ul><blockquote><p>生命周期</p></blockquote><ul><li>instance.emit(&#39;hook:beforeMount&#39;)</li></ul><blockquote><p>ref 完成响应式更新UI</p></blockquote><ul><li><p>每个 <code>ref(1)</code> 会创建一个 RefImpl对象，该对象有一个访问属性 <code>value</code> 和 【dep】属性，【dep】是一个【ReactiveEffect】集合。</p></li><li><p><code>value get</code> 会执行 <code>dep.add(activeEffect!)</code> 和 <code>activeEffect!.deps.push(dep)</code></p></li><li><p><code>value set</code> 会执行 <code>triggerRefValue</code>：遍历【dep】并执行 <code>effect.scheduler</code> （添加到队列）或 <code>effect.run</code>。</p></li><li><p>初始化组件时会创建一个【reactive effect for rendering】，并执行 <code>effect.run</code>（调用用户定义的 render 函数）。同时设置 【activeEffect】为该 effect。</p></li></ul><blockquote><p>reactive 响应式更新</p></blockquote><ul><li><code>reactive(obj)</code> 会创建一个 <code>Proxy</code> 实例 【proxy】，该【proxy】代理的目标对象的【get】【set】等捕捉器。</li><li>在【get】捕捉器中会执行 <code>track(target, TrackOpTypes.GET, key)</code>，将【activeEffect】添加到目标对象的 <code>key</code> 对应的依赖集合中。</li><li>在【set】捕捉器中执行 <code>trigger</code>：遍历【dep】并执行 <code>effect.scheduler</code> （添加到队列）或 <code>effect.run</code>。</li></ul><blockquote><p>处理数组</p></blockquote><blockquote><p><a href="https://cn.vuejs.org/guide/extras/rendering-mechanism.html#compiler-informed-virtual-dom" target="_blank" rel="noreferrer">带编译时信息的虚拟DOM</a> 标记 vnode 的类型和更新类型</p></blockquote><blockquote><p>异步更新</p></blockquote><p>只使用 Promise</p><blockquote><p>参考</p></blockquote><p><a href="https://juejin.cn/post/7010941033554903076" target="_blank" rel="noreferrer">透响应式原理</a><a href="https://vue3js.cn/global/nextTick.html" target="_blank" rel="noreferrer">博客</a><a href="https://mp.weixin.qq.com/s/l2wCwX2gTaPGt-dq54gZyQ" target="_blank" rel="noreferrer">浅谈Vue3响应式原理与源码解读</a></p>`,130),r=[c];function i(d,y,F,D,u,A){return e(),a("div",null,r)}const f=s(p,[["render",i]]);export{h as __pageData,f as default};
