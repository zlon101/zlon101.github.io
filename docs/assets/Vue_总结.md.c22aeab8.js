import{_ as s,o as a,c as n,V as l}from"./chunks/framework.35aa2305.js";const A=JSON.parse('{"title":"Vue编写风格","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/总结.md","filePath":"Vue/总结.md","lastUpdated":1691037194000}'),p={name:"Vue/总结.md"},o=l(`<h1 id="vue编写风格" tabindex="-1">Vue编写风格 <a class="header-anchor" href="#vue编写风格" aria-label="Permalink to &quot;Vue编写风格&quot;">​</a></h1><ul><li>HTML元素的属性值始终带引号<code>&lt;input type=&#39;text&#39;&gt;</code>; <code>&lt;AppSidebar :style={width:sidebarWidth+&#39;px&#39;}&gt;</code>也是可以的(HTML中没有空格的属性值可以不用引号包裹)</li></ul><h1 id="vue概念解释" tabindex="-1">Vue概念解释 <a class="header-anchor" href="#vue概念解释" aria-label="Permalink to &quot;Vue概念解释&quot;">​</a></h1><p>单文件组件中 <code>&lt;style&gt;</code> 是可选的，<code>&lt;script&gt;</code> 和 <code>&lt;template&gt;</code> 至少要有一个。</p><p>一个理想的 Vue 应用是 prop 向下传递，事件向上传递的</p><p>html 使用双引号，js 使用单引号 DOM 模板使用短横线，其他的()使用大驼峰</p><ul><li><p><a href="https://cloud.tencent.com/developer/article/1448243" target="_blank" rel="noreferrer">vscode + vue</a></p></li><li><p>sourcemap</p><ul><li><a href="https://juejin.cn/post/6844903905684357127" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903905684357127</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html" target="_blank" rel="noreferrer">sourcemap 详解</a></li></ul></li><li><p>webpack\\vue-cli 打包构建的资源到哪里去了 在浏览器dev-tools 中的 source 中查看</p></li><li><p>this.$nextTick 一旦你使用了 <code>keep-alive</code>，那么你就可以访问另外两个生命周期钩子：<code>activated</code> 和 <code>deactivated</code></p></li><li><p>单文件组件</p></li><li><p>DOM模板 能被 html 识别的，以 html 形式编写?</p></li><li><p>字符串模板 以字符串的形式写在选项对象的 template 属性上(全局注册和局部注册组件时)</p></li><li><p>JSX</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">MyComponent</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 在 DOM 模板中, 没有自闭合, 不是匈牙利命名 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-component</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-component</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li></ul><h1 id="响应式原理" tabindex="-1">响应式原理 <a class="header-anchor" href="#响应式原理" aria-label="Permalink to &quot;响应式原理&quot;">​</a></h1><p>Vue2的响应式是通过 Object.defineProperty 拦截数据，将数据（准确的说是对象属性）转换为 getter/setter 的形式，在访问属性时调用 getter函数，在修改属性时调用setter函数。然后利用发布-订阅（观察者模式）模式在数据变化时通知Watcher更新。</p><h1 id="以下数据更新时-vue-不能监测到" tabindex="-1">以下数据更新时 vue 不能监测到 <a class="header-anchor" href="#以下数据更新时-vue-不能监测到" aria-label="Permalink to &quot;以下数据更新时 vue 不能监测到&quot;">​</a></h1><blockquote><p>视图不会更新</p></blockquote><ul><li><p>通过索引修改数组的值</p><ul><li><code>this.idArr[0] = {}</code> 和 <code>this.idMap.list[0] = xxx</code> idMap 是一个对象。</li><li>使用 <code>arr.splice</code> 设置或 <code>this.$set()</code></li></ul></li><li><p>修改数组的 <code>length</code> 属性</p><ul><li>使用 <code>arr.splice</code> 设置或 <code>this.$set()</code></li></ul></li></ul><p>父组件通过 <code>props</code> 传递一个引用类型的值(<code>propsObj</code>)给子组件，子组件将 <code>propsObj</code> 赋值给自身 <code>data</code> 属性。当子组件修改 <code>initVal</code> 时，父组件中的值也会被修改，因为父组件和子组件引用的用一个对象值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">propsObj</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">data</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    initVal</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">propsObj</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span></code></pre></div><h1 id="vue-生命周期-watch-执行顺序-指令生命周期" tabindex="-1">Vue 生命周期 watch 执行顺序 | 指令生命周期 <a class="header-anchor" href="#vue-生命周期-watch-执行顺序-指令生命周期" aria-label="Permalink to &quot;Vue 生命周期 watch 执行顺序 | 指令生命周期&quot;">​</a></h1><blockquote><p>初始渲染</p></blockquote><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li></ul><blockquote><p>props 或 data 更新</p></blockquote><ul><li>watch</li><li>beforUpdate</li><li>updated</li></ul><blockquote><p>watch immediate 情况下初始渲染</p></blockquote><ul><li><p>beforeCreate this 不是 undefined，不能访问当前实例上的属性，可以访问 <code>Vue.prototype</code> 上的属性</p></li><li><p><strong>data 函数</strong> 可以访问 this 及 props 上的属性，props 属性值是父组件执行 beforeMount 钩子时传入子组件的值</p></li><li><p><strong>watch 监听器</strong> 可以访问 <code>this</code></p></li><li><p>created</p></li><li><p>beforeMount</p></li><li><p>mounted</p></li></ul><blockquote><p>父组件和子组件的生命周期执行顺序</p></blockquote><ul><li><p>父组件的<code>beforeCreate</code></p></li><li><p>父组件的<code>created</code></p></li><li><p>父组件的<code>beforeMount</code></p><ul><li>子组件的<code>beforeCreate</code></li><li>子组件的<code>created</code></li><li>子组件的<code>beforeMount</code></li><li>子组件的<code>mounted</code></li></ul></li><li><p>父组件的<code>mounted</code></p></li></ul><h2 id="指令生命周期" tabindex="-1">指令生命周期 <a class="header-anchor" href="#指令生命周期" aria-label="Permalink to &quot;指令生命周期&quot;">​</a></h2><p>bind inserted update componentUpdated unbind</p><h1 id="input-验证" tabindex="-1">input 验证 <a class="header-anchor" href="#input-验证" aria-label="Permalink to &quot;input 验证&quot;">​</a></h1><p>Q: 非数据驱动，给 input 传入固定的值，input 框依然可以输入。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> :value=&quot;text&quot;/&gt;</span></span></code></pre></div><p>A: 使用 <code>element.setAttirbute</code> 不能设置 input 元素的值。使用 input.value = &#39;xx&#39; 可以实现验证和长度限制。</p><h1 id="异步更新dom" tabindex="-1">异步更新DOM <a class="header-anchor" href="#异步更新dom" aria-label="Permalink to &quot;异步更新DOM&quot;">​</a></h1><p>vue观察到数据变化时并不是立即更新DOM，而是开启一个事件队列，缓冲在同一个事件循环中发生的所有数据改变，在缓冲时会去除重复数据。然后在下一个事件循环 tick 中刷新新队列并执行更新。</p><p>vue会根据当前浏览器环境优先使用原生 Promise 和 MutatinObserver。</p><h1 id="动态创建组件" tabindex="-1">动态创建组件 <a class="header-anchor" href="#动态创建组件" aria-label="Permalink to &quot;动态创建组件&quot;">​</a></h1><p>动态创建组件有两种方式 1): <code>new Vue</code>; 2): <code>new Vue.extend(cmp)</code></p><p>单文件组件 <code>export</code> 就是组件选项对象</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import Vue from &#39;vue&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">import router from &#39;@/router&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">import CusDialog from &#39;./userDialog.vue&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">export default function createDialog(title, fields) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const instance = new Vue({</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...CusDialog,</span></span>
<span class="line"><span style="color:#A6ACCD;">    router,</span></span>
<span class="line"><span style="color:#A6ACCD;">    propsData: {</span></span>
<span class="line"><span style="color:#A6ACCD;">      visible: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">      title,</span></span>
<span class="line"><span style="color:#A6ACCD;">      fieldOpts: fields,</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">  }).$mount();</span></span>
<span class="line"><span style="color:#A6ACCD;">  document.body.appendChild(instance.$el);</span></span>
<span class="line"><span style="color:#A6ACCD;">  return instance;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 用Vue.extend 继承 router、store 等，不用再次传递router</span></span>
<span class="line"><span style="color:#A6ACCD;">const extendCmp = Vue.extend(Cmp);</span></span>
<span class="line"><span style="color:#A6ACCD;">const renderCmp = (propsData) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  const instance = new extendCmp({ propsData }).$mount();</span></span>
<span class="line"><span style="color:#A6ACCD;">  document.body.appendChild(instance.$el);</span></span>
<span class="line"><span style="color:#A6ACCD;">  return instance;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">// 销毁</span></span>
<span class="line"><span style="color:#A6ACCD;">instance.$destroy();</span></span>
<span class="line"><span style="color:#A6ACCD;">instance.$el.remove();</span></span></code></pre></div><p><code>$mount(&#39;#app&#39;)</code> 组件会替换 <code>#app</code> 元素本身（<code>outerHtml</code>）</p><blockquote><p>获取插槽实例</p></blockquote><p><code>this.$slots.default[0].componentInstance</code></p><h1 id="内容分发" tabindex="-1">内容分发 <a class="header-anchor" href="#内容分发" aria-label="Permalink to &quot;内容分发&quot;">​</a></h1><blockquote><p>作用域插槽在需要同时封装逻辑、组合视图界面时很有用</p></blockquote><blockquote><p>动态组件 <code>&lt;component&gt;</code> + <code>&lt;slot&gt;</code> 内容分发</p></blockquote><p>表单组件包含了很多字段（input、radio、checkbox）等，在不同场景下使用表单组件，表单的逻辑是一致的，字段绑定、校验、提交，但是UI 布局会不同。</p><ul><li>cus-form.vue</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$slot</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;input v-modal=&quot;name&quot; slot=&quot;name&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;checkbox v-modal=&quot;age&quot;  slot=&quot;age&quot; /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li>使用</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">cus-form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;h1&gt;年龄&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;slot name=&quot;age&quot;&gt;&lt;/slot&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">cus-form</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="插槽透窗" tabindex="-1">插槽透窗 <a class="header-anchor" href="#插槽透窗" aria-label="Permalink to &quot;插槽透窗&quot;">​</a></h2><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">item </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> slots</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#[</span><span style="color:#C792EA;">item</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">props</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> slots </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...this.</span><span style="color:#A6ACCD;">$slots</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...this.</span><span style="color:#A6ACCD;">$scopedSlots</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h1 id="程序化事件监听器" tabindex="-1">程序化事件监听器 <a class="header-anchor" href="#程序化事件监听器" aria-label="Permalink to &quot;程序化事件监听器&quot;">​</a></h1><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">event-name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$once</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 监听生命周期</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hook:beforeDestroy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h1 id="问答" tabindex="-1">问答 <a class="header-anchor" href="#问答" aria-label="Permalink to &quot;问答&quot;">​</a></h1><h2 id="this-emit的返回值是什么" tabindex="-1">this.$emit的返回值是什么？ <a class="header-anchor" href="#this-emit的返回值是什么" aria-label="Permalink to &quot;this.$emit的返回值是什么？&quot;">​</a></h2><p>this.$emit的返回值就是this，如果需要在子组件中向父组件返回其他值，可以通过回调参数实现，即在子组件中this.$emit的实参中传递一个函数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 子组件内部</span></span>
<span class="line"><span style="color:#FFCB6B;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">handleChange</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    	</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callfn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">change</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callfn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 父组件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">change</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callfn)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">触发change事件，父组件中调用handleEventChange事件处理函数</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Event</span><span style="color:#89DDFF;"> :name=&quot;name&quot; @change=&quot;handleEventChange&quot; /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">handleEventChange</span><span style="color:#A6ACCD;">(val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 形参val和callback分别由this.$emit()第二和第三个参数传递</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="相同名称的插槽-具名插槽-是合并还是替换" tabindex="-1">相同名称的插槽(具名插槽)是合并还是替换？ <a class="header-anchor" href="#相同名称的插槽-具名插槽-是合并还是替换" aria-label="Permalink to &quot;相同名称的插槽(具名插槽)是合并还是替换？&quot;">​</a></h2><ul><li>Vue2.5版本：普通插槽合并、作用域插槽替换。</li><li>Vue2.6版本：都是替换。</li></ul><h2 id="数组有哪些方法支持响应式更新-如果不支持怎么办-底层原理如何实现" tabindex="-1">数组有哪些方法支持响应式更新，如果不支持怎么办，底层原理如何实现？ <a class="header-anchor" href="#数组有哪些方法支持响应式更新-如果不支持怎么办-底层原理如何实现" aria-label="Permalink to &quot;数组有哪些方法支持响应式更新，如果不支持怎么办，底层原理如何实现？&quot;">​</a></h2><ul><li>支持：push、pop、shift、unshift、splice、sort、reverse，这些方法会改变原数组。</li><li>不支持：fiter、concat、slice，这些方法不会改变原数组；可以修改整个数组实现响应式更新(将新的数组赋值给原来的数组)。</li><li>原理同样是使用Object.defineProperty对数组方法进行改写</li></ul><h2 id="ajax请求" tabindex="-1">ajax请求 <a class="header-anchor" href="#ajax请求" aria-label="Permalink to &quot;ajax请求&quot;">​</a></h2><ul><li>ajax请求可以放在created和mounted生命周期中，但如果是做同构应用mounted不会在服务端调用，而created是会在服务端调用。</li></ul><h1 id="vue-router" tabindex="-1">Vue-router <a class="header-anchor" href="#vue-router" aria-label="Permalink to &quot;Vue-router&quot;">​</a></h1><p><code>push</code> 和 <code>replace</code> 的 onComplete 和 onAbort 回调参数，这些回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用。在 3.1.0+，可以省略第二个和第三个参数，此时如果支持 Promise，router.push 或 router.replace 将返回一个 Promise。</p><ul><li><p>组件跳转到其他组件，触发 onComplete 回调</p></li><li><p>组件跳到自己，不带参数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件2：onComplete回调</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件2,自我跳转：onAbort回调</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 会执行</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p>组件跳转到自己，带参数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">}},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件2：onComplete回调</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 不会执行</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件2,自我跳转：onAbort回调</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 不会执行</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>onComplete 和 onAbort 都不会执行，但是 beforeRouteUpdate 会执行。</p></li></ul><hr><h1 id="vue组件库" tabindex="-1">Vue组件库 <a class="header-anchor" href="#vue组件库" aria-label="Permalink to &quot;Vue组件库&quot;">​</a></h1><ul><li><a href="https://primefaces.org/primevue/dialog" target="_blank" rel="noreferrer">PrimeBUE</a></li><li><a href="https://element-plus.gitee.io/zh-CN/component/dialog.html" target="_blank" rel="noreferrer">Element-plus</a></li><li><a href="https://2x.antdv.com/components/modal-cn" target="_blank" rel="noreferrer">adt-design-vue</a></li></ul><h1 id="vue-use的作用" tabindex="-1">Vue.use的作用 <a class="header-anchor" href="#vue-use的作用" aria-label="Permalink to &quot;Vue.use的作用&quot;">​</a></h1><p>Vue.use(mintui)做的就是注册所有的全局组件(webpack require.context)，并在Vue.prototype添加一些属性，这样在组件内就可以使用this.xx</p><ul><li><p>自定义插件，使用Vue.use()安装，如安装axios</p><p>// installer.js</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Installer</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 必须要有一个install属性</span></span>
<span class="line"><span style="color:#A6ACCD;">Installer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Vue</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 1. 注册全局组件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 2. 添加属性</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Vue.protype.$log = function() {</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//     console.log(&#39;hahaahhahaah&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// this.$log = &#39;abxadksadas&#39; 子类对象可以修改父类的属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">log</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我们自己插件的log函数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 给原型定义属性的获取和设置，设置:见鬼去吧，获取就给你</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$log</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 设置 $log属性时的行为 || 不给，不能设置</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newV</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">你做梦</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// log = newV;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;">     </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 获取方式</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><h1 id="vue单页面seo优化" tabindex="-1">Vue单页面SEO优化 <a class="header-anchor" href="#vue单页面seo优化" aria-label="Permalink to &quot;Vue单页面SEO优化&quot;">​</a></h1><ul><li>服务端渲染 SSR ：Nuxt.js</li><li>页面预渲染 <ul><li>在页面中先预渲染部分静态内容，不用JS注入</li><li>使用插件：vue-cli-plugin-prerender-spa 或 prerender-spa-plugin</li></ul></li></ul><h1 id="预渲染" tabindex="-1">预渲染 <a class="header-anchor" href="#预渲染" aria-label="Permalink to &quot;预渲染&quot;">​</a></h1><p>单页面(SPA) 应用的 SEO 优化有服务端渲染(SSR) &amp; 页面预渲染两种方法。</p><ul><li>预渲染的使用场景更多是简单的<strong>静态页面</strong>，加快页面的<strong>加载速度</strong>，并且侵入性更小，在已上线的项目稍加改动也可以轻松引入预渲染机制。</li><li>服务端渲染适用于复杂、较大型、与服务端交互频繁的功能型网站，比如电商网站。SSR方案则需要将整个项目结构推翻。</li><li>两则的区别在于渲染的时机不同：<code>prerender-spa-plugin</code>是在打包过程中渲染，注定了其只能渲染静态路由，而<code>prerender</code> 是在请求时渲染，所以可以渲染动态的路由。</li></ul><h2 id="vue-预渲染实现" tabindex="-1">vue 预渲染实现 <a class="header-anchor" href="#vue-预渲染实现" aria-label="Permalink to &quot;vue 预渲染实现&quot;">​</a></h2><blockquote><p>插件配置</p></blockquote><p>prerender-spa-plugin &amp; vue-meta-info</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vue.config.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这三项一定要有，因为下面configureWebpack中用到了</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> PrerenderSPAPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prerender-spa-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Renderer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> PrerenderSPAPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PuppeteerRenderer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 预渲染关键配置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">configureWebpack</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      plugins</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">PrerenderSPAPlugin</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 生成文件的路径，也可以与webpakc打包的一致。</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 下面这句话非常重要！！！</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 这个目录只能有一级，如果目录层次大于一级，在生成的时候不会有任何错误提示，在预渲染的时候只会卡着不动。</span></span>
<span class="line"><span style="color:#F07178;">          staticDir</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 对应自己的路由文件，如果有参数需要写具体参数，比如/a/:id需要写/a/123456</span></span>
<span class="line"><span style="color:#F07178;">          routes</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 这个很重要，如果没有配置这段，也不会进行预编译</span></span>
<span class="line"><span style="color:#F07178;">          renderer</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Renderer</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            inject</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              foo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            headless</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 在 main.js 中 document.dispatchEvent(new Event(&#39;render-event&#39;))，两者的事件名称要对应上。</span></span>
<span class="line"><span style="color:#F07178;">            renderAfterDocumentEvent</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">render-event</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      ]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    router</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    store</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">h</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(App)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 添加mounted，不然不会执行预编译</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatchEvent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Event</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">render-event</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p>服务端配置</p></blockquote><p>History 模式需要后台配置支持，最简单的是通过 nginx 配置 try_files 指令。</p><blockquote><p>vue-meta-info</p></blockquote><p>组件内使用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  export default </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    metaInfo: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">My Example App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// set a title</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// set meta</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">keyWords</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">My Example App</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">      link: [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// set link</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">rel</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">asstes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">href</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://assets-cdn.github.com/</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h1 id="用作鉴权的函数式组件" tabindex="-1">用作鉴权的函数式组件 <a class="header-anchor" href="#用作鉴权的函数式组件" aria-label="Permalink to &quot;用作鉴权的函数式组件&quot;">​</a></h1><p>Authorized.vue 鉴权组件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> check </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> from &quot;../utils/auth&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">export default </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  functional: </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  props: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">authority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(h</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> context) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    const </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scopedSlots</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> = context;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// check 用来判断是否授权</span></span>
<span class="line"><span style="color:#A6ACCD;">    return </span><span style="color:#F07178;">check</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">props.authority</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> ? scopedSlots.</span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li>main.js 注册</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Authorized </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Authorized.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Authorized</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Authorized)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>使用</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Authorized</span><span style="color:#89DDFF;"> :authority=&quot;[&#39;admin&#39;]&quot;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;SettingDrawer /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">Authorized</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果传递的 authority 通过 check, 则 &lt;SettingDdrawer&gt; 组件会显示, 否则不会显示;</span></span></code></pre></div><h2 id="权限指令" tabindex="-1">权限指令 <a class="header-anchor" href="#权限指令" aria-label="Permalink to &quot;权限指令&quot;">​</a></h2><p>指令 direction.js</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">check</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../utils/auth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Vue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    inserted</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">binding</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">check</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">binding</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> install </span><span style="color:#89DDFF;">};</span></span></code></pre></div><ul><li>注册指令</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Auth </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">direction.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(Auth)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>使用指令</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">comp</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-auth</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[&#39;admin&#39;]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre></div><h2 id="jsx-使用" tabindex="-1">JSX 使用 <a class="header-anchor" href="#jsx-使用" aria-label="Permalink to &quot;JSX  使用&quot;">​</a></h2><blockquote><p>@vue/cli-plugin-babel/preset</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">presets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vue/cli-plugin-babel/preset</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><blockquote><p><a href="https://github.com/vuejs/jsx" target="_blank" rel="noreferrer">Babel Preset JSX</a></p></blockquote><h1 id="vue源码" tabindex="-1">Vue源码 <a class="header-anchor" href="#vue源码" aria-label="Permalink to &quot;Vue源码&quot;">​</a></h1><ul><li>阅读源码哈<a href="https://github.com/vueComponent/ant-design-vue" target="_blank" rel="noreferrer">https://github.com/vueComponent/ant-design-vue</a> vue源码可以推荐两个： <a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noreferrer">https://ustbhuangyi.github.io/vue-analysis/</a><a href="https://github.com/answershuto/learnVue" target="_blank" rel="noreferrer">https://github.com/answershuto/learnVue</a></li></ul><h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h1><blockquote><p><a href="https://juejin.cn/post/6844904191677186061" target="_blank" rel="noreferrer">vue 函数式组件</a></p></blockquote><blockquote><p><code>$nextTick</code> 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 <code>$nextTick</code>，则可以在回调中获取更新后的 DOM；</p></blockquote>`,107),e=[o];function t(c,r,D,F,y,i){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
