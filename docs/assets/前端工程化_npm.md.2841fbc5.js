import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.cbe154cb.js";const m=JSON.parse('{"title":"npm registry","description":"","frontmatter":{},"headers":[],"relativePath":"前端工程化/npm.md","filePath":"前端工程化/npm.md"}'),l={name:"前端工程化/npm.md"},o=e(`<blockquote><p><a href="https://docs.npmjs.com/" target="_blank" rel="noreferrer">npm文档</a></p><p><a href="https://github.com/features/packages" target="_blank" rel="noreferrer">github package</a> <a href="https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages" target="_blank" rel="noreferrer">GitHub Packages</a></p></blockquote><blockquote><p>npm symbolic link</p></blockquote><blockquote><p><a href="https://docs.npmjs.com/about-private-packages" target="_blank" rel="noreferrer">private package</a></p></blockquote><blockquote><p>package.json file 字段？</p><p><a href="https://github.com/SunshowerC/blog/issues/8" target="_blank" rel="noreferrer">package.json中的main | module | browser</a></p></blockquote><h1 id="npm-registry" tabindex="-1"><a href="https://docs.npmjs.com/cli/v8/using-npm/registry" target="_blank" rel="noreferrer">npm registry</a> <a class="header-anchor" href="#npm-registry" aria-label="Permalink to &quot;[npm registry](https://docs.npmjs.com/cli/v8/using-npm/registry)&quot;">​</a></h1><blockquote><p>scope</p></blockquote><p>将一个scope 与 npm registry 关联，一旦一个作用域与一个注册表相关联，任何带有该作用域的软件包的npm安装将从该注册表请求软件包。任何包含该范围的软件包名称的npm发布都会被发布到该注册表。<a href="https://docs.npmjs.com/cli/v8/using-npm/scope" target="_blank" rel="noreferrer">参考</a></p><p>Each npm user/organization has their own scope, and only you can add packages in your scope.</p><blockquote><p>某个 scope 与 registry</p></blockquote><p>混合使用来自 npm registry 和私有 registry 的包</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">login</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--registry=http://reg.example.com</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--scope=@myco</span></span>
<span class="line"><span style="color:#FFCB6B;">或者</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@myco:registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://reg.example.com</span></span></code></pre></div><h2 id="发布包" tabindex="-1"><a href="https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages" target="_blank" rel="noreferrer">发布包</a> <a class="header-anchor" href="#发布包" aria-label="Permalink to &quot;[发布包](https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages)&quot;">​</a></h2><p>npm 官网注册账号</p><ol><li>使用<code>npm login</code> 和 npm 账号在本地登录npm</li><li>带 <code>scope</code> 的包名必须用 organization name 作前缀，每个npm用户/组织都有自己的范围，而且只有你能在你的范围内添加软件包。这意味着你不必担心有人抢先使用你的软件包名称。因此，这也是一个为组织发出官方软件包信号的好方法。</li></ol><h1 id="版本管理" tabindex="-1">版本管理 <a class="header-anchor" href="#版本管理" aria-label="Permalink to &quot;版本管理&quot;">​</a></h1><ul><li><code>^2.2.0</code>: 2.2.0 到 2.x.x 主版本号不变</li><li><code>~2.2.0</code>: 2.2.0 到 2.2.x 次版本号不变</li><li><code>&gt;2.2.0</code>: 2.2.0 到 最新版本</li></ul><blockquote><p>锁定node版本</p></blockquote><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">engines</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">16.13.2 || 16.16.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// .npmrc</span></span>
<span class="line"><span style="color:#A6ACCD;">engine-strict = </span><span style="color:#89DDFF;">true</span></span></code></pre></div><blockquote><p>锁定包管理器</p></blockquote><p>利用 only-allow 工具包、npm scripts 快速实现锁定</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">only-allow</span></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">&quot;scripts&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">&quot;preinstall&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">only-allow npm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><blockquote><p><a href="https://semver.npmjs.com/" target="_blank" rel="noreferrer">包版本查询</a></p></blockquote><h1 id="npm-依赖" tabindex="-1">npm 依赖 <a class="header-anchor" href="#npm-依赖" aria-label="Permalink to &quot;npm 依赖&quot;">​</a></h1><p>在安装一个 package，而此 package 要打包到生产环境 bundle 中时，你应该使用 <code>npm install --save</code>。如果你在安装一个用于开发环境的 package 时（例如，linter, 测试库等），你应该使用 <code>npm install --save-dev</code>。</p><blockquote><p>dependencies、devDependencies 和 peerDependencies 的区别</p></blockquote><p>当一个 package(pkg-xx) 提供给其他人使用时，这个 package 的 package.json 的 dependencies、devDependencies 和 peerDependencies 配置决定了 <code>npm i pkg-xx</code> 时哪些依赖包被安装</p><ul><li>dependencies: <code>npm i pkg-xx</code> 时会安装对应的依赖包</li><li>devDependencies：不会安装</li><li>peerDependencies： <ul><li>npm v8.x.x 会自动安装 <code>peerDependencies</code> 依赖，之前版本的 npm 不会自动安装</li><li><code>peerDependencies</code> 和 <code>devDependencies</code> 的区别：devDependencies 表示开发依赖，源码中应该要引用该依赖(<code>import</code> 或 <code>require</code>)，peerDependencies 源码中不用引用</li></ul></li></ul><h2 id="依赖冲突" tabindex="-1">依赖冲突 <a class="header-anchor" href="#依赖冲突" aria-label="Permalink to &quot;依赖冲突&quot;">​</a></h2><p>项目 project 中依赖组件 B、C 两个组件，组件 B、C 的依赖项中都有组件 A</p><ul><li><p>B 中对 A 的版本指定为 @latest，C 对 A 的版本指定为 C@1.0.0，在项目 project 中执行 npm install 时，安装的组件 C 的版本是 1.0.0</p></li><li><p>B 中对 A 的版本指定为 @latest，C 对 A 的版本指定为 C&gt;=1.0.0，在项目 project 中执行 npm install 时，安装的组件 C 的 latest 最新版本</p></li><li><p>B 中对 A 的版本指定为 @latest，C 对 A 的版本指定为 C@1.0.0，在项目 project 的 package.json 中指定组件 C 的版本为以下情况时，执行 npm install 安装的组件 C 的版本分别对应：</p><ul><li>package.json 中指定为 @latest，安装后的版本为 latest</li><li>package.json 中指定为 &gt;=1.0.0，安装后版本为 latest</li><li>package.json 中指定为 @2.2.0，安装后版本为 2.2.0</li></ul></li></ul><h1 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h1><ul><li>查看全局包: npm list -g --depth 0sdps</li><li>安装全局包: npm i -g xx</li><li>删除全局包: npm uninstall -g vue</li><li>创建软链接: <a href="https://docs.npmjs.com/cli/v8/commands/npm-link" target="_blank" rel="noreferrer">npm link</a> <a href="https://juejin.cn/post/6844903960805900295" target="_blank" rel="noreferrer">解读</a> <a href="https://www.npmjs.com/package/link" target="_blank" rel="noreferrer">npx link</a></li></ul><h1 id="常用包" tabindex="-1">常用包 <a class="header-anchor" href="#常用包" aria-label="Permalink to &quot;常用包&quot;">​</a></h1><ul><li>npm 源管理: nrm</li><li>n nvm nvm-windows: <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noreferrer">一台电脑上管理多个node版本</a></li><li>运行 npm 包二进制: npx</li></ul><h1 id="npm-script" tabindex="-1">npm script <a class="header-anchor" href="#npm-script" aria-label="Permalink to &quot;npm script&quot;">​</a></h1><p><a href="https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noreferrer">npm script 使用指南</a><a href="https://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="noreferrer">Node.js 命令行程序开发教程</a></p><blockquote><p>利用Windows软连接共用一个node_modules</p></blockquote><p>多个项目共用一个node_modules</p><p><code>mklink /d &lt;项目路径&gt;\\node_modules &lt;公共node_modules路径&gt;</code></p><blockquote><p>npm install</p></blockquote><p>npm install 失败</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install --force --legacy-peer-deps --ignore-scripts</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i -g nrm open@8.4.2 --save</span></span></code></pre></div><blockquote><p>npm package.json script</p></blockquote><ul><li><p>process.argv &lt;== <code>npm run xx -- -val=xx</code></p></li><li><p>p<wbr>rocess.env.npm_config_xxx &lt;== <code>npm run xx -val=xx</code></p></li><li><p>p<wbr>rocess.env.npm_package_config_xx &lt;=== package.json 中配置 <code>{ config: { xx: &#39;12&#39; } }</code></p></li><li><p><code>-</code> 或 <code>--</code> 开头会作为参数传递给 npm ，通过 <code>p<wbr>rocess.env.npm_config_xx</code> 读取</p><ul><li>例如<code>npm run proxy --help</code>， <code>--help</code> 传递给 npm</li></ul></li><li><p><code>npm run script -- -name</code>: 中间的 <code>--</code> 会停止将之后的字符解析为参数，不在传递给 npm，通过 <code>process.argv</code> 读取</p></li></ul><blockquote><p>exampel</p></blockquote><ul><li>bash版本</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">npm</span><span style="color:#C3E88D;"> config get registry</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#A6ACCD;"> $registry </span><span style="color:#89DDFF;">=~</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://registry.x.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]];</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@xscope:registry</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://abc.com/npm/</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span></code></pre></div><ul><li>node版本</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> exec </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">child_process</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">npm config get registry</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">stdout</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">stderr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">stdout</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">registry</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">x</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">com</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exec</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">  npm config set @xscope:registry https://abc.com/npm/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p>三方库</p></blockquote><ul><li><a href="https://github.com/google/zx" target="_blank" rel="noreferrer">google/zx</a> : 用 JS 编写 Shell 脚本</li><li>cross-env: 环境变量</li></ul><hr><blockquote><p><code>&quot;src/**/*&quot;</code>：<code>**</code> 表示一层目录或多层目录，<code>*</code> 表示任意文件名</p></blockquote>`,53),p=[o];function t(c,r,i,y,d,D){return n(),a("div",null,p)}const u=s(l,[["render",t]]);export{m as __pageData,u as default};
