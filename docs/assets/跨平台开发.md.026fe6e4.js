import{_ as a,o as e,c as t,Q as i}from"./chunks/framework.cbe154cb.js";const r="/assets/uni-app.7292dac5.png",q=JSON.parse('{"title":"各种运行环境","description":"","frontmatter":{},"headers":[],"relativePath":"跨平台开发.md","filePath":"跨平台开发.md"}'),l={name:"跨平台开发.md"},p=i('<h1 id="各种运行环境" tabindex="-1">各种运行环境 <a class="header-anchor" href="#各种运行环境" aria-label="Permalink to &quot;各种运行环境&quot;">​</a></h1><p>不同运行环境下的 JavaScript</p><ul><li>浏览器：ECMAScript + DOM + BOM</li><li>NodeJS：ECMAScript + Native(fs、http) + NPM</li><li>小程序：ECMAScript + 小程序框架 + 小程序API</li></ul><h2 id="ui-渲染技术" tabindex="-1">UI 渲染技术 <a class="header-anchor" href="#ui-渲染技术" aria-label="Permalink to &quot;UI 渲染技术&quot;">​</a></h2><p>一般来说，渲染界面的技术有三种：(1)：纯客户端原生渲染；(2)：纯 web 技术渲染；(3)：混合开发 Hybrid 技术。</p><p>比如微信 JS-SDK 使用浏览器内核渲染，React Native 在渲染底层是用客户端原生渲染的。</p><h1 id="uni-app" tabindex="-1">uni-app <a class="header-anchor" href="#uni-app" aria-label="Permalink to &quot;uni-app&quot;">​</a></h1><img src="'+r+'" alt="image-20230316145552108" style="zoom:50%;"><h2 id="环境" tabindex="-1">环境 <a class="header-anchor" href="#环境" aria-label="Permalink to &quot;环境&quot;">​</a></h2><ul><li>IDE：HBuilderX</li><li>兼容平台：微信/支付宝/百度/头条/QQ/快手/钉钉/淘宝）小程序、快应用、H5、Android App、iOS App</li></ul><blockquote><p>编译器和运行时</p></blockquote><ul><li><p>uni-app分编译器和运行时（runtime）。uni-app能实现一套代码、多端运行，是通过这2部分配合完成的。</p></li><li><p>runtime不是运行在电脑开发环境，而是运行在真正的终端上。</p></li><li><p>编译器内置在HBuilderX工具中，也可以使用独立的cli版。编译器将开发者的代码进行编译，编译的输出物由各个终端的runtime进行解析，每个平台（Web、Android App、iOS App、各家小程序）都有各自的runtime。</p></li><li><p><a href="https://zh.uniapp.dcloud.io/tutorial/#%E8%BF%90%E8%A1%8C%E6%97%B6-runtime" target="_blank" rel="noreferrer">各端运行时</a></p></li></ul><blockquote><p>JS 引擎 &amp; 渲染引擎</p></blockquote><p>在web平台，逻辑层（js）和渲染层（html、css），都运行在统一的webview里。</p><p>但在小程序和app端，逻辑层和渲染层被分离了。</p><p>不管小程序还是app，逻辑层都独立为了单独的js引擎，渲染层仍然是webview（app上也支持纯原生渲染）。</p><p>所以注意小程序和app的逻辑层都不支持浏览器专用的window、dom等API。app只能在渲染层操作window、dom，即<a href="https://zh.uniapp.dcloud.io/tutorial/renderjs" target="_blank" rel="noreferrer">renderjs</a>。</p><p>关于逻辑层和渲染层分离带来的注意事项，请<a href="https://uniapp.dcloud.net.cn/tutorial/performance.html" target="_blank" rel="noreferrer">详读</a></p><blockquote><p>UI</p></blockquote><p>uni-app 有 vue 页面和 nvue 页面。vue 页面是 webview 渲染的，nvue 只针对打包为 App 端并且app 端的 nvue 页面是原生渲染的。</p><p>为支持跨平台，框架建议使用 Flex 布局</p><blockquote><p>JS</p></blockquote><p>uni-app的js代码，h5端运行于浏览器中。非h5端（包含小程序和App），Android平台运行在v8引擎中，iOS平台运行在iOS自带的jscore引擎中，都没有运行在浏览器或 webview里。</p><p>非H5端，虽然不支持window、document、navigator等浏览器的js API，但也支持标准ECMAScript。</p><blockquote><p>vue</p></blockquote><ul><li>uni-app 新增了应用和页面的生命周期</li><li>发布到 H5 时支持所有vue的语法</li></ul><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ol><li>组件、api 与微信小程序一致</li><li>兼容 weex 原生渲染</li><li>内嵌 mpvue 框架</li><li>支持通过 npm 安装第三方包</li><li>支持微信小程序自定义组件及 SDK</li><li>兼容 mpvue 组件及项目</li><li>App 端支持和原生混合编码，还支持原生渲染的<a href="https://zh.uniapp.dcloud.io/tutorial/nvue-outline" target="_blank" rel="noreferrer">nvue</a>，以及可以编译为kotlin和swift的<a href="https://zh.uniapp.dcloud.io/tutorial/syntax-uts" target="_blank" rel="noreferrer">uts</a>。</li></ol><p>在跨端的同时，通过条件编译+平台特有API调用，可以优雅的为某平台写个性化代码，调用专有能力而不影响其他平台。</p><p>支持原生代码混写和原生sdk集成。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><p>vue、js、css、native vue</p><p>什么是tabBar 页面</p><blockquote><p>页面间通信</p></blockquote><p>uni.$emit、 uni.$on 、 uni.$once 、uni.$off 触发的事件都是 App 全局级别的，跨任意组件，页面，nvue，vue 等</p><ul><li>uni.$emit(eventName,OBJECT)</li><li>uni.$once(eventName,callback)</li><li>uni.$off：移除监听器</li></ul><h3 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h3><p>uni</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>与普通 web 开发不同的地方：</p><ol><li>像素单位由 px 改为 upx</li><li><code>background-image</code> 只能使用公网的图像</li><li></li></ol><h2 id="uts" tabindex="-1">uts <a class="header-anchor" href="#uts" aria-label="Permalink to &quot;uts&quot;">​</a></h2><p>uni type script，强类型编程语言</p><h1 id="react-native" tabindex="-1">React Native <a class="header-anchor" href="#react-native" aria-label="Permalink to &quot;React Native&quot;">​</a></h1><p>跨 Android 和 IOS App 开发</p><p>使用用 Web 相关技术来编写，同样是利用了 JavaScript 解释执行的特性，但 RN 在渲染底层是用客户端原生渲染的。</p><p>react-native就是基于Virtual DOM渲染出原生控件。</p><h1 id="flutter" tabindex="-1">Flutter <a class="header-anchor" href="#flutter" aria-label="Permalink to &quot;Flutter&quot;">​</a></h1><h1 id="tauri" tabindex="-1"><a href="https://tauri.app/" target="_blank" rel="noreferrer">Tauri</a> <a class="header-anchor" href="#tauri" aria-label="Permalink to &quot;[Tauri](https://tauri.app/)&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s/sMVS6xTv6qrcQp1o7uZOjQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/sMVS6xTv6qrcQp1o7uZOjQ</a></p><h1 id="weex" tabindex="-1">Weex <a class="header-anchor" href="#weex" aria-label="Permalink to &quot;Weex&quot;">​</a></h1><p>vue 技术</p><h1 id="taro" tabindex="-1">taro <a class="header-anchor" href="#taro" aria-label="Permalink to &quot;taro&quot;">​</a></h1><p>京东</p><h1 id="donut" tabindex="-1"><a href="https://dev.weixin.qq.com/docs/" target="_blank" rel="noreferrer">Donut</a> <a class="header-anchor" href="#donut" aria-label="Permalink to &quot;[Donut](https://dev.weixin.qq.com/docs/)&quot;">​</a></h1><p>Donut 多端框架是支持使用小程序原生语法开发移动应用的框架，开发者可以一次编码，分别编译为小程序和 Android 以及 iOS 应用，实现多端开发</p>',56),o=[p];function n(u,h,c,d,s,b){return e(),t("div",null,o)}const f=a(l,[["render",n]]);export{q as __pageData,f as default};
