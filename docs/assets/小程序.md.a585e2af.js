import{_ as s,o as a,c as l,V as n}from"./chunks/framework.33d73f2c.js";const p="/assets/通信模型.f52459a6.png",C=JSON.parse('{"title":"索引","description":"","frontmatter":{},"headers":[],"relativePath":"小程序.md","filePath":"小程序.md","lastUpdated":1691037194000}'),o={name:"小程序.md"},e=n('<h1 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h1><blockquote><p><a href="https://developers.weixin.qq.com/doc/" target="_blank" rel="noreferrer">微信官方文档</a><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0008aeea9a8978ab0086a685851c0a" target="_blank" rel="noreferrer">小程序开发指南</a></p></blockquote><p>小程序的逻辑层和渲染层是分开的，渲染线程和 JS 现成分别运行在不同的线程中，因此两者不互斥。小程序内置的组件、API等都封装在小程序基础库中。渲染层注入的称为 WebView 基础库，逻辑层注入的是 AppService 基础库，而【基础库内置在微信客户端中】。</p><ul><li><p>逻辑层运行在 JSCore 中，并没有一个完整浏览器对象，因而缺少相关的DOM API和BOM API。这一区别导致了前端开发非常熟悉的一些库，例如 jQuery、 Zepto 等，在小程序中是无法运行的。同时 JSCore 的环境同 NodeJS 环境也是不尽相同，所以一些 NPM 的包在小程序中也是无法运行的。</p></li><li><p>渲染层的界面使用了WebView 进行渲染，一个小程序存在多个界面，所以渲染层存在多个WebView线程</p></li></ul><p>小程序开发过程中需要面对的是两大操作系统 iOS 和 Android 的微信客户端，以及用于辅助开发的小程序开发者工具，小程序中三大运行环境也是有所区别的。</p><p><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0000286f908988db00866b85f5640a" target="_blank" rel="noreferrer">渲染层与逻辑层</a></p><h1 id="运行环境" tabindex="-1"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/framework.html#%E6%B8%B2%E6%9F%93%E5%B1%82%E5%92%8C%E9%80%BB%E8%BE%91%E5%B1%82" target="_blank" rel="noreferrer">运行环境</a> <a class="header-anchor" href="#运行环境" aria-label="Permalink to &quot;[运行环境](https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/framework.html#%E6%B8%B2%E6%9F%93%E5%B1%82%E5%92%8C%E9%80%BB%E8%BE%91%E5%B1%82)&quot;">​</a></h1><p>小程序的运行环境分成[【渲染层】和【逻辑层】，其中 WXML 模板和 WXSS 样式工作在渲染层，JS 脚本工作在逻辑层。</p><p>整个小程序框架系统分为两部分：逻辑层（App Service）和 视图层（View）。小程序提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统。将逻辑层的数据反映成视图，同时将视图层的事件发送给逻辑层。</p><img src="'+p+`" alt="通信模型" style="zoom:25%;"><p>客户端系统有JavaScript 的解释引擎（在iOS下是用内置的 JavaScriptCore框架，在安卓则是用腾讯x5内核提供的JsCore环境）</p><p>小程序的JS脚本是运行在JsCore的线程里，小程序的每个页面各自有一个WebView线程进行渲染，所以小程序切换页面时，小程序逻辑层的JS脚本运行上下文依旧在同一个JsCore线程中。</p><p>所有页面的脚本逻辑都跑在同一个JsCore线程，页面使用setTimeout或者setInterval的定时器，然后跳转到其他页面时，这些定时器并没有被清除，需要开发者自己在页面离开的时候进行清理。</p><h2 id="应用实例" tabindex="-1">应用实例 <a class="header-anchor" href="#应用实例" aria-label="Permalink to &quot;应用实例&quot;">​</a></h2><p>整个小程序只有一个 App 实例，是全部页面共享的。</p><p>每个小程序都需要在 app.js 中调用 App 方法注册小程序实例，绑定生命周期回调函数、错误监听和页面不存在监听函数等。</p><p>获取实例：<code>const appInstance = getApp()</code></p><h2 id="视图层" tabindex="-1">视图层 <a class="header-anchor" href="#视图层" aria-label="Permalink to &quot;视图层&quot;">​</a></h2><p>框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。</p><p>将逻辑层的数据反映成视图，同时将视图层的事件发送给逻辑层。</p><p>WXML(WeiXin Markup language) 用于描述页面的结构。</p><p>WXS(WeiXin Script) 是小程序的一套脚本语言，结合 WXML 可以构建出页面的结构。</p><p>WXSS(WeiXin Style Sheet) 用于描述页面的样式。</p><p>因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。并且WXML 要求标签必须是严格闭合的。 WXML 属性名区分大小写。</p><blockquote><p>数据绑定</p></blockquote><p>数据来自于页面Page构造器的data字段，例如绑定属性值</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">text</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-test</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{test}}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> hello world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>没有被定义的变量的或者是被设置为 undefined 的变量不会被同步到 wxml 中。</p><p>使用 <code>ths.setData</code> 修改状态并自动更新到渲染层。</p><blockquote><p>动态渲染 | 模板</p></blockquote><p>类似与动态组件</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">odd</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> odd </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">even</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> even </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">block</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">wx</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ [1, 2, 3, 4, 5] }}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{item % 2 == 0 ? &#39;even&#39; : &#39;odd&#39;}}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">block</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><blockquote><p>导入</p></blockquote><p>import 和 include</p><blockquote><p>尺寸单位</p></blockquote><p>rpx（responsive pixel）响应式单位，可以根据屏幕宽度进行自适应。</p><p>小程序编译后，rpx会做一次px换算。换算是以375个物理像素为基准，也就是在一个宽度为375物理像素的屏幕下，1rpx = 1px。</p><p>规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p><h1 id="页面" tabindex="-1">页面 <a class="header-anchor" href="#页面" aria-label="Permalink to &quot;页面&quot;">​</a></h1><p>一个页面的源码由 wxml、wxss、js、json配置组件，wxml 和 js 必须有。</p><p>每一个小程序页面是由同路径下同名的四个不同后缀文件的组成，如：index.js、index.wxml、index.wxss、index.json。.js后缀的文件是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件，.wxml后缀的文件是页面结构文件。</p><p>在小程序代码调用Page构造器的时候，小程序基础库会记录页面的基础信息，如初始数据（data）、方法等。需要注意的是，如果一个页面被多次创建，并不会使得这个页面所在的JS文件被执行多次，而仅仅是根据初始数据多生成了一个页面实例（this），在页面JS文件中直接定义的变量，在所有这个页面的实例间是共享的。</p><h2 id="页面导航" tabindex="-1">页面导航 <a class="header-anchor" href="#页面导航" aria-label="Permalink to &quot;页面导航&quot;">​</a></h2><ul><li>navigateTo, redirectTo 只能打开非 tabBar 页面。</li><li>switchTab 只能打开 tabBar 页面。</li><li>reLaunch 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li>调用页面路由带的参数可以在目标页面的onLoad中获取。</li></ul><h2 id="页面生命周期" tabindex="-1"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html" target="_blank" rel="noreferrer">页面生命周期</a> <a class="header-anchor" href="#页面生命周期" aria-label="Permalink to &quot;[页面生命周期](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html)&quot;">​</a></h2><p><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0004eec99acc808b00861a5bd5280a" target="_blank" rel="noreferrer">路由变化和切换tab时页面的生命周期调用</a></p><h2 id="页面的用户行为" tabindex="-1">页面的用户行为 <a class="header-anchor" href="#页面的用户行为" aria-label="Permalink to &quot;页面的用户行为&quot;">​</a></h2><p>小程序宿主环境提供了四个和页面相关的用户行为回调：</p><ol><li><p>下拉刷新 onPullDownRefresh 监听用户下拉刷新事件，需要在app.json的window选项中或页面配置page.json中设置enablePullDownRefresh为true。当处理完数据刷新后，wx.stopPullDownRefresh可以停止当前页面的下拉刷新。</p></li><li><p>上拉触底 onReachBottom 监听用户上拉触底事件。可以在app.json的window选项中或页面配置page.json中设置触发距离onReachBottomDistance。在触发距离内滑动期间，本事件只会被触发一次。</p></li><li><p>页面滚动 onPageScroll 监听用户滑动页面事件，参数为 Object，包含 scrollTop 字段，表示页面在垂直方向已滚动的距离（单位px）。</p></li><li><p>用户转发 onShareAppMessage 只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮，在用户点击转发按钮的时候会调用，此事件需要return一个Object，包含title和path两个字段，用于自定义转发内容。</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// page.js</span></span>
<span class="line"><span style="color:#82AAFF;">Page</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">onShareAppMessage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   title</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">自定义转发标题</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">   path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/page/user?id=123</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="tabbar页" tabindex="-1">Tabbar页 <a class="header-anchor" href="#tabbar页" aria-label="Permalink to &quot;Tabbar页&quot;">​</a></h2><p>xxx</p><h1 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">​</a></h1><blockquote><p>页面的状态管理</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">Page</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">init data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">array</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onLoad</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      k</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newVal</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>setData 是异步的，可以接受一个回调函数作为第2给参数，在这次setData对界面渲染完毕后执行回调函数。</p><p>setData 的第 1 个参数中的属性可以接受【数据路径的形式】，比如 <code>this.setData({&quot;d[0]&quot;: 100})</code> 、<code>this.setData({&quot;d[1].text&quot;: &#39;Goodbye&#39;});</code></p><p>视图层可以在开发者调用setData后执行界面更新。在数据传输时，逻辑层会执行一次JSON.stringify来去除掉setData数据中不可传输的部分，之后将数据发送给视图层。同时，逻辑层还会将setData所设置的数据字段与data合并，使开发者可以用this.data读取到变更后的数据。</p><p><strong>注意</strong></p><ol><li><p>不能直接用 <code>this.data.xx = xx</code> 修改数据</p></li><li><p style="color:red;">不要把data中的任意一项的value设为undefined，否则可能会有引起一些不可预料的bug</p></li><li><p>不要过于频繁调用setData，应考虑将多次setData合并成一次setData调用</p></li><li><p>如果有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串，则不应使用setData来设置这些数据</p></li><li><p>与界面渲染无关的数据最好不要设置在data中，可以考虑设置在page对象的其他字段下。</p></li></ol><h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><p>视图层和逻辑层通过事件通信</p><p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡</p><p>组件自定义事件，如无特殊声明都是非冒泡事件</p><blockquote><p>绑定事件监听函数的方式</p></blockquote><ol><li>bind</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">bindtap</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handleTap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Click here!</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="2"><li>catch</li></ol><p>catch 会阻止事件冒泡</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">catchtap</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handleTap2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="3"><li>mut-bind</li></ol><p>事件冒泡到祖先元素上时，不会触发祖先元素上的同名事件监听函数。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">mut-bind:tap</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handleTap1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="4"><li>capture-bind、capture-catch</li></ol><p>在捕获阶段执行事件监听函数</p><blockquote><p>事件监听器中的数据传递</p></blockquote><ul><li>dataset</li><li>mark：在事件冒泡中会包含触发事件的路径上的值</li><li>detail：自定义事件携带的数据</li></ul><h1 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h1><p>微信小程序中的组件框架—Exparser，内置在小程序基础库中，为小程序的各种组件提供基础的支持。小程序内的所有组件，包括内置组件和自定义组件，都由Exparser组织管理。</p><p>Exparser的组件模型与WebComponents标准中的ShadowDOM高度相似。Exparser会维护整个页面的节点树相关信息，包括节点的属性、事件绑定等，相当于一个简化版的Shadow DOM实现。</p><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><ol><li>支持 slot 及命名 slot</li><li>监听数据变化 （observers ） 数据监听器监听的是 setData 涉及到的数据字段，即使这些数据字段的值没有发生变化，数据监听器依然会被触发。</li><li>动态组件/抽象节点</li></ol><h2 id="组件生命周期" tabindex="-1"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html" target="_blank" rel="noreferrer">组件生命周期</a> <a class="header-anchor" href="#组件生命周期" aria-label="Permalink to &quot;[组件生命周期](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html)&quot;">​</a></h2><ol><li><p>created 实例被创建好， 此时还不能调用 setData 。 通常情况下这个生命周期只应该用于给组件 this 添加一些自定义属性字段。</p></li><li><p>attached 在组件完全初始化完毕、进入页面节点树后， attached 生命周期被触发。此时， this.data 已被初始化为组件的当前值。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行。</p></li><li><p>detached 在组件离开页面节点树后， detached 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则 detached 会被触发。 定义生命周期方法</p></li></ol><h2 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h2><ul><li>父组件向子组件传递属性（2.0.9版本以上可以传递函数）</li><li>子组件向父组件触发事件</li><li>父组件获取子组件示例（<code>this.selectComponent</code>）</li></ul><p><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0000aac998c9b09b00863377251c0a" target="_blank" rel="noreferrer">Shadow Tree 和 Composed Tree 上的冒泡事件</a></p><h2 id="原生组件" tabindex="-1"><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=000caab39b88b06b00863ab085b80a" target="_blank" rel="noreferrer">原生组件</a> <a class="header-anchor" href="#原生组件" aria-label="Permalink to &quot;[原生组件](https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=000caab39b88b06b00863ab085b80a)&quot;">​</a></h2><h2 id="自定义组件" tabindex="-1">自定义组件 <a class="header-anchor" href="#自定义组件" aria-label="Permalink to &quot;自定义组件&quot;">​</a></h2><p>组件(Component)是视图的基本组成单元</p><blockquote><p>注意事项</p></blockquote><ul><li>所有组件与属性都是小写，以连字符<code>-</code> 连接</li><li>组件和引用组件的页面不能使用id选择器（#a）、属性选择器（[a]）和标签名选择器，请改用class选择器。</li></ul><blockquote><p>示例</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">properties</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里定义了innerText属性，属性值可以在组件使用时指定	</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">innerText</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里是一些组件内部数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">someData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里是一个自定义方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">customMethod</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">使用自</span></span></code></pre></div><h1 id="wxs" tabindex="-1">WXS <a class="header-anchor" href="#wxs" aria-label="Permalink to &quot;WXS&quot;">​</a></h1><p>WXS（WeiXin Script）是小程序的一套脚本语言，结合 WXML，可以构建出页面的结构。</p><p>WXS 运行在视图层（Webview），在 WXS 中使用 <code>ComponentDescriptor.callMethod</code> 可以调用开发者在逻辑层中声明的方法，而 <code>WxsPropObserver</code> 是在逻辑层中调用 WXS 逻辑的机制。</p><h2 id="js-模块化" tabindex="-1"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html" target="_blank" rel="noreferrer">JS 模块化</a> <a class="header-anchor" href="#js-模块化" aria-label="Permalink to &quot;[JS 模块化](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html)&quot;">​</a></h2><p>CommonJS</p><h1 id="编译发布" tabindex="-1">编译发布 <a class="header-anchor" href="#编译发布" aria-label="Permalink to &quot;编译发布&quot;">​</a></h1><p>源码无法在开发者工具和微信客户端中运行，需要经过本地预处理、本地编译、服务器编译，开发者工具中的模拟器运行的代码没有服务器编译而微信客户端中运行的小程序代码经过了服务器编译。</p><p>通过编译过程我们将WXML文件和WXSS文件都处理成JS代码，使用script标签注入在一个空的html文件中（我们称为：page-frame.html）；我们将所有的JS文件编译成一个单独的app-service.js。 在小程序运行时，逻辑层使用JsCore直接加载app-service.js，渲染层使用WebView加载page-frame.html，在确定页面路径之后，通过动态注入script的方式调用WXML文件和WXSS文件生成的对应页面的JS代码，再结合逻辑层的页面数据，最终渲染出指定的页面。</p><h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h1><h2 id="分包加载" tabindex="-1">分包加载 <a class="header-anchor" href="#分包加载" aria-label="Permalink to &quot;分包加载&quot;">​</a></h2><p><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=000c8a2f9ac0b0ab0086aafeb5d80a" target="_blank" rel="noreferrer">分包加载是目录及配置</a></p><h2 id="捕获异常" tabindex="-1">捕获异常 <a class="header-anchor" href="#捕获异常" aria-label="Permalink to &quot;捕获异常&quot;">​</a></h2><p>WebView层有两种方法可以捕捉JS异常：</p><ol><li><code>try catch</code></li><li><code>window.onerror</code>，通过window.addEventListener(&quot;error&quot;, function(evt){})，这个方法能捕捉到语法错误跟运行时错误，同时还能知道出错的信息，以及出错的文件，行号，列号</li></ol><p>逻辑层的异常捕获使用 App构造器里提供了onError的回调</p><h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><h2 id="小程序全局api" tabindex="-1">小程序全局API <a class="header-anchor" href="#小程序全局api" aria-label="Permalink to &quot;小程序全局API&quot;">​</a></h2><ul><li>wx：小程序的宿主环境所提供的全局对象</li><li>App：注册小程序实例</li><li>Page：页面构造器，注册页面。这个构造器就生成了一个页面。在生成页面的时候，小程序框架会把 data 数据和 index.wxml 一起渲染出最终的结构</li><li>behaviors：多个页面复用页面配置，类似于 Vue 中的 mixins</li><li>Component：构造复杂页面</li></ul><h2 id="微信api" tabindex="-1">微信API <a class="header-anchor" href="#微信api" aria-label="Permalink to &quot;微信API&quot;">​</a></h2><ul><li><p>事件监听：wx.onXX，如 wx.onCompassChange</p></li><li><p>同步API：以 <code>Sync</code> 结尾，如 wx.getSystemInfoSync</p></li><li><p>异步API：多数都是异步API，如 wx.login、wx.request 基础库 2.10.2 版本起，异步 API 支持 callback &amp; promise 两种调用方式。当接口参数 Object 对象中不包含 success/fail/complete 时将默认返回 promise，否则仍按回调方式执行，无返回值。</p></li><li><p>云开发 API：开通并使用微信云开发，即可使用云开发API，在小程序端直接调用服务端的云函数。</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">wx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cloud</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callFunction</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 云函数名称</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cloudFunc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 传给云函数的参数</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 示例</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">fail</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">error</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div>`,115),t=[e];function r(c,i,D,F,y,d){return a(),l("div",null,t)}const A=s(o,[["render",r]]);export{C as __pageData,A as default};
