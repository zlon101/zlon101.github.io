import{_ as s,o as l,c as a,V as o}from"./chunks/framework.33d73f2c.js";const n="/assets/DOM元素尺寸.98206b58.svg",e="/assets/image-20210702112944679.78f2a487.png",p="/assets/image-20230215135713259.9b947b7a.png",h=JSON.parse('{"title":"页面生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JS/总结.md","filePath":"前端/JS/总结.md","lastUpdated":1691037194000}'),t={name:"前端/JS/总结.md"},r=o(`<h1 id="页面生命周期" tabindex="-1">页面生命周期 <a class="header-anchor" href="#页面生命周期" aria-label="Permalink to &quot;页面生命周期&quot;">​</a></h1><ul><li><p>window.onload</p></li><li><p>window.onunload</p></li><li><p>window.onbeforeunload</p></li><li><p>document.addEventListener(&quot;DOMContentLoaded&quot;, fn); DOMContentLoaded 只能用addEventListener监听</p></li><li><p>document.addEventListener(&#39;readystatechange&#39;, fn);</p><ul><li>对应 document.readyState 属性，取值：loading | interactive | complete</li><li>Loading: html 加载中</li><li>interactive: html加载完成, dom 解析完成，可以操作dom，但是js、图像等资源还在加载，触发 DOMContentLoaded 事件</li><li>complete: 资源完全加载，触发 window.onload</li></ul></li></ul><p>参考 <a href="https://zh.javascript.info/onload-ondomcontentloaded" target="_blank" rel="noreferrer">javascript.info</a></p><h1 id="viewport-视口" tabindex="-1">viewport | 视口 <a class="header-anchor" href="#viewport-视口" aria-label="Permalink to &quot;viewport | 视口&quot;">​</a></h1><p>缩放改变的是 <code>window.devicePixelRatio</code></p><ul><li><p>布局视口：渲染后页面的实际大小，包含滚动情况下溢出的区域，页面缩放时（调整缩放级别）大小不变。</p></li><li><p>可见视口：页面可见的部分，缩放时尺寸不变的部分（地址栏、书签栏）都不算可见视口的区域。</p><ul><li>可见视口大小与窗口大小和缩放级别有关</li><li>如何读写？</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> pageWidth </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerWidth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> pageHeight </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> pageWidth </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compatMode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">CSS1Compat</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pageWidth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pageHeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 混杂模式</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pageWidth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pageHeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientHeight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>window.screen.availHeight\\Width\\Left\\Top</code></li><li>网页缩放时布局视口、可见视口的变化？</li><li><a href="https://zh.javascript.info/popup-windows#yi-dong-he-tiao-zheng-da-xiao" target="_blank" rel="noreferrer">https://zh.javascript.info/popup-windows#yi-dong-he-tiao-zheng-da-xiao</a></li></ul><blockquote><p>旧文档</p></blockquote><ul><li><p>布局视窗可以通过 <code>&lt;meta&gt;</code> 标签设置 viewport 来修改。每个浏览器默认都会有一个设置，例如iOS，Android这些机型设置布局视窗宽度为980px，所以PC上的网页基本能在手机上呈现，只不过元素看上去很小，一般可以通过手指动双击缩放网页。</p></li><li><p>控制放大和缩小的就是视窗Viewport</p></li><li><p>window.screen.width：获取屏幕的宽度，等于系统设置里面的屏幕分辨率，和页面没有关系（包括resize 、缩放）</p></li><li><p>什么是 viewport 视口</p><ul><li>可视区域，不包含滚动之外的内容</li><li>视口 === 布局视口 === document.documentElement.clientWidth</li><li>layout viewport | visual viewport (布局视口)</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Viewport" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/Viewport</a></li></ul></li><li><p><code>window.innerWidth</code>: visual viewport 的宽度。页面缩放会影响该值，放大时值变小。</p></li><li><p><code>window.outerWidth</code>: 整个浏览器窗口的尺寸，包含从标签页顶部的尺寸</p></li><li><p>获取文档尺寸</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> scrollHeight </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scrollHeight</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scrollHeight</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetHeight</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetHeight</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientHeight</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientHeight</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>获取浏览器视口大小</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getViewportSize</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 混杂模式</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compatMode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BackCompat</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      height</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientHeight</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    height</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientHeight</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h1 id="dom操作" tabindex="-1">DOM操作 <a class="header-anchor" href="#dom操作" aria-label="Permalink to &quot;DOM操作&quot;">​</a></h1><h2 id="元素尺寸" tabindex="-1">元素尺寸 <a class="header-anchor" href="#元素尺寸" aria-label="Permalink to &quot;元素尺寸&quot;">​</a></h2><blockquote><p>clientHeight offsetHeight scrollHeight</p></blockquote><p>clientWidth、offsetWidth、scrollWidth 都是只读属性，而且每次访问这些属性时都会重新计算。</p><img src="`+n+'" alt="DOM元素尺寸" style="zoom:67%;"><ul><li><code>clientHeight</code> 内容区域加内边距，不包含滚动条和 border，可用于内容的文档的可见部分的 width/heigh，<code>inline</code> 元素获取的 clientWidth 和 clientHeight 为 0 ；</li><li><code>offsetWidth</code> 包含边框和滚动条的宽度，不包含伪元素 (::before、::after)</li><li><code>scrollHeight</code> 包含滚动隐藏尺寸，包含伪元素，如果元素没有溢出，该值等于 clientHeight</li></ul><blockquote><p>getBoundingClientRect</p></blockquote><p><strong>计算元素相对于视口的位置</strong></p><img src="'+e+`" alt="image-20210702112944679" style="zoom:50%;"><ul><li>viewport 内(以可视区域的左上角为坐标原点)，盒模型左上角和右小脚的坐标（x, y）</li><li>ie 不支持 element.getBoundingClientRect().x</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ele</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBoundingClientRect</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">rect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> rect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> rect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> ele</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetWidth</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 三者相等</span></span></code></pre></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect</a><a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements" target="_blank" rel="noreferrer">确定元素的尺寸-MDN</a></p><ul><li>getBoundingClientRect 无法使用时计算 <code>element.left</code> 和 <code>element.top</code></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 相对于 viewport 的偏移</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getElementLeft</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ele</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">top</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">ele</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">top</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offsetLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offsetTop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ele</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getElementLeft</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ele</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetParent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offsetLeft</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">top</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offsetTop</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="元素位置" tabindex="-1">元素位置 <a class="header-anchor" href="#元素位置" aria-label="Permalink to &quot;元素位置&quot;">​</a></h2><ul><li>Element.clientTop/Element.clientLeft: 左/上边框的宽度，包含滚动条宽度，不含 margin、padding。</li><li>Element.offsetTop: 元素的边框相对于最近的定位祖先元素的边框的距离</li><li>Element.scrollTop: 元素内容区域滚动的距离</li></ul><h2 id="监听元素变化" tabindex="-1">监听元素变化 <a class="header-anchor" href="#监听元素变化" aria-label="Permalink to &quot;监听元素变化&quot;">​</a></h2><ul><li><p>监听DOM元素变化: <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe" target="_blank" rel="noreferrer">MutationObserver</a> <a href="https://zh.javascript.info/mutation-observer" target="_blank" rel="noreferrer">https://zh.javascript.info/mutation-observer</a></p></li><li><p>监听DOM元素尺寸变化: <a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver" target="_blank" rel="noreferrer">ResizeObserver</a> 、<a href="https://github.com/juggle/resize-observer" target="_blank" rel="noreferrer">Polyfill</a></p></li><li><p>监听DOM元素是否可见: <a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver" target="_blank" rel="noreferrer">IntersectionObserver</a></p></li><li><p>DOMSubtreeModified DOMNodeInserted DOMNodeRemoved DOMNodeInsertedIntoDocument DOMNodeRemovedFromDocument DOMAttrModified DOMCharacterDataModified</p></li></ul><h2 id="滚动" tabindex="-1">滚动 <a class="header-anchor" href="#滚动" aria-label="Permalink to &quot;滚动&quot;">​</a></h2><ul><li><p><code>window.pageYOffset</code> 以左上角为坐标原点，页面水平、垂直滚动的距离，只读</p></li><li><p><code>window.scrollBy()</code> 和 <code>window.scrollTo()</code><code>window.scrollBy(x, y)</code> 相对于当前位置滚动，<code>window.scrollTo(x, y)</code> 相对于文档左上角滚动</p></li><li><p><code>document.documentElement.scrollTop</code> 和 <code>document.body.scrollTop/Left</code>（safari）、<code>ele.scrollTop</code> 垂直滚动距离，可读可写</p></li><li><p><code>ele.scrollIntoView</code></p></li><li><p><code>element.focus()</code> 也会导致页面滚动并显示获得焦点的元素</p></li><li><p>判断是否溢出</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ele</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> ele</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scrollWidth </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> ele</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientHeight </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> ele</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scrollHeight</span></span></code></pre></div><blockquote><p><a href="https://zh.javascript.info/size-and-scroll-window" target="_blank" rel="noreferrer">现代JS文档: size-and-scroll-window</a><a href="https://www.runoob.com/jqueryui/example-resizable.html" target="_blank" rel="noreferrer">Jquery 拖拽 resize</a></p></blockquote><h1 id="web-worker" tabindex="-1">Web Worker <a class="header-anchor" href="#web-worker" aria-label="Permalink to &quot;Web Worker&quot;">​</a></h1><p>浏览器中 JavaScript 引擎是单线程执行的。也就是在同一时间内只能有一段代码被 JavaScript 引擎执行。如果同一时间还有其它代码需要执行的话，则这些代码需要等待 JavaScript 引擎执行完成当前的代码之后才有可能获得被执行的机会。正常情况下，JavaScript 引擎会顺序执行页面上的所有 JavaScript 代码。当页面加载完成之后，JavaScript 引擎会进入空闲状态。用户在页面上的操作会触发一些事件，这些事件的处理方法会交给 JavaScript 引擎来执行。由于 JavaScript 引擎的单线程特性，一般会在内部维护一个待处理的事件队列。每次从事件队列中选出一个事件处理方法来执行。如果在执行过程中，有新的事件发生，则新事件的处理方法只会被加入到队列中等待执行。如果当前正在执行的事件处理方法非常耗时，则队列中的其它事件处理方法可能长时间无法得到执行，造成用户界面失去响应，严重影响用户的使用体验。</p><ul><li><p>主线程<strong>异步</strong>创建 web worker，主线程代码不会阻塞在这里等待 worker 线程去加载、执行指定的脚本文件，而是会立即向下继续执行后面代码。</p></li><li><p>Web Worker 自身是由 webkit(浏览器内核) 多线程实现，但它并没有为 JavaScript 语言带来多线程编程特性，我们现在仍然不能在 JavaScript 代码中创建并管理一个线程，或者主动控制线程间的同步与锁等特性。</p></li></ul><p>在我看来，Web Worker 是 worker 编程模型在浏览器端 JavaScript 语言中的应用。浏览器的运行时, 同其他 GUI 程序类似，核心逻辑像是下面这个无限循环:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 1 更新数据和对象状态  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 2 渲染可视化UI  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在 Web Worker 之前，JavaScript 执行引擎只能在一个单线程环境中完成这两项任务。而在其他典型 GUI 框架，如前文 Swing 库中，早已引入了 Swing Worker 来解决大量计算对 UI 渲染的阻塞问题。Web Worker 的引入，是借鉴了 worker 编程模型，给单线程的 JavaScript 带来了后台计算的能力。</p><blockquote><p>参考</p></blockquote><ul><li><a href="http://www.alloyteam.com/2015/11/deep-in-web-worker/#prettyPhoto" target="_blank" rel="noreferrer">腾讯全端 AlloyTeam-Web Worker</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/1105_chengfu_jsworker/index.html" target="_blank" rel="noreferrer">JS 工作线程实现方式-setTimeout &amp; web worker</a> setTimeout &amp; setInterval 执行过程；</li></ul><h1 id="实现动画的方法" tabindex="-1">实现动画的方法 <a class="header-anchor" href="#实现动画的方法" aria-label="Permalink to &quot;实现动画的方法&quot;">​</a></h1><ol><li>css: transition animation</li><li>js: setTimeout、setInterval、requestAnimationFrame</li><li><strong>html5: canvas ?</strong></li></ol><blockquote><p>参考</p></blockquote><ul><li><a href="https://threejs.org/examples/#webgl_decals" target="_blank" rel="noreferrer">三维动画库</a></li><li><a href="https://www.cnblogs.com/coco1s/p/15009605.html" target="_blank" rel="noreferrer">带圆角的三角形-动画</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations" target="_blank" rel="noreferrer">Animation</a></li></ul><h1 id="特殊运算符" tabindex="-1">特殊运算符 <a class="header-anchor" href="#特殊运算符" aria-label="Permalink to &quot;特殊运算符&quot;">​</a></h1><blockquote><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Optional_chaining" target="_blank" rel="noreferrer">可选链 空值运算符</a></p></blockquote><blockquote><p>void 0 &amp; undefined</p></blockquote><p>undefined 不是 JS 中的保留字，而是全局对象的一个属性，在 ES5 之前是可修改的（<code>undefined = 1</code>），ES5 之后修改为只读属性，但是在局部作用域内依然可以覆盖 undefined 的值，如：<code>const undefined = 1;</code>。</p><blockquote><p>new this</p></blockquote><p>使用 <code>new</code> 实例化对象时构造函数内部<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#description" target="_blank" rel="noreferrer">执行步骤</a></p><ul><li>若执行 new Foo()，过程如下：</li></ul><p>1）创建新对象 o； 2）给新对象的内部属性赋值，关键是给[[Prototype]]属性赋值，构造原型链（如果构造函数的原型是 Object 类型，则指向构造函数的原型；不然指向 Object 对象的原型）； 3）执行函数 Foo，执行过程中内部 this 指向新创建的对象 o； 4）如果 Foo 内部显式返回对象类型数据，则返回该数据；否则返回新创建的对象 o。</p><ul><li>在 Person 函数体中判断函数是否已 <code>new</code> 调用</li></ul><ol><li><code>this instanceof Person</code></li><li>ES6 环境下: <code>new.target === Person</code></li></ol><h1 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h1><blockquote><p>概念</p></blockquote><p>16位 Unicode 字符 | 双字节字符</p><p>UTF-16 最多能表示 2^16=65536 个字符， 这 65536 个字符称为 basic multilingual plane (BMP) 字符集，可以用 <code>\\uxxxx</code> 表示。</p><p>Unicode code points range from 0 to 1114111 (0x10FFFF). The first 128 Unicode code points are a direct match of the ASCII character encoding.</p><p>Unicode 字符集远大于 65536，超过的字符就用两个 UTF-16 编码单元(4字节)表示，这两个编码单元每个的取值在 0xD800 - 0xDFFF 范围。</p><p>每个 Unicode 字符由一个或两个 UTF-16 编码单元表示，又称 <strong>Unicode code point</strong>，用 <code>\\u{xxxx}</code> 1到6位16进制数表示。</p><p>&quot;unicode&quot;: &quot;2764 FE0F&quot;, &quot;icon&quot;: &quot;❤️&quot;</p><p>&quot;unicode&quot;: &quot;1F525&quot;, &quot;icon&quot;: &quot;🔥&quot;</p><ul><li><p>😀</p><ul><li>length: 2</li><li>uncode: <code>[\\uD83D, \\uDE00]</code> =&gt; [55357, 56832]</li><li>转义表示: <code>\\u{1f600}</code></li></ul></li><li><p>a</p><ul><li>ASCII: 97 0x60</li><li>转义表示: <code>\\u0061</code> 或 <code>\\u{61}</code></li></ul></li></ul><blockquote><p>方法</p></blockquote><ul><li>String.prototype.charCodeAt String.fromCharCode ==&gt; UTF-16 code unit</li><li>String.prototype.codePointAt String.fromCodePoint ==&gt; Unicode code point</li><li>btoa atob <a href="https://developer.mozilla.org/en-US/docs/Web/API/btoa" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/btoa</a></li></ul><blockquote><p>参考</p></blockquote><p><a href="https://zh.javascript.info/unicode" target="_blank" rel="noreferrer">Unicode-javascript.info</a></p><h1 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h1><p>在内部，数字是以 64 位格式 IEEE-754 表示的，所以正好有 64 位可以存储一个数字：1个符号位、11个指数位（exponent）、52个小数位（mantissa）。</p><p><img src="`+p+`" alt="image-20230215135713259"></p><p><code>e</code> 等于 11 位指数位表示的数，最大为 2^11-1-1=1023，最小为1</p><p>11 位指数有两个特殊情况 1）全为0：当52位小数全为0时表示正负0，否则表示非规范化浮点数 2）全为1：当52位小数全为0时表示正负无穷大，否则表示 NaN</p><p>Integers can only be represented without loss of precision in the range <code>-2^53 + 1 to 2^53 - 1</code>。<span style="color:red;">实际测试为 -2^53 到 2^53</span></p><p>最大安全整数：Number.MAX_SAFE_INTEGER = 2^53</p><p><a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank" rel="noreferrer">双精度浮点数-Wiki</a></p><p>最大整数 精度丢失 isNaN isFinite</p><blockquote><p>解决精度问题</p></blockquote><p><a href="https://github.com/josdejong/mathjs/" target="_blank" rel="noreferrer">mathjs</a><a href="https://github.com/nefe/number-precision" target="_blank" rel="noreferrer">number-precision</a></p><h1 id="eval" tabindex="-1">eval <a class="header-anchor" href="#eval" aria-label="Permalink to &quot;eval&quot;">​</a></h1><p>参数：预期是字符串 返回值：若参数是字符串，返回值就是字符串执行的结果，否则返回值是输入参数本身</p><p>两种调用方式： 直接调用：<code>eval()</code> 间接调用：<code>eval?.()</code>、别名、对象属性、表达式</p><p>直接调用、间接调用的区别：</p><ul><li><p>是否继承上级作用域的 strict 模式</p><ul><li>间接调用不继承上级作用域的 &#39;use strict&#39; 模式，比如在一个声明了 &#39;use strict&#39; 的函数中以间接的方式调用 eval，eval 中代码是在非严格模式下执行</li><li>直接调用会继承 strict 模式</li></ul></li><li><p>执行环境（作用域）</p><ul><li>间接调用的执行作用域为全局作用域，eval 中的 script 不能访问局部作用域中的变量</li><li>直接调用的作用域为？</li><li>直接调用的 eval 可以访问访问其他上下文中的变量【危险，可能修改局部变量】</li></ul></li><li><p>变量声明和函数声明</p><ul><li>在非 strict 模式下，对于直接调用形式，var声明的变量和函数属于上级作用域(surrounding scope)，eval 中的代码可能修改外部的变量值；对于间接调用，var声明的变量和函数属于全局作用域</li><li>在 strict 模式下，var声明的变量和函数属于局部作用域，和调用方式无关</li><li>let 和 const 声明的变量始终属于局部作用域</li><li>直接 eval 会读取和修改周围作用域中的绑定，这可能导致外部输入破坏本地数据。</li></ul></li></ul><h1 id="求值策略" tabindex="-1">求值策略 <a class="header-anchor" href="#求值策略" aria-label="Permalink to &quot;求值策略&quot;">​</a></h1><p>求值策略有两种：</p><ul><li>传值调用，先把变量的值计算出来，然后直接使用计算出来的值</li><li>传名调用，等到需要变量的值时才计算</li></ul><p>JS 采用的传值调用，ECMAScript 中所有的函数的参数都是按值传递的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 结果：</span></span>
<span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">n</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">n</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">n</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}}</span></span></code></pre></div>`,92),c=[r];function i(D,y,F,d,C,A){return l(),a("div",null,c)}const g=s(t,[["render",i]]);export{h as __pageData,g as default};
