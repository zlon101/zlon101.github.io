import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.cbe154cb.js";const F=JSON.parse('{"title":"概览","description":"","frontmatter":{},"headers":[],"relativePath":"前端/规范.md","filePath":"前端/规范.md"}'),l={name:"前端/规范.md"},o=e(`<h1 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h1><p><strong>前端项目搭建</strong></p><p>从<code>0</code>创建一个项目我大致会做以下事情：项目构建、引入必要插件、代码规范、提交规范、常用库和组件</p><ol><li>目前<code>vue3</code>项目我会用<code>vite</code>或者<code>create-vue</code>创建项目</li><li>接下来引入必要插件：路由插件<code>vue-router</code>、状态管理<code>vuex/pinia</code>、<code>ui</code>库我比较喜欢<code>element-plu</code>s 和<code>antd-vue</code>、<code>http</code>工具我会选<code>axios</code></li><li>其他比较常用的库有<code>vueuse</code>，<code>nprogress</code>，图标可以使用<code>vite-svg-loader</code></li><li>下面是代码规范：结合<code>prettier</code>和<code>eslint</code>即可</li><li>最后是提交规范，可以使用<code>husky</code>，<code>lint-staged</code>，<code>commitlint</code></li><li>目录结构我有如下习惯： <code>.vscode</code>：用来放项目中的 <code>vscode</code> 配置</li><li><code>plugins</code>：用来放 <code>vite</code> 插件的 <code>plugin</code> 配置</li><li><code>public</code>：用来放一些诸如 页头<code>icon</code> 之类的公共文件，会被打包到<code>dist</code>根目录下</li><li><code>src</code>：用来放项目代码文件</li><li><code>api</code>：用来放<code>http</code>的一些接口配置</li><li><code>assets</code>：用来放一些 <code>CSS</code> 之类的静态资源</li><li><code>components</code>：用来放项目通用组件</li><li><code>layout</code>：用来放项目的布局</li><li><code>router</code>：用来放项目的路由配置</li><li><code>store</code>：用来放状态管理<code>Pinia</code>的配置</li><li><code>utils</code>：用来放项目中的工具方法类</li><li><code>views</code>：用来放项目的页面文件</li></ol><h1 id="命名规则" tabindex="-1">命名规则 <a class="header-anchor" href="#命名规则" aria-label="Permalink to &quot;命名规则&quot;">​</a></h1><h2 id="文件夹及文件" tabindex="-1">文件夹及文件 <a class="header-anchor" href="#文件夹及文件" aria-label="Permalink to &quot;文件夹及文件&quot;">​</a></h2><ul><li>全部用小写字母，单词之间用横线隔开，此规范可以避免文件名大小写在不同文件系统下的行为不一致，</li><li>命名格式：time-picker、split-button、common-utils</li></ul><h2 id="组件-标识符-name" tabindex="-1">组件/标识符/name <a class="header-anchor" href="#组件-标识符-name" aria-label="Permalink to &quot;组件/标识符/name&quot;">​</a></h2><ul><li>命名格式，大驼峰【首字母大写】：TimePicker</li><li>类别[区分+类别]：Button / SplitButton / MenuButton</li><li>带功能组件【名词+动词】：TimePicker / TreeSelect / NumberPicker</li><li>禁止导出没有名字的组件</li></ul><h2 id="强制命名规则" tabindex="-1">强制命名规则 <a class="header-anchor" href="#强制命名规则" aria-label="Permalink to &quot;强制命名规则&quot;">​</a></h2><ul><li>给组件根元素增加类名，className</li><li>搜索关键字，keyword</li><li>响应类事件回调以on开头，后面跟具体的响应类似</li></ul><h1 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h1><ul><li>数据向下，事件向上，一切变化都是可追溯的。可预测的</li><li>第三方外部链接(eg:<a href="https://www.google.com" target="_blank" rel="noreferrer">https://www.google.com</a>)跳转一律用a标签，同时必须新标签打开，设置rel=&quot;noreferrer noopener&quot; 属性</li></ul><h1 id="前端代码规范" tabindex="-1">前端代码规范 <a class="header-anchor" href="#前端代码规范" aria-label="Permalink to &quot;前端代码规范&quot;">​</a></h1><blockquote><p><a href="https://juejin.cn/post/7038143752036155428" target="_blank" rel="noreferrer">前端工程化</a>（git规范） <a href="https://segmentfault.com/a/1190000040283335" target="_blank" rel="noreferrer">前端规范</a></p></blockquote><ul><li>区分开发、提交代码、生产环境</li><li><a href="https://editorconfig.org/" target="_blank" rel="noreferrer">EditorConfig</a>: 跨编辑器和IDE编写代码，保持一致的简单编码风格。某些编辑器已默认集成对EditorConfig的支持，比如常用的：Webstorm、IntelliJ IDEA等；而另一些编辑器则需要借助安装对应的插件来支持：比如 Visual Studio Code、Atom等（EditorConfig for vs code）。配置文件 <code>editorconfig</code></li><li>ESLint：作代码质量检测、编码风格约束等；</li><li>Prettier: 专注于代码格式化的工具，美化代码；</li><li>git commit 检查</li><li>cli 脚手架集成 <a href="https://mp.weixin.qq.com/s/FRU-zpSS3JgN5SXnq4K_kA" target="_blank" rel="noreferrer">脚手架集成</a></li></ul><h2 id="eslint-和-prettier-配置" tabindex="-1">eslint 和 prettier 配置 <a class="header-anchor" href="#eslint-和-prettier-配置" aria-label="Permalink to &quot;eslint 和 prettier 配置&quot;">​</a></h2><blockquote><p>VSCode 中安装的是在编辑器里面用的，如果项目根目录下有 eslintrc 和 prettierrc 配置文件，VSCode 插件会自动读取配置文件中的配置检查你的代码和格式化文件，npm 安装的是在命令行中运行的。如果你只安装 npm 包，VSCode 是不会有 lint 提示的，只能通过命令行，在小黑窗查看不符合 lint 规则的检测信息。安装 npm 包最主要的原因是可以通过 git hook 强制提交代码前 lint 和格式化代码保证代码仓库的代码风格统一。</p><p>ESLint 进行语法检查，Prettier 只格式化代码，不要在 ESLint 中去配置代码风格相关的规则，避免 eslint 和 prettier 冲突。</p></blockquote><p>在项目目录下安装 eslint prettier</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 安装eslint</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i eslint </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">D</span></span>
<span class="line"><span style="color:#A6ACCD;">npx eslint </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">init </span><span style="color:#676E95;font-style:italic;">// 生成eslint配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">npx eslint xx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">// 语法检查</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 安装prettier并解决 eslint 和 prettier 冲突</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i prettier eslint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">prettier eslint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">plugin</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">prettier </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">D</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在.eslintrc 的 extend 中添加 &quot;prettier&quot; 解决 eslint 和 prettier 的冲突</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 格式检查</span></span>
<span class="line"><span style="color:#A6ACCD;">npx prettier</span></span></code></pre></div><blockquote><p>eslint 配置集</p><p>eslint-plugin-prettier: 先使用 prettier 对代码进行格式化 eslint-config-prettier: 使用这个配置集，会关闭一些可能与 prettier 冲突的规则 eslint-config-airbnb: Airbnb 公司提供的配置集 eslint-config-vue: vuejs 使用的配置集</p></blockquote><p>安装 eslint 包后可以在命令行校验文件，但是编辑器不会提示，在编辑器安装 eslint 插件后编辑器才会有报错提示，并且可以配置编辑器保存文件时自动修复报错。</p><h2 id="git-规范" tabindex="-1">git 规范 <a class="header-anchor" href="#git-规范" aria-label="Permalink to &quot;git 规范&quot;">​</a></h2><p>如果你正在使用GIt做项目代码管理，那么则可以借助 husky + lint-staged + prettier 在 Git 提交时，自动强制校验并格式化且修复代码，而且只处理自己<strong>本次改动提交的文件</strong>。</p><p>lint-staged 的概念是在git中暂存的文件上运行配置好的linter任务（或其他任务）。lint-staged总是将<strong>所有暂存文件</strong>的列表传递给任务，如果想让 linter 的某个任务忽略某些文件，应该在这个任务的配置文件中进行配置（如不对第三方库进行 eslint 和 prettier 处理，应该配置 .eslintignore 和 .prettierignore）。</p><blockquote><p><a href="https://www.npmjs.com/package/husky" target="_blank" rel="noreferrer">husky</a>: 操作 git 钩子的工具，在 git 钩子中执行命令 <a href="https://www.npmjs.com/package/lint-staged" target="_blank" rel="noreferrer">lint-staged</a>: 对本地暂存区文件进行检查（eslint、prettier），它的实现涉及到 git pre-commit hooks。 commitlint: commit 信息校验 commitizen: 辅助 commit 信息，交互式</p></blockquote><p><a href="https://juejin.cn/post/7005459733427519501" target="_blank" rel="noreferrer">安装并配置 lint-staged</a></p><p>方法（1），在安装 eslint 和 prettier 的前提下根据 package.json 的依赖自动安装</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx mrm@</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> lint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">staged</span></span></code></pre></div><p>方法（2）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">save</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dev husky lint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">staged</span></span></code></pre></div><p>package.json 中的配置</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// package.json </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// husky v4版本，husky@4.3.8 版本更稳定</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">husky</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">hooks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">pre-commit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">pre-commit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged &amp;&amp; pretty-quick --staged</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">*.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint  --fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">src/**/*.{js,jsx,vue,json,css,less,scss,sass}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 先检查语法</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 再格式化</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">*.{ts,json,yml,yaml,md}|examples/*.md</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier --check</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">*.md|{.github,benchmark,bin,examples,hot,lib,schemas,setup,tooling}/**/*.{md,yml,yaml,js,json}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cspell</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="git-commit规范" tabindex="-1">git commit规范 <a class="header-anchor" href="#git-commit规范" aria-label="Permalink to &quot;git commit规范&quot;">​</a></h2><blockquote><p><a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a>: 格式检查 <a href="https://github.com/commitizen/cz-cli#making-your-repo-commitizen-friendly" target="_blank" rel="noreferrer">commitizen</a>: 交互式提示信息</p></blockquote><h2 id="git-ci-集成" tabindex="-1">Git CI 集成 <a class="header-anchor" href="#git-ci-集成" aria-label="Permalink to &quot;Git CI 集成&quot;">​</a></h2><blockquote><p><code>git hooks</code> 可以绕过，但 CI(持续集成) 是绝对绕不过的，因为它在服务端校验。使用 <code>gitlab CI</code> 做持续集成，配置文件 <code>.gitlab-ci.yaml</code> 如下所示</p></blockquote><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// .gitlab-ci.yaml</span></span>
<span class="line"><span style="color:#A6ACCD;">lint:</span></span>
<span class="line"><span style="color:#A6ACCD;">stage:lint</span></span>
<span class="line"><span style="color:#A6ACCD;">only:</span></span>
<span class="line"><span style="color:#A6ACCD;"> -/^feature\\/.*$/</span></span>
<span class="line"><span style="color:#A6ACCD;">script:</span></span>
<span class="line"><span style="color:#A6ACCD;"> -npmlint</span></span></code></pre></div>`,38),t=[o];function p(c,i,r,D,y,d){return a(),n("div",null,t)}const u=s(l,[["render",p]]);export{F as __pageData,u as default};
