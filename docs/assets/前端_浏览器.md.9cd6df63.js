import{_ as s,o as a,c as e,V as l}from"./chunks/framework.33d73f2c.js";const n="/assets/async-defer.42abe810.svg",h=JSON.parse('{"title":"浏览器基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"前端/浏览器.md","filePath":"前端/浏览器.md","lastUpdated":1691037194000}'),o={name:"前端/浏览器.md"},t=l('<h1 id="浏览器基础知识" tabindex="-1">浏览器基础知识 <a class="header-anchor" href="#浏览器基础知识" aria-label="Permalink to &quot;浏览器基础知识&quot;">​</a></h1><ul><li><p>浏览器内核分类：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）；</p></li><li><p>浏览器内核组成：渲染引擎 &amp; JS引擎；JS 引擎和渲染引擎是互斥的，同一时间点只能运行一个，所以在执行 JS 时会阻塞页面的渲染；</p></li><li><p>浏览器有两种呈现模式：doctype(DTD文档类型定义)</p><ol><li>标准模式：浏览器根据规范呈现页面；</li><li>混杂模式：页面以一种比较宽松的向后兼容的方式显示；</li><li>DOCTYPE 不存在或格式不正确会导致文档以<strong>混杂(兼容)模式</strong>呈现。</li></ol></li></ul><h1 id="浏览器渲染机制" tabindex="-1">浏览器渲染机制 <a class="header-anchor" href="#浏览器渲染机制" aria-label="Permalink to &quot;浏览器渲染机制&quot;">​</a></h1><p>页面加载过程：</p><ol><li>浏览器根据 DNS 服务器得到域名的 IP 地址；</li><li>建立连接(三次握手)，向这个 IP 的机器发送 HTTP 请求；</li><li>服务器收到、处理并返回 HTTP 请求；</li><li>浏览器得到返回内容(HTML)；</li></ol><ul><li>页面加载解析顺序：域名解析--&gt;加载HTML--&gt;加载JS、CSS--&gt;加载图像和其他信息</li></ul><p>例如：</p><ol><li>在浏览器输入<code>https://juejin.im/timeline</code>，然后经过 DNS 解析，juejin.im对应的 IP 是<code>36.248.217.149</code>；</li><li>然后浏览器向该 IP 发送 HTTP 请求；</li><li>服务端接收到 HTTP 请求，然后经过计算，返回 HTTP 请求，返回的内容是HTML、CSS、JS等文件；</li><li>浏览器得到返回内容；</li></ol><h1 id="浏览器工作流程" tabindex="-1">浏览器工作流程 <a class="header-anchor" href="#浏览器工作流程" aria-label="Permalink to &quot;浏览器工作流程&quot;">​</a></h1><ol><li>DNS解析确定 IP 地址：</li></ol><ul><li>输入 url 后，首先需要找到这个 url 域名的服务器 ip ，为了寻找这个 ip，浏览器首先会寻找缓存，查看缓存中是否有记录</li><li>DNS解析查找流程：浏览器缓存---&gt;系统缓存---&gt;host文件---&gt;路由器缓存---&gt;ISP(运营商)DNS缓存<code>、</code>根域名服务器<code>、</code>顶级域名服务器<code>、</code>主域名服务器的顺序，逐步读取缓存，直到拿到IP地址；</li><li>性能优化：DNS预解析，<code>&lt;meta http-equiv=&quot;X-dns-fetch-control&quot; content=&quot;on&quot;&gt;</code></li></ul><ol start="2"><li><p>三次握手建立TCP连接，发送请求： 得到服务器的 ip 地址后，浏览器根据这个 ip 以及相应的端口号，构造一个 <strong>http 请求</strong>，并将这个 http 请求封装在一个 tcp 包中，这个tcp包会依次经过传输层、网络层、数据链路层、物理层到达服务器(可能存在缓存)；</p></li><li><p>服务器收到请求，返回响应(HTML文档)；</p></li><li><p>解析 HTML 和 CSS 构建 DOM 树和 CSS 规则树：浏览器根据这个 html 来构建 DOM 树，在dom树的构建过程中如果遇到 JS 脚本和外部 JS 连接，则会停止构建 DOM 树来执行和下载相应的代码，这会造成阻塞，<strong>这就是为什么推荐JS代码应该放在html代码的后面；</strong></p></li><li><p>之后根据外部样式，内部样式，内联样式构建一个CSS对象模型树CSSOM树，构建完成后和DOM树<strong>合并为渲染树</strong>，这里主要做的是排除非视觉节点，比如 script，meta 标签和排除 display 为 none 的节点；</p></li><li><p>之后进行<strong>布局</strong>，布局主要是确定各个元素的位置和尺寸，</p></li><li><p><strong>绘制</strong>：最后渲染页面，因为html文件中会含有图片、视频、音频等资源，在解析DOM的过程中，遇到这些都会进行并行下载，浏览器对每个域的并行下载数量有一定的限制，一般是4-6个，当然在这些所有的请求中我们还需要关注的就是缓存，缓存一般通过Cache-Control、Last-Modify、Expires 等首部字段控制。Cache-Control 和 Expires 的区别在于Cache-Control使用相对时间，Expires使用的是基于服务器端的绝对时间，因为存在时差问题，一般采用Cache-Control，在请求这些有设置了缓存的数据时，会先查看是否过期，如果没有过期则直接使用本地缓存，过期则请求并在服务器校验文件是否修改，如果上一次 响应设置了ETag值会在这次请求的时候作为If-None-Match的值交给服务器校验，如果一致，继续校验 Last-Modified，没有设置ETag则直接验证Last-Modified，再决定是否返回304。</p></li></ol><h2 id="域名解析流程" tabindex="-1">域名解析流程 <a class="header-anchor" href="#域名解析流程" aria-label="Permalink to &quot;域名解析流程&quot;">​</a></h2><ol><li>查询浏览器缓存 ---&gt; 操作系统缓存 ---&gt;hosts 文件配置 ---&gt;本地DNS服务器缓存 ---&gt;DNS服务器查询</li><li>DNS服务器查询流程 <ul><li>查询根域名服务器</li><li>查询一级域名服务器</li><li>...</li></ul></li></ol><h1 id="浏览器渲染过程" tabindex="-1">浏览器渲染过程 <a class="header-anchor" href="#浏览器渲染过程" aria-label="Permalink to &quot;浏览器渲染过程&quot;">​</a></h1><ol><li>解析文件： <ul><li>HTML\\XHTML\\SVG文件解析为------&gt;构建DOM树；<a href="#script如何处理？">HTML 中的 script 如何处理？</a>； 遇到外部链接的 CSS 文件和 JS 文件会发起 HTTP请求；</li><li>CSS 文件解析为------&gt;CSS 规则树；</li><li>JS 文件加载完成后，执行 JS 代码，操作 DOM 树和 CSS 树；</li></ul></li><li>文件解析完成后，根据 DOM 树和 CSS 规则树构造渲染树(Rendering Tree)： <ul><li>渲染树只会包括需要显示的节点和这些节点的样式信息，如果某个节点是 <code>display: none</code> 的，那么就不会在渲染树中显示；</li><li>CSS 规则树是为了完成匹配并把样式应用到 Rendering Tree 上匹配的节点(元素 element )上；</li></ul></li><li>布局 render 树( Layout/reflow )，计算 Render Tree 中每个元素的位置和尺寸，该过程又称为 layouy 布局或 reflow 回流；若布局完成后对 DOM 进行了修改，将会重新布局(也称回流)；</li><li>绘制 render 树( paint )，绘制页面像素信息；</li><li>最后，通过调用操作系统 Native GUI 的 API 完成绘制；</li></ol><h2 id="script如何处理" tabindex="-1">script如何处理？ <a class="header-anchor" href="#script如何处理" aria-label="Permalink to &quot;script如何处理？&quot;">​</a></h2><ul><li><p>渲染过程中，如果遇到不带 <a href="#defer 和 async">defer</a> 或 async 属性的 &lt;script&gt; 就停止渲染，下载并执行 JS 代码。因为浏览器有 GUI 渲染线程与 JS 引擎线程，为了防止渲染出现不可预期的结果，这两个线程是互斥的关系。JS 的加载、解析与执行会阻塞 DOM 的构建，也就是说，在构建 DOM 时，HTML 解析器若遇到了JS，那么它会暂停构建 DOM，将控制权移交给 JS 引擎，等 JS 引擎运行完毕，浏览器再从中断的地方恢复 DOM 构建。</p></li><li><p>CSSOM 构建完成后才会执行 JS，因此 CSSOM 会阻塞 JS 的运行：</p><p>这是因为 JS 不只是可以改 DOM，它还可以更改样式，也就是它可以更改 CSSOM。因为不完整的 CSSOM 是无法使用的，如果JS 想访问 CSSOM 并更改它，那么在执行 JS 时，必须要能拿到完整的 CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟脚本执行和 DOM 构建，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JS，最后在继续构建 DOM。</p></li></ul><h2 id="回流-重绘" tabindex="-1">回流 &amp; 重绘 <a class="header-anchor" href="#回流-重绘" aria-label="Permalink to &quot;回流 &amp; 重绘&quot;">​</a></h2><p><strong>回流</strong>指的是当页面中的元素位置、大小或布局发生变化时，浏览器会重新计算元素的位置和布局信息，并将这些变化应用到页面上，这个过程会涉及到重新布局和重绘页面的一部分或全部内容，比较耗费性能。</p><p><strong>重绘</strong>是指当元素的样式属性（如颜色、背景色等）发生变化时，浏览器会重新绘制这些元素的样式，但是不会影响到它们的布局，所以比回流性能开销小。</p><p>在网页开发中，应该尽量避免频繁触发回流和重绘操作，因为它们会导致页面性能下降，影响用户体验。以下是一些减少回流和重绘的方法：</p><ol><li>尽量使用transform和opacity等CSS属性来代替top和left等属性，因为前者不会触发回流。</li><li>使用文档片段（DocumentFragment）来创建DOM元素，因为它可以在内存中操作DOM，避免频繁的回流和重绘。</li><li>避免使用table布局，因为它会导致回流的频繁发生。</li><li>避免使用不必要的DOM层级，减少DOM元素的嵌套，以降低回流和重绘的成本。</li><li>使用debounce和throttle等技术来减少事件处理程序的频繁触发，以避免过度的回流和重绘。</li></ol><p>当网页生成的时候，至少会渲染一次，在用户访问的过程中，还会不断重新渲染，重新渲染会重复<strong>回流+重</strong>绘或者只有重绘。回流一定会引发重绘，重绘不一定引发回流。</p><p>Q：什么情况下发生回流？什么情况下发生重绘？</p><p><strong>1.回流</strong></p><ul><li><p>当浏览器生成渲染树以后，就会根据渲染树来进行布局(也可以叫做回流)。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。</p></li><li><p>JS 对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。</p></li><li><p>JS 动态修改了 DOM 属性或是 CSS 属性会导致重新 Layout(回流)，但有些改变不会重新 Layout，比如修改后的CSS rule没有被匹配到元素。</p></li><li><p>任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发回流</p><ul><li>添加或者删除可见的DOM元素；</li><li>元素尺寸改变——边距、填充、边框、宽度和高度；</li><li>内容变化，比如用户在input框中输入文字；</li><li>浏览器窗口尺寸改变——resize事件发生时；</li><li>计算 offsetWidth 和 offsetHeight 属性；</li><li>设置 style 属性的值；</li><li>改变 top 和 left等属性会触发回流，但使用 transform 属性的 translate 来切换动画只会触发重绘，因为这是基于GPU实现的。</li></ul></li></ul><p><strong>2.重绘</strong></p><ul><li>JS 对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了回流环节）。</li><li>引起重绘的方法： <ul><li>背景色、颜色、字体改变(注意：字体大小发生变化时，会触发回流)；</li><li>color、border-style、visibility</li></ul></li></ul><p><strong>3.如何减少回流和重绘？</strong></p><ul><li>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）；</li><li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局；</li></ul><h1 id="浏览器中js的执行过程" tabindex="-1">浏览器中JS的执行过程 <a class="header-anchor" href="#浏览器中js的执行过程" aria-label="Permalink to &quot;浏览器中JS的执行过程&quot;">​</a></h1><p>延迟脚本： &lt;scipt defer&gt; 异步脚本： &lt;scipt async&gt;</p><ul><li>DOM 在第一次页面加载完毕后，就在内存里了，无论后面怎么通过 ajax 的方式去局部修改 html 页面，都只是对内存中的 DOM 树进行修改；</li><li>浏览器环境中只有一个全局<strong>作用域</strong>，若 HTML 文档中链接有多个外部 JS 文件，这些 JS 文件会共用一个全局作用域；若不同的外部 JS 文件中定义了两个同名函数，将使用浏览器最后看到的那个函数(即最后加载的那个)；</li></ul><h2 id="单线程模式" tabindex="-1">单线程模式 <a class="header-anchor" href="#单线程模式" aria-label="Permalink to &quot;单线程模式&quot;">​</a></h2><p>客户端 JS 是按单线程模式工作，意味着在**执行 **JS 脚本或事件处理程序时浏览器必须停止 HTML 文档解析、渲染和响应用户操作。</p><blockquote><p>浏览器中 JS 的执行过程分为两个阶段：</p></blockquote><ol><li>同步阶段：载入 JS 文件并执行(包括 &lt;scipt&gt; 中的内容)，通常按代码在文件中出现的顺序执行；</li><li>异步事件驱动阶段：所有同步脚本执行完成后(异步 async 脚本可能还未执行完成)，进入异步事件驱动阶段，触发事件，调用事件处理程序。此时文档解析完成，但其他内容(图像可能还未载入完成)，当所有资源载入完成并且异步脚本也执行完成后，document.readyState 状态变为 complete ，浏览器触发 load 事件。</li></ol><h2 id="defer-和-async" tabindex="-1">defer 和 async <a class="header-anchor" href="#defer-和-async" aria-label="Permalink to &quot;defer 和 async&quot;">​</a></h2><p>Q：JS 的载入和执行时间？HTML解析是否被阻塞？ JS 加载的顺序？ JS 执行的顺序？</p><ul><li><p>没有 defer 或 async 的普通JS脚本下载和解析执行时都会阻塞页面，也就是 &lt;script&gt; 后面的 HTML 元素暂时不会被解析为 DOM 树，即阻塞页面渲染；</p></li><li><p>async异步下载：async 属性表示异步执行引入的 JS，与 defer 的区别在于，如果 JS 没有下载完成，<strong>HTML 解析和 JS 下载会同时进行</strong>，下载完成后立即执行(不同于 defer)；如果已经加载好就会开始执行--无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。需要注意的是，这种方式加载的 JS 依然会阻塞 load 事件。换句话说，async-script 可能在 DOMContentLoaded 触发之前或之后执行，但一定在 load 触发之前执行；</p></li><li><p>defer 延迟执行：与 async 相同，加载 JS 和解析 HTML 会并行进行，当文档解析结束( DOM 树构建完成)并且 JS 都完成加载后再执行所有 defer 加载的 JS 文件(defer 属性的 JS 文件)，然后触发 DOMContentLoaded 事件(标志着JS程序执行从同步阶段转换到<strong>异步事件驱动阶段</strong>)。</p></li><li><p>defer 与相比普通 script标签，有两点区别：</p><ol><li>载入 JS 文件时不阻塞 HTML 的解析；</li><li>执行阶段被放到 HTML 标签解析完成之后。</li></ol></li><li><p>在<strong>加载</strong>多个 JS 脚本的时候，async 是无顺序的加载，而 defer 是有顺序的加载。</p></li><li><p>async 的优先级高于 defer，同时应用到&lt;script&gt; 时忽略 defer。</p></li></ul><p><img src="'+n+`" alt="async-defer"></p><h2 id="domcontentloaded-和-load" tabindex="-1">DOMContentLoaded 和 load <a class="header-anchor" href="#domcontentloaded-和-load" aria-label="Permalink to &quot;DOMContentLoaded 和 load&quot;">​</a></h2><ul><li>DOMContentLoaded：HTML 解析完成即 DOM 树构建完成时触发( defer 脚本执行完成)，此时样式表、图片等资源可能尚未加载完成；</li><li>load ：页面上所有的 DOM、样式表、脚本、图片都已加载完成，async 脚本加载并执行完成时触发； onLoad事件处理程序只能有一个，即使注册了多个处理程序也只会执行其中一个；</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3 seconds passed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">load</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">page is fully loaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li><p>有 defer 和 async 时，下载脚本时可以继续解析 HTML 和渲染文档；</p></li><li><p>defer 延迟脚本执行，在 HTML 解析(DOM 树构建完成)和脚本( JS )载入都完成时开始执行脚本(此时能访问完整的 DOM 树)，defer 修饰的脚本会按他们在文档中出现的顺序加载和执行； DOM树构建完成--&gt;执行 defer 脚本--&gt;触发 DOMContentLoaded 事件---&gt;下载静态资源和执行异步脚本---&gt;触发 load 事件</p></li><li><p>async 下载时也不会阻塞文档解析，JS 载入完成后就开始执行，async 修饰的脚本可能会无序执行(看谁先载入)，无法控制执行顺序，当页面的脚本之间彼此独立没有依赖时，async 是最理想的选择；</p></li></ol><h1 id="v8-引擎" tabindex="-1">V8 引擎 <a class="header-anchor" href="#v8-引擎" aria-label="Permalink to &quot;V8 引擎&quot;">​</a></h1><ul><li><a href="https://zhuanlan.zhihu.com/p/27628685" target="_blank" rel="noreferrer">认识v8引擎-知乎</a></li></ul><h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><p><a href="https://juejin.im/post/5c1dde33f265da61776bf49a" target="_blank" rel="noreferrer">HTML 解析过程-掘金</a></p><p><a href="https://juejin.im/entry/59e1d31f51882578c3411c77" target="_blank" rel="noreferrer">浏览器的渲染</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg5ODA5NTM1Mw==&amp;mid=2247484096&amp;idx=1&amp;sn=aa2a25b626b33d551c03e3691b25751e&amp;chksm=c0668356f7110a40b0a8159e06070fb761e19aa468a0be33ff50c1dc9fee3227901dbb07eb5d&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;key=2f4703df4564706ac36ce44bb3d05eef225d060fd27230d1a91e8329e33210de8577f8fbb3c472d28a3364dd06caeb1124a82271163acb87a5fe2438f41c6057c7610a81fd6605abc9cce01dad53dd00&amp;ascene=1&amp;uin=Mjc2NDI1NDU2NA%3D%3D&amp;devicetype=Windows+7&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=jEOPj4BBk1Hhwzh1usQqXtIOgkQc7t35kTe%2BtVuy%2B8rk7sCbGolDJnp9cs%2FVG1kD" target="_blank" rel="noreferrer">页面渲染-布局 &amp; 绘制</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTEwMTAwNg==&amp;mid=2650216399&amp;idx=1&amp;sn=78189d2901c26384d53b7ea3098c4291&amp;chksm=befe17ee89899ef867ec864767329ce6e14b3c31f31999c206e90a3223cc1fa155c76f9cb64b&amp;scene=0&amp;xtrack=1&amp;key=6eec20dd63b3d5ee7bc4e8dc9e7128adc078378fc5051432e65833b61e3bd007de20be8223fe7860cc2497adbd6cb5d9f702c7283ca83c29e796f64c3db2ec76fe00ef6edf0e0e3df087db439947a255&amp;ascene=1&amp;uin=Mjc2NDI1NDU2NA%3D%3D&amp;devicetype=Windows+7&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=IFL0xiBQ4IbomrqGCtYB%2BCGJOrvZIxSgi4oidlc8mxdr91WUD4TrPb9MHUHn7rE9" target="_blank" rel="noreferrer">浏览器页面渲染机制</a></p><p><a href="https://juejin.im/post/5c1069a16fb9a049e0632fb6" target="_blank" rel="noreferrer">DOM操作成本到底高在哪儿-回流重绘</a></p><ul><li>为什么建议 CSS 放在 &lt;header&gt; &lt;scipt&gt; 放在尾部？</li><li>为什么避免使用 CSS @import 导入 CSS 文件？</li><li>操作DOM具体的成本，说到底是造成浏览器回流reflow和重绘reflow，从而消耗GPU资源。</li></ul><p><a href="https://segmentfault.com/a/1190000017329980" target="_blank" rel="noreferrer">你真的了解回流和重绘吗</a></p><ul><li><a href="https://segmentfault.com/a/1190000017329980#articleHeader4" target="_blank" rel="noreferrer">何时发生重绘</a></li></ul><p><a href="https://segmentfault.com/a/1190000010298038" target="_blank" rel="noreferrer">从用户输入浏览器输入url到页面最后呈现 有哪些过程？</a></p><p><a href="http://caibaojian.com/fedbook/learning/browsers.html" target="_blank" rel="noreferrer">浏览器工作原理-前端开发</a></p><p><a href="https://juejin.im/post/5b88ddca6fb9a019c7717096" target="_blank" rel="noreferrer">css 加载会造成阻塞吗</a></p><p><a href="https://juejin.im/post/59c60691518825396f4f71a1" target="_blank" rel="noreferrer">css 与 js 阻塞DOM解析</a></p><p><a href="https://juejin.cn/post/6844903936877395981" target="_blank" rel="noreferrer">script 和 link 标签对DOM解析和渲染的影响</a></p><p><a href="https://www.infoq.cn/article/DltDuLToZIk_ZRqfb4jG" target="_blank" rel="noreferrer">浏览器渲染原理-InfoQ</a></p><h1 id="浏览器工作原理与实践" tabindex="-1"><a href="https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B" target="_blank" rel="noreferrer">浏览器工作原理与实践</a> <a class="header-anchor" href="#浏览器工作原理与实践" aria-label="Permalink to &quot;[浏览器工作原理与实践](https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B)&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247490542&amp;idx=1&amp;sn=d2c25370f8d942b16749d9052872d7ea&amp;chksm=c2e2eec5f59567d3861443aaa0ca229e1a8269741736b7bdf2f0ca042f1848eb6c879890f671&amp;token=505539647&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">浏览器进程-浏览器线程-浏览器内核-渲染进程</a></p><h1 id="插件-扩展程序" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/" target="_blank" rel="noreferrer">插件 | 扩展程序</a> <a class="header-anchor" href="#插件-扩展程序" aria-label="Permalink to &quot;[插件 | 扩展程序](https://developer.chrome.com/docs/extensions/)&quot;">​</a></h1><blockquote><p>由HTML、CSS、JS、图片等资源组成的一个.crx后缀的压缩包。</p></blockquote><blockquote><p>页面</p></blockquote><p>background、content-script、page、前台(popup各种页面)</p><p>browser action、page action</p><p><code>chrome.browserAction.setPopup()</code></p><ul><li>popup</li><li>背景页面</li><li>Options 页面</li></ul><blockquote><p>content-scripts</p></blockquote><p>Content script脚本是指能够在浏览器已经加载的页面内部运行的 javascript脚本。可以将content script看作是网页的一部分，而不是它所在的应用（扩展）的一部分。</p><p>Content script是在一个特殊环境中运行的，这个环境成为isolated world（隔离环境）。它们可以访问所注入页面的DOM,但是不能访问里面的任何javascript变量和函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">contentscript</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#89DDFF;">================</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> port </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myCustomEventDiv</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myCustomEvent</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myCustomEventDiv</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myCustomEvent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> values</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventData</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><p>Content-script 只能访问以下api</p><ul><li><p>chrome.extension(getURL , inIncognitoContext , lastError , onRequest , sendRequest)</p></li><li><p>chrome.i18n</p></li><li><p>chrome.runtime(connect , getManifest , getURL , id , onConnect , onMessage , sendMessage)</p></li><li><p>chrome.storage</p></li></ul></li><li><p>限制</p><ul><li>不能使用除了<a href="https://wizardforcel.gitbooks.io/chrome-doc/content/extension.html" target="_blank" rel="noreferrer">chrome.extension</a>之外的chrome.* 的接口</li><li>不能访问它所在扩展中定义的函数和变量</li><li>不能访问web页面或其它content script中定义的函数和变量</li><li>不能做<a href="https://wizardforcel.gitbooks.io/chrome-doc/content/xhr.html" target="_blank" rel="noreferrer">cross-site XMLHttpRequests</a></li></ul></li></ul><p>Content scripts 可以使用<a href="https://wizardforcel.gitbooks.io/chrome-doc/content/messaging.html" target="_blank" rel="noreferrer">messages</a>机制与它所在的扩展通信，来间接使用chrome.*接口，或访问扩展数据。Content scripts还可以通过共享的DOM来<a href="https://wizardforcel.gitbooks.io/chrome-doc/content/content_scripts.html#host-page-communication" target="_blank" rel="noreferrer">与web页面通信</a>。更多功能参见<a href="https://wizardforcel.gitbooks.io/chrome-doc/content/content_scripts.html#execution-environment" target="_blank" rel="noreferrer">执行环境</a>。</p><p><strong>注意</strong><a href="https://stackoverflow.com/questions/9515704/access-variables-and-functions-defined-in-page-context-using-a-content-script/9517879#9517879" target="_blank" rel="noreferrer">content-script 注入脚本</a> ：解决 content-script 不能操作 DOM，在 content-script 中向 page 插入 <code>script</code> 标签，然后利用 page 和 content-script 共享 DOM 的原理使用自定义事件实现 page 和 content-script 通信。</p><blockquote><p>页面间通信</p></blockquote><p>content-script 发消息给 extension: runtime.sendMessage</p><p>extension 发消息给 content-script: tabs.sendMessage</p><p>可以使用<a href="https://wizardforcel.gitbooks.io/chrome-doc/content/extension.html" target="_blank" rel="noreferrer"><code>chrome.extension</code></a>中的方法来获取应用（扩展）中的页面，例如getViews()和getBackgroundPage()。一旦一个页面得到了对应用（扩展）中其它页面的引用，它就可以调用被引用页面中的函数，并操作被引用页面的DOM树。</p><p><code>chrome.extension.getBackgroundPage();</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在通知中调用扩展页面方法...</span></span>
<span class="line"><span style="color:#A6ACCD;">chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBackgroundPage</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doThing</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从扩展页面调用通知的方法...</span></span>
<span class="line"><span style="color:#A6ACCD;">chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getViews</span><span style="color:#A6ACCD;">() 方法会返回属于你的扩展的每个活动页面的窗口对象列表</span></span>
<span class="line"><span style="color:#A6ACCD;">chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getViews</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">notification</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">win</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doOtherThing</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>chrome.extension.sendRequest</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">contentscript</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#89DDFF;">================</span></span>
<span class="line"><span style="color:#A6ACCD;">chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendRequest</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">greeting</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">farewell</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// chrome.tabs.sendRequest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onRequest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addListener</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sendResponse</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tab</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">from a content script:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tab</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">from the extension</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">greeting</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">sendResponse</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> farewell</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">goodbye</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sendResponse</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// snub them.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>长连接</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">建立一个长时间存在的通道从content script到扩展</span></span>
<span class="line"><span style="color:#A6ACCD;">使用chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extension</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#A6ACCD;">()或者chrome</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tabs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#A6ACCD;">()方法</span></span></code></pre></div><ul><li>获取url</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var imgURL = **chrome.extension.getURL(&quot;images/myimage.png&quot;)**;</span></span>
<span class="line"><span style="color:#A6ACCD;">document.getElementById(&quot;someImage&quot;).src = imgURL;</span></span></code></pre></div><ul><li>content 脚本和 background脚本通信</li></ul><p>Content scripts should use <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/sendMessage" target="_blank" rel="noreferrer"><code>runtime.sendMessage</code></a> to communicate with the background script.</p><blockquote><p><span style="color:red;">注意</span></p></blockquote><ul><li>在 content-script 中不能直接操作 DOM，可以将操作 DOM 的代码编写到单独的 JS 文件中，然后使用 <code>&lt;script&gt;</code> 标签插入到 DOM中。</li><li>使用 <code>&lt;script&gt;</code> 标签插入的 JS 文件中的代码不能访问 chrome.* 的各种 API，只能在 content-script 中访问 chrome.*</li><li>同一个页面中执行多次 <code>chrome.runtime.onMessage.addListener</code> ，只有第一次调用 <code>sendResponse</code> 的有效，其他的被忽略。<a href="https://developer.chrome.com/docs/extensions/mv3/messaging/#simple" target="_blank" rel="noreferrer">参考</a></li></ul><blockquote><p>参考</p></blockquote><p><a href="https://wizardforcel.gitbooks.io/chrome-doc/content/" target="_blank" rel="noreferrer">Chrome 扩展开发文档</a><a href="https://cloud.tencent.com/developer/article/1667242" target="_blank" rel="noreferrer">【干货】Chrome插件(扩展)开发全攻略</a><a href="https://xieyufei.com/2021/11/09/Chrome-Plugin.html#%E6%8F%92%E4%BB%B6%E5%8A%9F%E8%83%BD%E8%BF%9B%E9%98%B6" target="_blank" rel="noreferrer">chrome插件开发</a><a href="https://stackoverflow.com/questions/54181734/chrome-extension-message-passing-unchecked-runtime-lasterror-could-not-establi/54686484#54686484" target="_blank" rel="noreferrer">Could not establish connection. Receiving end does not exist</a></p><ul><li>常用插件 <ul><li>Window Resizer</li><li>Allow CORS</li><li>Web Vitals</li></ul></li></ul>`,99),p=[t];function r(c,i,D,y,F,d){return a(),e("div",null,p)}const A=s(o,[["render",r]]);export{h as __pageData,A as default};
